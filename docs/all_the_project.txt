.gitignore:
target
.idea
----------
.\all_to_one.ps1:
# 1. 閰嶇疆椤圭洰璺緞鍜岃緭鍑烘枃浠讹紙鏍规嵁瀹為檯鎯呭喌淇敼锛?
$projectRoot = "."  # 椤圭洰鏍圭洰褰曪紙蹇呴』淇敼锛侊級
$outputFile = ".\docs\all_the_project.txt"  # 杈撳嚭鏂囦欢璺緞

# 2. 閫掑綊鑾峰彇鎵€鏈夋枃浠讹紝鎺掗櫎鎸囧畾鏂囦欢澶?
Get-ChildItem -Path $projectRoot -Recurse -File |
Where-Object {
    # 杩囨护閫昏緫锛氭帓闄よ矾寰勪腑鍖呭惈\target\銆乗.idea\銆乗docs\鐨勬枃浠讹紙浠绘剰灞傜骇閮界敓鏁堬級
    $_.FullName -notmatch '\\(target|\.idea|docs)\\'
} |
# 3. 鐢熸垚鍚堝苟鍐呭锛堢浉瀵硅矾寰?鏂囦欢鍐呭+鍒嗛殧绗︼級
ForEach-Object {
    # 鑾峰彇鐩稿浜庨」鐩牴鐩綍鐨勭浉瀵硅矾寰勶紙鏇村噯纭級
    $relativePath = Resolve-Path -Path $_.FullName -Relative
    # 鎷兼帴鍐呭锛氱浉瀵硅矾寰?鍐掑彿+鏂囦欢鍐呭+鍒嗛殧绗︼紙淇濈暀鍘熷鎹㈣锛?
    "${relativePath}:`n$(Get-Content $_.FullName -Raw)`n----------"
} |
# 4. 杈撳嚭鍒版枃浠讹紙鎸囧畾UTF-8缂栫爜閬垮厤涔辩爜锛?
Out-File -FilePath $outputFile -Encoding UTF8

# 鎻愮ず瀹屾垚
Write-Host "鎵€鏈夋枃浠跺凡鍚堝苟鍒帮細$outputFile" -ForegroundColor Green

----------
.\docker-compose.yml:
version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine # 浣跨敤杞婚噺绾х殑Postgres闀滃儚
    container_name: smartdorm-db
    environment:
      POSTGRES_USER: user        # 涓?application.yml 涓厤缃竴鑷?
      POSTGRES_PASSWORD: password  # 涓?application.yml 涓厤缃竴鑷?
      POSTGRES_DB: smart_dorm    # 涓?application.yml 涓厤缃竴鑷?
    ports:
      - "5432:5432" # 灏嗗鍣ㄧ殑5432绔彛鏄犲皠鍒颁富鏈虹殑5432绔彛
    volumes:
      - pgdata:/var/lib/postgresql/data # 鏁版嵁鎸佷箙鍖栵紝闃叉瀹瑰櫒閲嶅惎鍚庢暟鎹涪澶?

volumes:
  pgdata: # 瀹氫箟涓€涓暟鎹嵎
----------
.\initial_schema.sql:
-- 鍚敤 pgcrypto 鎵╁睍浠ヤ娇鐢?gen_random_uuid()
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 1. 鐢ㄦ埛鏍稿績琛?
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    student_id VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    hashed_password VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('STUDENT', 'ADMIN')),
    -- [宸茶皟鏁碷 鏂板瀛楁浠ユ敮鎸佺畻娉曠殑纭€х瓫閫?
    gender VARCHAR(10) NOT NULL CHECK (gender IN ('MALE', 'FEMALE')),
    college VARCHAR(100) NOT NULL,
    is_special_needs BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 2. 鍖归厤鍛ㄦ湡琛?
CREATE TABLE matching_cycles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    start_date TIMESTAMPTZ,
    end_date TIMESTAMPTZ,
    status VARCHAR(20) NOT NULL DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'OPEN', 'PROCESSING', 'COMPLETED')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 3. 鍔ㄦ€侀棶鍗风淮搴﹁〃
CREATE TABLE survey_dimensions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cycle_id UUID NOT NULL REFERENCES matching_cycles(id) ON DELETE CASCADE,
    dimension_key VARCHAR(100) NOT NULL,
    prompt TEXT NOT NULL,
    -- [宸茶皟鏁碷 鏄庣‘缁村害鐨勭敤閫?
    dimension_type VARCHAR(20) NOT NULL CHECK (dimension_type IN ('HARD_FILTER', 'SOFT_FACTOR')),
    -- [宸茶皟鏁碷 澧炲姞澶嶅悎绫诲瀷
    response_type VARCHAR(20) NOT NULL CHECK (response_type IN ('SCALE', 'SINGLE_CHOICE', 'COMPOSITE')),
    weight DOUBLE PRECISION NOT NULL DEFAULT 1.0,
    -- [宸茶皟鏁碷 鏂板瀛楁鏀寔澶嶅悎缁村害
    parent_dimension_key VARCHAR(100),
    -- [宸茶皟鏁碷 鏂板瀛楁鏀寔鍙嶅悜璁″垎
    is_reverse_scored BOOLEAN NOT NULL DEFAULT FALSE,
    UNIQUE(cycle_id, dimension_key)
);

-- 4. 缁村害閫夐」琛?
CREATE TABLE dimension_options (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    dimension_id UUID NOT NULL REFERENCES survey_dimensions(id) ON DELETE CASCADE,
    option_text VARCHAR(255) NOT NULL,
    option_value DOUBLE PRECISION NOT NULL
);

-- 5. 瀛︾敓绛旀琛?
CREATE TABLE user_responses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    dimension_id UUID NOT NULL REFERENCES survey_dimensions(id) ON DELETE CASCADE,
    -- [宸茶皟鏁碷 瀛樺偍鍘熷鍊硷紝棰勫鐞嗗湪鍚庣杩涜
    raw_value DOUBLE PRECISION NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE(user_id, dimension_id)
);

-- 6. 瀹胯垗璧勬簮 - 妤兼爧
CREATE TABLE dorm_buildings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE
);

-- 7. 瀹胯垗璧勬簮 - 鎴块棿
CREATE TABLE dorm_rooms (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    building_id UUID NOT NULL REFERENCES dorm_buildings(id) ON DELETE CASCADE,
    room_number VARCHAR(20) NOT NULL,
    capacity INT NOT NULL,
    -- [宸茶皟鏁碷 涓?users 琛ㄧ殑 gender 涓ユ牸瀵瑰簲
    gender_type VARCHAR(20) NOT NULL CHECK (gender_type IN ('MALE', 'FEMALE')),
    UNIQUE(building_id, room_number)
);

-- 8. 瀹胯垗璧勬簮 - 搴婁綅
CREATE TABLE beds (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    room_id UUID NOT NULL REFERENCES dorm_rooms(id) ON DELETE CASCADE,
    bed_number INT NOT NULL,
    UNIQUE(room_id, bed_number)
);

-- 9. 鏈€缁堝尮閰嶇粨鏋滆〃
CREATE TABLE matching_results (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cycle_id UUID NOT NULL REFERENCES matching_cycles(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE UNIQUE,
    bed_id UUID NOT NULL REFERENCES beds(id) ON DELETE CASCADE UNIQUE,
    match_group_id UUID NOT NULL
);

-- 10. 鍏ヤ綇鍚庡弽棣堣〃
CREATE TABLE feedback (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cycle_id UUID NOT NULL REFERENCES matching_cycles(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    is_anonymous BOOLEAN NOT NULL DEFAULT FALSE,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 11. 璋冨鐢宠琛?
CREATE TABLE swap_requests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    cycle_id UUID NOT NULL REFERENCES matching_cycles(id) ON DELETE CASCADE,
    reason TEXT NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED')),
    admin_comment TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 12. 鑷姩鍖栭€氱煡琛?
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    message TEXT NOT NULL,
    link_url VARCHAR(255),
    is_read BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- 13. 鍐呭鍙戝竷琛?(蹇冪悊鍋ュ悍/瀹胯垗鏂囧寲)
CREATE TABLE content_articles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    category VARCHAR(50) NOT NULL,
    author_id UUID REFERENCES users(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

----------
.\make_files.ps1:
<#
.SYNOPSIS
    Creates the necessary empty files and directories for Phase 3 (Cycle & Dimension Management) of the SmartDorm project.
.DESCRIPTION
    This script will:
    - Define a list of required file paths for Phase 3.
    - Loop through each path.
    - Automatically create the parent directory structure if it doesn't exist.
    - Create a new, empty file if it doesn't already exist.
    - Skip any file that already exists to prevent data loss.
    - Provide clear output on what was created and what was skipped.
.NOTES
    Author: Your AI Assistant
    Version: 1.0
    Instructions: Run this script from the project root directory.
#>

# --- List of files to be created for Phase 3 ---
$filesToCreate = @(
    # Backend Controller & Test
    "src/main/java/com/smartdorm/backend/controller/AdminCycleViewController.java",
    "src/test/java/com/smartdorm/backend/controller/AdminCycleViewControllerTest.java",

    # Frontend Thymeleaf Views
    "src/main/resources/templates/admin/cycle/cycles-list.html",
    "src/main/resources/templates/admin/cycle/cycle-form.html",
    "src/main/resources/templates/admin/cycle/dimensions-list.html",
    "src/main/resources/templates/admin/cycle/dimension-form.html",
    "src/main/resources/templates/admin/cycle/_cycle-nav.html"
)

Write-Host "Starting Phase 3 file creation..." -ForegroundColor Cyan
Write-Host "------------------------------------"

# --- Main logic to process each file ---
foreach ($file in $filesToCreate) {
    # Get the parent directory of the file
    $directory = Split-Path -Path $file -Parent

    # Check if the directory exists, if not, create it
    if (-not (Test-Path -Path $directory -PathType Container)) {
        try {
            New-Item -Path $directory -ItemType Directory -Force -ErrorAction Stop | Out-Null
            Write-Host "Created directory:" -ForegroundColor Green -NoNewline
            Write-Host " $directory"
        }
        catch {
            Write-Host "Error creating directory $directory`: $_" -ForegroundColor Red
            # Stop processing if a directory cannot be created
            break
        }
    }

    # Check if the file exists, if not, create it as an empty file
    if (-not (Test-Path -Path $file -PathType Leaf)) {
        try {
            New-Item -Path $file -ItemType File -ErrorAction Stop | Out-Null
            Write-Host "Created file:     " -ForegroundColor Green -NoNewline
            Write-Host " $file"
        }
        catch {
            Write-Host "Error creating file $file`: $_" -ForegroundColor Red
        }
    }
    else {
        # If the file already exists, skip it and notify the user
        Write-Host "Skipped existing: " -ForegroundColor Yellow -NoNewline
        Write-Host " $file"
    }
}

Write-Host "------------------------------------"
Write-Host "Script finished. All required files for Phase 3 should now exist." -ForegroundColor Cyan
----------
.\pom.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version> <!-- 浣跨敤 Spring Boot 3.2.0 -->
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.smartdorm</groupId>
    <artifactId>backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>backend</name>
    <description>鏅烘収瀹胯垗鍒嗛厤绯荤粺鍚庣</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <!-- Spring Boot Web: for building RESTful APIs -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Data JPA: for database interaction -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Spring Security: for authentication and authorization -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        
        <!-- Validation: for validating DTOs -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- PostgreSQL Driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok: to reduce boilerplate code (getters, setters, etc.) -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- JWT Library (Auth0): for creating and verifying JWTs -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>4.4.0</version>
        </dependency>

        <!-- Spring Boot Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>1.19.7</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>1.19.7</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
            <!-- 鐗堟湰鍙烽€氬父鐢眘pring-boot-starter-parent绠＄悊锛屾棤闇€鎸囧畾 -->
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
----------
.\README.md:
宸茬煡Bug锛氭棤娉曠骇鑱斿垹闄ゅ缓绛
----------
.\src\main\java\com\smartdorm\backend\BackendApplication.java:
package com.smartdorm.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BackendApplication {

    public static void main(String[] args) {
        SpringApplication.run(BackendApplication.class, args);
    }

}
----------
.\src\main\java\com\smartdorm\backend\config\DataSeeder.java:
package com.smartdorm.backend.config;

import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.UserRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

@Component
public class DataSeeder implements CommandLineRunner {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public DataSeeder(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public void run(String... args) throws Exception {
        // Create a default admin user if not exists
        if (userRepository.findByStudentId("admin").isEmpty()) {
            User adminUser = new User();
            adminUser.setStudentId("admin");
            adminUser.setName("Administrator");
            // IMPORTANT: The password is "password"
            adminUser.setPassword(passwordEncoder.encode("password"));
            adminUser.setRole("ADMIN");
            adminUser.setGender("MALE");
            adminUser.setCollege("System Administration");
            userRepository.save(adminUser);
            System.out.println("====== Default admin user created. Username: admin, Password: password ======");
        }
        if (userRepository.findByStudentId("student").isEmpty()) {
            User adminUser = new User();
            adminUser.setStudentId("student");
            adminUser.setName("Student");
            // IMPORTANT: The password is "password"
            adminUser.setPassword(passwordEncoder.encode("password"));
            adminUser.setRole("STUDENT");
            adminUser.setGender("MALE");
            adminUser.setCollege("CS");
            userRepository.save(adminUser);
            System.out.println("====== Default student user created. Username: student, Password: password ======");
        }
    }
}
----------
.\src\main\java\com\smartdorm\backend\config\SecurityConfig.java:
// src/main/java/com/smartdorm/backend/config/SecurityConfig.java
package com.smartdorm.backend.config;

import com.smartdorm.backend.security.JwtAccessDeniedHandler;
import com.smartdorm.backend.security.JwtAuthenticationEntryPoint;
import com.smartdorm.backend.security.JwtRequestFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

    private final JwtRequestFilter jwtRequestFilter;
    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
    private final JwtAccessDeniedHandler jwtAccessDeniedHandler;

    public SecurityConfig(JwtRequestFilter jwtRequestFilter,
                          JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint,
                          JwtAccessDeniedHandler jwtAccessDeniedHandler) {
        this.jwtRequestFilter = jwtRequestFilter;
        this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;
        this.jwtAccessDeniedHandler = jwtAccessDeniedHandler;
    }

    // --- 鐜版湁 Bean 淇濇寔涓嶅彉 ---
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    // --- 瀹夊叏閾鹃厤缃皟鏁?---

    @Bean
    @Order(1) // API 瀹夊叏閾撅紝澶勭悊鏃犵姸鎬佺殑 JWT 璇锋眰
    public SecurityFilterChain apiSecurityFilterChain(HttpSecurity http) throws Exception {
        http
                .securityMatcher("/api/**") // **鍏抽敭**: 姝ら摼鍙鐞?/api/** 涓嬬殑璇锋眰
                .csrf(AbstractHttpConfigurer::disable) // **鍏抽敭**: 瀵?API 绂佺敤 CSRF
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/ping").permitAll() // 纭繚 API 鐧诲綍绔偣鏄叕寮€鐨?
                        .requestMatchers("/api/auth/login").permitAll() // 纭繚 API 鐧诲綍绔偣鏄叕寮€鐨?
                        .anyRequest().authenticated()
                )
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .exceptionHandling(exceptions -> exceptions
                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)
                        .accessDeniedHandler(jwtAccessDeniedHandler)
                )
                .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    @Order(2) // View Security Chain (for Thymeleaf)
    public SecurityFilterChain formLoginFilterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        // Publicly accessible resources
                        .requestMatchers("/css/**", "/js/**", "/error", "/login", "/perform_login").permitAll()
                        // Role-based access control for views
                        .requestMatchers("/view/admin/**").hasRole("ADMIN")
                        .requestMatchers("/view/student/**").hasRole("STUDENT")
                        // Any other request must be authenticated
                        .anyRequest().authenticated()
                )
                .formLogin(form -> form
                        .loginPage("/login")
                        .loginProcessingUrl("/perform_login")
                        .defaultSuccessUrl("/view/home", true) // Redirect to home after login
                        .failureUrl("/login?error=true")
                )
                .logout(logout -> logout
                        .logoutUrl("/perform_logout")
                        .logoutSuccessUrl("/login?logout=true")
                        .invalidateHttpSession(true)
                        .deleteCookies("JSESSIONID")
                );
        return http.build();
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\AdminAssignmentController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.AdminDtos.AdminAssignmentValidationDto;
import com.smartdorm.backend.dto.AdminDtos.AssignmentResultAdminDto;
import com.smartdorm.backend.service.AdminAssignmentService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("/api/admin/cycles/{cycleId}")
@PreAuthorize("hasRole('ADMIN')")
public class AdminAssignmentController {

    private final AdminAssignmentService adminAssignmentService;

    public AdminAssignmentController(AdminAssignmentService adminAssignmentService) {
        this.adminAssignmentService = adminAssignmentService;
    }

    @PostMapping("/trigger-assignment")
    public ResponseEntity<Map<String, String>> triggerAssignment(@PathVariable UUID cycleId) {
        adminAssignmentService.triggerAssignment(cycleId);
        return ResponseEntity.accepted().body(Map.of("message", "Assignment process started."));
    }

    /**
     * [NEW] Endpoint to get the full list of assignment results for a cycle.
     * Corresponds to use case ADM-04.
     */
    @GetMapping("/results")
    public ResponseEntity<List<AssignmentResultAdminDto>> getAssignmentResults(@PathVariable UUID cycleId) {
        List<AssignmentResultAdminDto> results = adminAssignmentService.getAssignmentResults(cycleId);
        return ResponseEntity.ok(results);
    }

    /**
     * [ENHANCED] Endpoint to validate the quality of assignment results.
     * Corresponds to use case ADM-08.
     */
    @GetMapping("/validate-results")
    public ResponseEntity<AdminAssignmentValidationDto> validateResults(@PathVariable UUID cycleId) {
        AdminAssignmentValidationDto report = adminAssignmentService.validateResults(cycleId);
        return ResponseEntity.ok(report);
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\AdminCycleViewController.java:
// src/main/java/com/smartdorm/backend/controller/AdminCycleViewController.java
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.CycleDtos;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.service.CycleManagementService;
import jakarta.validation.Valid;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Controller
@RequestMapping("/view/admin/cycles")
@PreAuthorize("hasRole('ADMIN')")
public class AdminCycleViewController {

    private final CycleManagementService cycleService;

    public AdminCycleViewController(CycleManagementService cycleService) {
        this.cycleService = cycleService;
    }

    @GetMapping
    public String listCycles(Model model) {
        model.addAttribute("cycles", cycleService.getAllCycles());
        return "admin/cycle/cycles-list";
    }

    @GetMapping("/new")
    public String showNewCycleForm(Model model) {
        if (!model.containsAttribute("cycleDto")) {
            model.addAttribute("cycleDto", new CycleDtos.MatchingCycleCreateDto("", null, null));
        }
        model.addAttribute("pageTitle", "鏂板缓鍖归厤鍛ㄦ湡");
        return "admin/cycle/cycle-form";
    }
    @PostMapping("/create")
    public String createCycle(@Valid @ModelAttribute("cycleDto") CycleDtos.MatchingCycleCreateDto dto,
                              BindingResult result, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            redirectAttributes.addFlashAttribute("org.springframework.validation.BindingResult.cycleDto", result);
            redirectAttributes.addFlashAttribute("cycleDto", dto);
            return "redirect:/view/admin/cycles/new";
        }
        CycleDtos.MatchingCycleDto created = cycleService.createCycle(dto);
        redirectAttributes.addFlashAttribute("successMessage", "鍛ㄦ湡 '" + created.name() + "' 鍒涘缓鎴愬姛锛?);
        return "redirect:/view/admin/cycles";
    }

    @GetMapping("/{id}/edit")
    public String showEditCycleForm(@PathVariable UUID id, Model model) {
        if (!model.containsAttribute("cycleDto")) {
            CycleDtos.MatchingCycleDto cycle = cycleService.getCycleById(id);
            CycleDtos.MatchingCycleUpdateDto updateDto = new CycleDtos.MatchingCycleUpdateDto(cycle.name(), cycle.startDate(), cycle.endDate(), cycle.status());
            model.addAttribute("cycleDto", updateDto);
        }
        model.addAttribute("cycleId", id);
        model.addAttribute("pageTitle", "缂栬緫鍖归厤鍛ㄦ湡");
        return "admin/cycle/cycle-form";
    }

    @PostMapping("/{id}/update")
    public String updateCycle(@PathVariable UUID id, @Valid @ModelAttribute("cycleDto") CycleDtos.MatchingCycleUpdateDto dto,
                              BindingResult result, RedirectAttributes redirectAttributes, Model model) {
        if (result.hasErrors()) {
            redirectAttributes.addFlashAttribute("org.springframework.validation.BindingResult.cycleDto", result);
            redirectAttributes.addFlashAttribute("cycleDto", dto);
            return "redirect:/view/admin/cycles/" + id + "/edit";
        }
        cycleService.updateCycle(id, dto);
        redirectAttributes.addFlashAttribute("successMessage", "鍛ㄦ湡淇℃伅鏇存柊鎴愬姛锛?);
        return "redirect:/view/admin/cycles";
    }

    @PostMapping("/{id}/delete")
    public String deleteCycle(@PathVariable UUID id, RedirectAttributes redirectAttributes) {
        try {
            cycleService.deleteCycle(id);
            redirectAttributes.addFlashAttribute("successMessage", "鍛ㄦ湡宸叉垚鍔熷垹闄ゃ€?);
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "鍒犻櫎澶辫触: " + e.getMessage());
        }
        return "redirect:/view/admin/cycles";
    }

    @GetMapping("/{cycleId}/dimensions")
    public String listDimensions(@PathVariable UUID cycleId, Model model) {
        model.addAttribute("cycle", cycleService.getCycleById(cycleId));
        model.addAttribute("dimensions", cycleService.getDimensionsForCycle(cycleId));
        return "admin/cycle/dimensions-list";
    }

    @GetMapping("/{cycleId}/dimensions/new")
    public String showNewDimensionForm(@PathVariable UUID cycleId, Model model) {
        if (!model.containsAttribute("dimensionDto")) {
            CycleDtos.SurveyDimensionCreateDto dto = new CycleDtos.SurveyDimensionCreateDto();
            // 棰勫～鍏?涓┖鐨勯€夐」琛?
            dto.setOptions(IntStream.range(0, 4)
                    .mapToObj(i -> new CycleDtos.OptionCreateDto("", null))
                    .collect(Collectors.toList()));
            model.addAttribute("dimensionDto", dto);
        }
        model.addAttribute("cycle", cycleService.getCycleById(cycleId));
        model.addAttribute("pageTitle", "鏂板缓闂嵎缁村害");
        return "admin/cycle/dimension-form";
    }

    // [鏈€缁堜慨姝ｇ増]
    @PostMapping("/{cycleId}/dimensions/create")
    public String createDimension(@PathVariable UUID cycleId,
                                  @Valid @ModelAttribute("dimensionDto") CycleDtos.SurveyDimensionCreateDto dto,
                                  BindingResult result, RedirectAttributes redirectAttributes) {

        // 1. 杩囨护鎺夌敤鎴锋湭濉啓鐨勭┖閫夐」琛?
        List<CycleDtos.OptionCreateDto> filteredOptions = dto.getOptions().stream()
                .filter(option -> StringUtils.hasText(option.optionText()) && Objects.nonNull(option.optionValue()))
                .collect(Collectors.toList());

        // 2. 妫€鏌ヨ繃婊ゅ悗鐨勯€夐」鏄惁涓虹┖
        if (filteredOptions.isEmpty()) {
            result.rejectValue("options", "options.notempty", "蹇呴』鑷冲皯鎻愪緵涓€涓湁鏁堢殑閫夐」锛堟弿杩板拰鍒嗗€奸兘闇€濉啓锛夈€?);
        }

        // 3. 濡傛灉鏈変换浣曢獙璇侀敊璇紙鏉ヨ嚜@Valid娉ㄨВ鐨勶紝鎴栨垜浠墜鍔ㄦ坊鍔犵殑锛夛紝鍒欓噸瀹氬悜
        if (result.hasErrors()) {
            redirectAttributes.addFlashAttribute("org.springframework.validation.BindingResult.dimensionDto", result);
            redirectAttributes.addFlashAttribute("dimensionDto", dto); // 灏嗙敤鎴峰師濮嬭緭鍏ヤ紶鍥?
            return "redirect:/view/admin/cycles/" + cycleId + "/dimensions/new";
        }

        // 4. 鐢ㄨ繃婊ゅ悗鐨勫共鍑€閫夐」鍒楄〃鏇存柊DTO锛岀劧鍚庝紶閫掔粰鏈嶅姟灞?
        dto.setOptions(filteredOptions);
        cycleService.createDimensionForCycle(cycleId, dto);

        redirectAttributes.addFlashAttribute("successMessage", "闂嵎缁村害 '" + dto.getPrompt() + "' 鍒涘缓鎴愬姛锛?);
        return "redirect:/view/admin/cycles/" + cycleId + "/dimensions";
    }
}

----------
.\src\main\java\com\smartdorm\backend\controller\AdminDormViewController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.DormDtos;
import com.smartdorm.backend.service.DormResourceService;
import com.smartdorm.backend.service.DormResourceService.RoomDetailDto;
import jakarta.validation.Valid;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/view/admin/dorms")
@PreAuthorize("hasRole('ADMIN')")
public class AdminDormViewController {

    private final DormResourceService dormResourceService;

    public AdminDormViewController(DormResourceService dormResourceService) {
        this.dormResourceService = dormResourceService;
    }

    // --- Building Management Views ---

    @GetMapping("/buildings")
    public String listBuildings(Model model) {
        model.addAttribute("buildings", dormResourceService.getAllBuildings());
        return "admin/dorm/buildings-list";
    }

    @GetMapping("/buildings/new")
    public String showNewBuildingForm(Model model) {
        model.addAttribute("buildingDto", new DormDtos.BuildingCreateUpdateDto(""));
        model.addAttribute("pageTitle", "鏂板缓妤兼爧");
        return "admin/dorm/building-form";
    }

    @PostMapping("/buildings/create")
    public String createBuilding(@Valid @ModelAttribute("buildingDto") DormDtos.BuildingCreateUpdateDto dto,
                                 BindingResult result, Model model, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            model.addAttribute("pageTitle", "鏂板缓妤兼爧");
            return "admin/dorm/building-form";
        }
        dormResourceService.createBuilding(dto);
        redirectAttributes.addFlashAttribute("successMessage", "妤兼爧 '" + dto.name() + "' 鍒涘缓鎴愬姛锛?);
        return "redirect:/view/admin/dorms/buildings";
    }

    @GetMapping("/buildings/{id}/edit")
    public String showEditBuildingForm(@PathVariable UUID id, Model model) {
        DormDtos.DormBuildingDto building = dormResourceService.getAllBuildings().stream()
                .filter(b -> b.id().equals(id)).findFirst()
                .orElseThrow(() -> new IllegalArgumentException("Invalid building Id:" + id));

        model.addAttribute("buildingDto", new DormDtos.BuildingCreateUpdateDto(building.name()));
        model.addAttribute("buildingId", id);
        model.addAttribute("pageTitle", "缂栬緫妤兼爧");
        return "admin/dorm/building-form";
    }

    @PostMapping("/buildings/{id}/update")
    public String updateBuilding(@PathVariable UUID id, @Valid @ModelAttribute("buildingDto") DormDtos.BuildingCreateUpdateDto dto,
                                 BindingResult result, Model model, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            model.addAttribute("buildingId", id);
            model.addAttribute("pageTitle", "缂栬緫妤兼爧");
            return "admin/dorm/building-form";
        }
        dormResourceService.updateBuilding(id, dto);
        redirectAttributes.addFlashAttribute("successMessage", "妤兼爧淇℃伅鏇存柊鎴愬姛锛?);
        return "redirect:/view/admin/dorms/buildings";
    }

    @PostMapping("/buildings/{id}/delete")
    public String deleteBuilding(@PathVariable UUID id, RedirectAttributes redirectAttributes) {
        try {
            dormResourceService.deleteBuilding(id);
            redirectAttributes.addFlashAttribute("successMessage", "妤兼爧鍒犻櫎鎴愬姛锛?);
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "鍒犻櫎澶辫触锛? + e.getMessage());
        }
        return "redirect:/view/admin/dorms/buildings";
    }

    @GetMapping("/rooms")
    public String listRooms(Model model, @RequestParam(required = false) UUID buildingId) {
        List<RoomDetailDto> allRoomDetails = dormResourceService.getRoomDetails();

        // **BUG淇**: 鐩存帴鍦ㄨ幏鍙栧埌鐨?roomDetails 鍒楄〃涓婅繘琛岃繃婊?
        List<RoomDetailDto> filteredRoomDetails = allRoomDetails;
        if (buildingId != null) {
            filteredRoomDetails = allRoomDetails.stream()
                    .filter(room -> room.buildingId().equals(buildingId))
                    .collect(Collectors.toList());
        }

        model.addAttribute("roomDetails", filteredRoomDetails);
        model.addAttribute("buildings", dormResourceService.getAllBuildings());
        model.addAttribute("selectedBuildingId", buildingId);

        return "admin/dorm/rooms-list";
    }

    @GetMapping("/rooms/new")
    public String showNewRoomForm(Model model) {
        if (!model.containsAttribute("roomDto")) {
            model.addAttribute("roomDto", new DormDtos.RoomCreateUpdateDto(null, "", 1, "MALE"));
        }
        model.addAttribute("buildings", dormResourceService.getAllBuildings());
        model.addAttribute("pageTitle", "鏂板缓鎴块棿");
        return "admin/dorm/room-form";
    }

    @PostMapping("/rooms/create")
    public String createRoom(@Valid @ModelAttribute("roomDto") DormDtos.RoomCreateUpdateDto dto,
                             BindingResult result, RedirectAttributes redirectAttributes, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("buildings", dormResourceService.getAllBuildings());
            model.addAttribute("pageTitle", "鏂板缓鎴块棿");
            return "admin/dorm/room-form";
        }
        dormResourceService.createRoom(dto);
        redirectAttributes.addFlashAttribute("successMessage", "鎴块棿 '" + dto.roomNumber() + "' 鍒涘缓鎴愬姛锛?);
        return "redirect:/view/admin/dorms/rooms";
    }

    @GetMapping("/rooms/{id}/edit")
    public String showEditRoomForm(@PathVariable UUID id, Model model) {
        // **銆愭牳蹇冧慨澶嶃€?*
        // 纭繚杩欓噷涔熻皟鐢ㄧ殑鏄?getRoomDetailById
        RoomDetailDto room = dormResourceService.getRoomDetailById(id);

        DormDtos.RoomCreateUpdateDto dto = new DormDtos.RoomCreateUpdateDto(room.buildingId(), room.roomNumber(), room.capacity(), room.genderType());

        model.addAttribute("roomDto", dto);
        model.addAttribute("roomId", id);
        model.addAttribute("buildings", dormResourceService.getAllBuildings());
        model.addAttribute("pageTitle", "缂栬緫鎴块棿");
        return "admin/dorm/room-form";
    }

    @PostMapping("/rooms/{id}/update")
    public String updateRoom(@PathVariable UUID id, @Valid @ModelAttribute("roomDto") DormDtos.RoomCreateUpdateDto dto,
                             BindingResult result, Model model, RedirectAttributes redirectAttributes) {
        if (result.hasErrors()) {
            model.addAttribute("roomId", id);
            model.addAttribute("buildings", dormResourceService.getAllBuildings());
            model.addAttribute("pageTitle", "缂栬緫鎴块棿");
            return "admin/dorm/room-form";
        }
        dormResourceService.updateRoom(id, dto);
        redirectAttributes.addFlashAttribute("successMessage", "鎴块棿淇℃伅鏇存柊鎴愬姛锛?);
        return "redirect:/view/admin/dorms/rooms";
    }

    @PostMapping("/rooms/{id}/delete")
    public String deleteRoom(@PathVariable UUID id, RedirectAttributes redirectAttributes) {
        try {
            dormResourceService.deleteRoom(id);
            redirectAttributes.addFlashAttribute("successMessage", "鎴块棿鍒犻櫎鎴愬姛锛?);
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "鍒犻櫎澶辫触锛? + e.getMessage());
        }
        return "redirect:/view/admin/dorms/rooms";
    }

    @GetMapping("/rooms/{roomId}/details")
    public String showRoomDetailsAndBeds(@PathVariable UUID roomId, Model model) {
        // **銆愭牳蹇冧慨澶嶃€?*
        // 纭繚杩欓噷璋冪敤鐨勬槸 getRoomDetailById锛岃€屼笉鏄?getRoomDetails().stream()...
        RoomDetailDto roomDetails = dormResourceService.getRoomDetailById(roomId);

        List<DormDtos.BedDto> beds = dormResourceService.getBedsForRoom(roomId);

        model.addAttribute("room", roomDetails);
        model.addAttribute("beds", beds);
        model.addAttribute("bedCreateDto", new DormDtos.BedCreateRequestDto(1));
        model.addAttribute("pageTitle", "鎴块棿璇︽儏涓庡簥浣嶇鐞?);
        return "admin/dorm/room-details";
    }
    @PostMapping("/rooms/{roomId}/beds/create-batch")
    public String createBedsBatch(@PathVariable UUID roomId,
                                  @Valid @ModelAttribute("bedCreateDto") DormDtos.BedCreateRequestDto dto,
                                  BindingResult result, RedirectAttributes redirectAttributes, Model model) {
        if (result.hasErrors()) {
            // If validation fails, we need to reload the page with the error
            RoomDetailDto roomDetails = dormResourceService.getRoomDetails().stream()
                    .filter(r -> r.id().equals(roomId)).findFirst()
                    .orElseThrow(() -> new IllegalArgumentException("Invalid room Id:" + roomId));
            List<DormDtos.BedDto> beds = dormResourceService.getBedsForRoom(roomId);
            model.addAttribute("room", roomDetails);
            model.addAttribute("beds", beds);
            model.addAttribute("pageTitle", "鎴块棿璇︽儏涓庡簥浣嶇鐞?);
            return "admin/dorm/room-details";
        }

        dormResourceService.createBedsForRoom(roomId, dto);
        redirectAttributes.addFlashAttribute("successMessage", "鎴愬姛娣诲姞 " + dto.bedCount() + " 涓簥浣嶏紒");
        return "redirect:/view/admin/dorms/rooms/" + roomId + "/details";
    }

    @PostMapping("/beds/{bedId}/delete")
    public String deleteBed(@PathVariable UUID bedId, @RequestParam UUID roomId, RedirectAttributes redirectAttributes) {
        try {
            dormResourceService.deleteBed(bedId);
            redirectAttributes.addFlashAttribute("successMessage", "搴婁綅鍒犻櫎鎴愬姛锛?);
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "鍒犻櫎澶辫触锛? + e.getMessage());
        }
        return "redirect:/view/admin/dorms/rooms/" + roomId + "/details";
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\AdminSupportController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.SupportDtos.*;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.repository.UserRepository;
import com.smartdorm.backend.service.SupportService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/admin")
@PreAuthorize("hasRole('ADMIN')")
public class AdminSupportController {

    private final SupportService supportService;
    private final UserRepository userRepository;

    public AdminSupportController(SupportService supportService, UserRepository userRepository) {
        this.supportService = supportService;
        this.userRepository = userRepository;
    }

    private User getCurrentUser(UserDetails userDetails) {
        return userRepository.findByStudentId(userDetails.getUsername())
                .orElseThrow(() -> new ResourceNotFoundException("Authenticated user not found in database."));
    }

    // --- Swap Requests ---
    @GetMapping("/swap-requests")
    public ResponseEntity<List<SwapRequestDto>> getAllSwapRequests() {
        return ResponseEntity.ok(supportService.getAllSwapRequests());
    }

    @PutMapping("/swap-requests/{requestId}/process")
    public ResponseEntity<SwapRequestDto> processSwapRequest(
            @PathVariable UUID requestId,
            @Valid @RequestBody SwapRequestUpdateDto dto) {
        return ResponseEntity.ok(supportService.processSwapRequest(requestId, dto));
    }

    // --- Articles ---
    @PostMapping("/articles")
    public ResponseEntity<ArticleDto> createArticle(@Valid @RequestBody ArticleCreateDto dto, @AuthenticationPrincipal UserDetails userDetails) {
        ArticleDto createdArticle = supportService.createArticle(dto, getCurrentUser(userDetails));
        return new ResponseEntity<>(createdArticle, HttpStatus.CREATED);
    }

    @GetMapping("/articles")
    public ResponseEntity<List<ArticleDto>> getAllArticles() {
        return ResponseEntity.ok(supportService.getArticles(null));
    }

    @GetMapping("/articles/{articleId}")
    public ResponseEntity<ArticleDto> getArticleById(@PathVariable UUID articleId) {
        return ResponseEntity.ok(supportService.getArticleById(articleId));
    }

    @PutMapping("/articles/{articleId}")
    public ResponseEntity<ArticleDto> updateArticle(
            @PathVariable UUID articleId,
            @Valid @RequestBody ArticleUpdateDto dto) {
        return ResponseEntity.ok(supportService.updateArticle(articleId, dto));
    }

    @DeleteMapping("/articles/{articleId}")
    public ResponseEntity<Void> deleteArticle(@PathVariable UUID articleId) {
        supportService.deleteArticle(articleId);
        return ResponseEntity.noContent().build();
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\AuthController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.service.AuthService;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private final AuthService authService;

    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    @PostMapping("/login")
    public ResponseEntity<LoginResponse> login(@Valid @RequestBody LoginRequest loginRequest) {
        return ResponseEntity.ok(authService.login(loginRequest));
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\CycleController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.service.CycleManagementService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/admin/cycles")
@PreAuthorize("hasRole('ADMIN')")
public class CycleController {

    private final CycleManagementService cycleService;

    public CycleController(CycleManagementService cycleService) {
        this.cycleService = cycleService;
    }

    // --- Cycle Endpoints ---
    @PostMapping
    public ResponseEntity<MatchingCycleDto> createCycle(@Valid @RequestBody MatchingCycleCreateDto dto) {
        return new ResponseEntity<>(cycleService.createCycle(dto), HttpStatus.CREATED);
    }

    @GetMapping
    public ResponseEntity<List<MatchingCycleDto>> getAllCycles() {
        return ResponseEntity.ok(cycleService.getAllCycles());
    }

    @GetMapping("/{cycleId}")
    public ResponseEntity<MatchingCycleDto> getCycleById(@PathVariable UUID cycleId) {
        return ResponseEntity.ok(cycleService.getCycleById(cycleId));
    }

    @PutMapping("/{cycleId}")
    public ResponseEntity<MatchingCycleDto> updateCycle(@PathVariable UUID cycleId, @Valid @RequestBody MatchingCycleUpdateDto dto) {
        return ResponseEntity.ok(cycleService.updateCycle(cycleId, dto));
    }

    @DeleteMapping("/{cycleId}")
    public ResponseEntity<Void> deleteCycle(@PathVariable UUID cycleId) {
        cycleService.deleteCycle(cycleId);
        return ResponseEntity.noContent().build();
    }

    // --- Dimension Endpoints ---
    @PostMapping("/{cycleId}/dimensions")
    public ResponseEntity<SurveyDimensionDto> createDimension(@PathVariable UUID cycleId, @Valid @RequestBody SurveyDimensionCreateDto dto) {
        return new ResponseEntity<>(cycleService.createDimensionForCycle(cycleId, dto), HttpStatus.CREATED);
    }

    @GetMapping("/{cycleId}/dimensions")
    public ResponseEntity<List<SurveyDimensionDto>> getDimensions(@PathVariable UUID cycleId) {
        return ResponseEntity.ok(cycleService.getDimensionsForCycle(cycleId));
    }

    @PutMapping("/{cycleId}/dimensions/{dimensionId}")
    public ResponseEntity<SurveyDimensionDto> updateDimension(@PathVariable UUID cycleId, @PathVariable UUID dimensionId, @Valid @RequestBody SurveyDimensionUpdateDto dto) {
        // cycleId is not strictly needed for the update logic but good for RESTful path structure
        return ResponseEntity.ok(cycleService.updateDimension(dimensionId, dto));
    }

    @DeleteMapping("/{cycleId}/dimensions/{dimensionId}")
    public ResponseEntity<Void> deleteDimension(@PathVariable UUID cycleId, @PathVariable UUID dimensionId) {
        cycleService.deleteDimension(dimensionId);
        return ResponseEntity.noContent().build();
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\DashboardController.java:
package com.smartdorm.backend.controller;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/view")
public class DashboardController {

    /**
     * Handles requests for the admin dashboard.
     * Only accessible by users with the 'ADMIN' role.
     * @return The view name for the admin dashboard.
     */
    @GetMapping("/admin/dashboard")
    @PreAuthorize("hasRole('ADMIN')")
    public String adminDashboard(Model model) {
        // Here you can add data from services to the model
        // For example: model.addAttribute("pendingRequests", swapRequestService.countPending());
        return "admin/dashboard"; // Corresponds to /templates/admin/dashboard.html
    }

    /**
     * Handles requests for the student dashboard.
     * Only accessible by users with the 'STUDENT' role.
     * @return The view name for the student dashboard.
     */
    @GetMapping("/student/dashboard")
    @PreAuthorize("hasRole('STUDENT')")
    public String studentDashboard(Model model) {
        // Example: model.addAttribute("isSurveyOpen", surveyService.isSurveyOpenForStudent());
        return "student/dashboard"; // Corresponds to /templates/student/dashboard.html
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\DormResourceController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.service.DormResourceService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/admin")
@PreAuthorize("hasRole('ADMIN')") // Secure all endpoints in this controller
public class DormResourceController {

    private final DormResourceService dormResourceService;

    public DormResourceController(DormResourceService dormResourceService) {
        this.dormResourceService = dormResourceService;
    }

    // --- Building Endpoints ---
    @GetMapping("/dorm-buildings")
    public ResponseEntity<List<DormBuildingDto>> getAllBuildings() {
        return ResponseEntity.ok(dormResourceService.getAllBuildings());
    }

    @PostMapping("/dorm-buildings")
    public ResponseEntity<DormBuildingDto> createBuilding(@Valid @RequestBody BuildingCreateUpdateDto dto) {
        return new ResponseEntity<>(dormResourceService.createBuilding(dto), HttpStatus.CREATED);
    }

    @PutMapping("/dorm-buildings/{buildingId}")
    public ResponseEntity<DormBuildingDto> updateBuilding(@PathVariable UUID buildingId, @Valid @RequestBody BuildingCreateUpdateDto dto) {
        return ResponseEntity.ok(dormResourceService.updateBuilding(buildingId, dto));
    }

    @DeleteMapping("/dorm-buildings/{buildingId}")
    public ResponseEntity<Void> deleteBuilding(@PathVariable UUID buildingId) {
        dormResourceService.deleteBuilding(buildingId);
        return ResponseEntity.noContent().build();
    }

    // --- Room Endpoints ---
    @PostMapping("/dorm-rooms")
    public ResponseEntity<DormRoomDto> createRoom(@Valid @RequestBody RoomCreateUpdateDto dto) {
        return new ResponseEntity<>(dormResourceService.createRoom(dto), HttpStatus.CREATED);
    }

    @PutMapping("/dorm-rooms/{roomId}")
    public ResponseEntity<DormRoomDto> updateRoom(@PathVariable UUID roomId, @Valid @RequestBody RoomCreateUpdateDto dto) {
        return ResponseEntity.ok(dormResourceService.updateRoom(roomId, dto));
    }

    @DeleteMapping("/dorm-rooms/{roomId}")
    public ResponseEntity<Void> deleteRoom(@PathVariable UUID roomId) {
        dormResourceService.deleteRoom(roomId);
        return ResponseEntity.noContent().build();
    }

    // --- Bed Endpoints ---
    @PostMapping("/rooms/{roomId}/beds")
    public ResponseEntity<BedsCreatedResponseDto> createBeds(@PathVariable UUID roomId, @Valid @RequestBody BedCreateRequestDto dto) {
        BedsCreatedResponseDto response = dormResourceService.createBedsForRoom(roomId, dto);
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }

    @DeleteMapping("/beds/{bedId}")
    public ResponseEntity<Void> deleteBed(@PathVariable UUID bedId) {
        dormResourceService.deleteBed(bedId);
        return ResponseEntity.noContent().build();
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\HealthCheckController.java:
package com.smartdorm.backend.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.Map;

@RestController
public class HealthCheckController {

    @GetMapping("/api/ping")
    public Map<String, String> ping() {
        return Map.of("status", "ok", "message", "Service is running!");
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\StudentController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.StudentDtos.*;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.repository.UserRepository;
import com.smartdorm.backend.service.StudentService;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/student")
@PreAuthorize("hasRole('STUDENT')")
public class StudentController {

    private final StudentService studentService;
    private final UserRepository userRepository;

    public StudentController(StudentService studentService, UserRepository userRepository) {
        this.studentService = studentService;
        this.userRepository = userRepository;
    }

    @GetMapping("/survey")
    public ResponseEntity<SurveyForStudentDto> getSurvey() {
        return ResponseEntity.ok(studentService.getSurveyForStudent());
    }

    @PostMapping("/responses")
    public ResponseEntity<Void> submitResponses(@Valid @RequestBody UserResponseSubmitDto dto, @AuthenticationPrincipal UserDetails userDetails) {
        User currentUser = getCurrentUser(userDetails);
        studentService.submitResponses(dto, currentUser);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/result")
    public ResponseEntity<AssignmentResultStudentDto> getResult(@AuthenticationPrincipal UserDetails userDetails) {
        User currentUser = getCurrentUser(userDetails);
        return ResponseEntity.ok(studentService.getStudentResult(currentUser));
    }

    private User getCurrentUser(UserDetails userDetails) {
        return userRepository.findByStudentId(userDetails.getUsername())
                .orElseThrow(() -> new ResourceNotFoundException("Authenticated user not found in database."));
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\StudentSupportController.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.SupportDtos.*;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.repository.UserRepository;
import com.smartdorm.backend.service.SupportService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/student")
@PreAuthorize("hasRole('STUDENT')")
public class StudentSupportController {

    private final SupportService supportService;
    private final UserRepository userRepository;

    public StudentSupportController(SupportService supportService, UserRepository userRepository) {
        this.supportService = supportService;
        this.userRepository = userRepository;
    }

    private User getCurrentUser(UserDetails userDetails) {
        return userRepository.findByStudentId(userDetails.getUsername())
                .orElseThrow(() -> new ResourceNotFoundException("Authenticated user not found in database."));
    }

    // --- Feedback ---
    @PostMapping("/feedback")
    public ResponseEntity<Void> submitFeedback(@Valid @RequestBody FeedbackCreateDto dto, @AuthenticationPrincipal UserDetails userDetails) {
        supportService.createFeedback(dto, getCurrentUser(userDetails));
        return new ResponseEntity<>(HttpStatus.CREATED);
    }

    // --- Swap Request ---
    @PostMapping("/swap-requests")
    public ResponseEntity<Void> submitSwapRequest(@Valid @RequestBody SwapRequestCreateDto dto, @AuthenticationPrincipal UserDetails userDetails) {
        supportService.createSwapRequest(dto, getCurrentUser(userDetails));
        return new ResponseEntity<>(HttpStatus.CREATED);
    }

    // --- Articles ---
    @GetMapping("/articles")
    public ResponseEntity<List<ArticleDto>> getArticles(@RequestParam(required = false) String category) {
        return ResponseEntity.ok(supportService.getArticles(category));
    }

    @GetMapping("/articles/{articleId}")
    public ResponseEntity<ArticleDto> getArticleById(@PathVariable UUID articleId) {
        return ResponseEntity.ok(supportService.getArticleById(articleId));
    }

    // --- Notifications ---
    @GetMapping("/notifications")
    public ResponseEntity<List<NotificationDto>> getNotifications(@AuthenticationPrincipal UserDetails userDetails) {
        return ResponseEntity.ok(supportService.getNotificationsForUser(getCurrentUser(userDetails)));
    }

    @PostMapping("/notifications/{notificationId}/read")
    public ResponseEntity<Void> markNotificationAsRead(@PathVariable UUID notificationId, @AuthenticationPrincipal UserDetails userDetails) {
        supportService.markNotificationAsRead(notificationId, getCurrentUser(userDetails));
        return ResponseEntity.noContent().build();
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\UserController.java:
// src/main/java/com/smartdorm/backend/controller/UserController.java
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.UserDto;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.UserRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Controller to handle user-related operations.
 */
@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserRepository userRepository;

    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    /**
     * Retrieves the details of the currently authenticated user.
     * This is a protected endpoint.
     *
     * @param userDetails The details of the authenticated user, injected by Spring Security.
     * @return A DTO with the current user's information.
     */
    @GetMapping("/me")
    public ResponseEntity<UserDto> getCurrentUser(@AuthenticationPrincipal UserDetails userDetails) {
        // Find the full user entity from the database using the username from the token
        User user = userRepository.findByStudentId(userDetails.getUsername())
                .orElseThrow(() -> new IllegalStateException("Authenticated user not found in database"));

        // Map the entity to a safe DTO (without password)
        UserDto userDto = new UserDto(user.getId(), user.getStudentId(), user.getName(), user.getRole(), user.getGender(), user.getCollege());
        return ResponseEntity.ok(userDto);
    }
}
----------
.\src\main\java\com\smartdorm\backend\controller\ViewController.java:
package com.smartdorm.backend.controller;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class ViewController {

    /**
     * 鏄剧ず鑷畾涔夌殑鐧诲綍椤甸潰銆?
     * 璺緞涓?SecurityConfig 涓殑 .loginPage("/login") 瀵瑰簲銆?
     */
    @GetMapping("/login")
    public String loginPage() {
        return "login"; // 杩斿洖 templates/login.html
    }

    /**
     * 鐧诲綍鎴愬姛鍚庣殑缁熶竴鍏ュ彛鐐广€?
     * 鏍规嵁鐢ㄦ埛瑙掕壊閲嶅畾鍚戝埌鍚勮嚜鐨勪华琛ㄧ洏銆?
     * 璺緞涓?SecurityConfig 涓殑 .defaultSuccessUrl("/view/home", true) 瀵瑰簲銆?
     */
    @GetMapping(value = {"/", "/view/home"})
    public String home(Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/login";
        }

        // 妫€鏌ョ敤鎴疯鑹插苟閲嶅畾鍚?
        for (GrantedAuthority auth : authentication.getAuthorities()) {
            if ("ROLE_ADMIN".equals(auth.getAuthority())) {
                return "redirect:/view/admin/dashboard";
            }
            if ("ROLE_STUDENT".equals(auth.getAuthority())) {
                return "redirect:/view/student/dashboard";
            }
        }

        // 榛樿鍥為€€锛堢悊璁轰笂涓嶅簲鍙戠敓锛?
        return "redirect:/login?error=true";
    }
}
----------
.\src\main\java\com\smartdorm\backend\dto\AdminDtos.java:
package com.smartdorm.backend.dto;

import java.util.List;
import java.util.UUID;

public class AdminDtos {

    /**
     * DTO for displaying assignment results in the admin panel.
     * Corresponds to ADM-04 use case.
     */
    public record AssignmentResultAdminDto(
            UserDto user,
            String building,
            String room,
            int bed
    ) {}

    /**
     * DTO for a single validation metric in the quality report.
     */
    public record ValidationDetailDto(
            String dorm,
            String metric,
            double value,
            boolean isCompliant
    ) {}

    /**
     * DTO for the overall assignment quality validation report.
     * Corresponds to ADM-08 use case.
     */
    public record AdminAssignmentValidationDto(
            boolean isValid,
            String message,
            List<ValidationDetailDto> details
    ) {}
}
----------
.\src\main\java\com\smartdorm\backend\dto\CycleDtos.java:
// src/main/java/com/smartdorm/backend/dto/CycleDtos.java
package com.smartdorm.backend.dto;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class CycleDtos {

    // --- Response DTOs ---
    public record MatchingCycleDto(UUID id, String name, Instant startDate, Instant endDate, String status) {}

    public record DimensionOptionDto(UUID id, String optionText, double optionValue) {}

    public record SurveyDimensionDto(
            UUID id,
            String dimensionKey,
            String prompt,
            String dimensionType,
            String responseType,
            double weight,
            String parentDimensionKey,
            boolean reverseScored, // [淇敼] 瀛楁鍚嶇粺涓€
            List<DimensionOptionDto> options
    ) {}


    // --- Request/Create/Update DTOs ---
    public record MatchingCycleCreateDto(
            @NotEmpty String name,
            Instant startDate,
            Instant endDate
    ) {}

    public record MatchingCycleUpdateDto(
            String name,
            Instant startDate,
            Instant endDate,
            @Pattern(regexp = "DRAFT|OPEN|COMPLETED", message = "Status must be DRAFT, OPEN, or COMPLETED") String status
    ) {}

    public record OptionCreateDto(
            String optionText, // [淇敼] 绉婚櫎 @NotEmpty锛岀敱Controller鎵嬪姩楠岃瘉
            Double optionValue   // [淇敼] 绉婚櫎 @NotNull锛岀敱Controller鎵嬪姩楠岃瘉
    ) {}

    // [鍏抽敭閲嶆瀯] 灏?SurveyDimensionCreateDto 浠?record 鏀逛负 class
    @Data
    @NoArgsConstructor
    public static class SurveyDimensionCreateDto {
        @NotEmpty
        private String dimensionKey;

        @NotEmpty
        private String prompt;

        @NotEmpty @Pattern(regexp = "HARD_FILTER|SOFT_FACTOR")
        private String dimensionType = "SOFT_FACTOR";

        @NotEmpty @Pattern(regexp = "SCALE|SINGLE_CHOICE|COMPOSITE")
        private String responseType = "SINGLE_CHOICE";

        @NotNull @PositiveOrZero
        private Double weight = 1.0;

        private String parentDimensionKey;

        // [淇敼] 瀛楁鍚嶇粺涓€涓?reverseScored
        private boolean reverseScored = false;

        @Valid
        private List<OptionCreateDto> options = new ArrayList<>();
    }

    public record SurveyDimensionUpdateDto(
            @NotEmpty String prompt,
            @NotNull @PositiveOrZero Double weight,
            boolean reverseScored // [淇敼] 瀛楁鍚嶇粺涓€
    ) {}
}
----------
.\src\main\java\com\smartdorm\backend\dto\DormDtos.java:
package com.smartdorm.backend.dto;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;

import java.util.List;
import java.util.UUID;

// Using a single file for related, simple records can be convenient.

public class DormDtos {

    // --- Response DTOs ---

    public record DormBuildingDto(UUID id, String name) {}

    public record DormRoomDto(UUID id, UUID buildingId, String roomNumber, int capacity, String genderType) {}

    public record BedDto(UUID id, UUID roomId, int bedNumber) {}

    // --- Request DTOs ---

    public record BuildingCreateUpdateDto(@NotBlank String name) {}

    public record RoomCreateUpdateDto(
            @NotNull UUID buildingId,
            @NotBlank String roomNumber,
            @Min(1) int capacity,
            @NotBlank @Pattern(regexp = "MALE|FEMALE", message = "Gender must be MALE or FEMALE") String genderType
    ) {}

    public record BedCreateRequestDto(@NotNull @Min(1) Integer bedCount) {}

    public record BedsCreatedResponseDto(int count, List<BedDto> beds) {}
}
----------
.\src\main\java\com\smartdorm\backend\dto\LoginRequest.java:
package com.smartdorm.backend.dto;

import jakarta.validation.constraints.NotBlank;

public record LoginRequest(
        @NotBlank String studentId,
        @NotBlank String password
) {}
----------
.\src\main\java\com\smartdorm\backend\dto\LoginResponse.java:
package com.smartdorm.backend.dto;

public record LoginResponse(
        String token,
        UserDto user
) {}
----------
.\src\main\java\com\smartdorm\backend\dto\StudentDtos.java:
package com.smartdorm.backend.dto;

import com.smartdorm.backend.dto.CycleDtos.SurveyDimensionDto;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import java.util.UUID;

public class StudentDtos {

    // --- Response DTOs ---

    public record SurveyForStudentDto(UUID cycleId, List<SurveyDimensionDto> dimensions) {}

    public record AssignmentDetails(String building, String room, int bed) {}
    public record RoommateDto(String name, String studentId) {}
    public record AssignmentResultStudentDto(AssignmentDetails assignment, List<RoommateDto> roommates) {}


    // --- Request DTOs ---

    public record ResponseItem(
            @NotNull UUID dimensionId,
            @NotNull Double rawValue
    ) {}

    public record UserResponseSubmitDto(
            @NotNull @Valid List<ResponseItem> responses
    ) {}
}
----------
.\src\main\java\com\smartdorm\backend\dto\SupportDtos.java:
package com.smartdorm.backend.dto;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;

import java.time.Instant;
import java.util.UUID;

public class SupportDtos {

    // --- Feedback ---
    public record FeedbackCreateDto(
            boolean isAnonymous,
            @NotNull @Min(1) @Max(5) Integer rating,
            String comment
    ) {}

    // --- Swap Request ---
    public record SwapRequestCreateDto(
            @NotBlank String reason
    ) {}

    public record SwapRequestUpdateDto(
            @NotBlank @Pattern(regexp = "APPROVED|REJECTED", message = "Status must be APPROVED or REJECTED")
            String status,
            String adminComment
    ) {}

    public record SwapRequestDto(
            UUID id,
            UUID userId,
            String userName, // For admin convenience
            UUID cycleId,
            String reason,
            String status,
            String adminComment,
            Instant createdAt
    ) {}

    // --- Article ---
    public record ArticleCreateDto(
            @NotBlank String title,
            @NotBlank String content,
            @NotBlank String category
    ) {}

    public record ArticleUpdateDto(
            String title,
            String content,
            String category
    ) {}

    public record ArticleDto(
            UUID id,
            String title,
            String content,
            String category,
            UUID authorId,
            String authorName, // For convenience
            Instant createdAt
    ) {}

    // --- Notification ---
    public record NotificationDto(
            UUID id,
            String message,
            String linkUrl,
            boolean isRead,
            Instant createdAt
    ) {}
}
----------
.\src\main\java\com\smartdorm\backend\dto\UserDto.java:
package com.smartdorm.backend.dto;

import java.util.UUID;

// DTO to safely expose user data, without the password
public record UserDto(
        UUID id,
        String studentId,
        String name,
        String role,
        String gender,
        String college
) {}
----------
.\src\main\java\com\smartdorm\backend\entity\Bed.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.util.UUID;

@Data
@Entity
@Table(name = "beds", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"room_id", "bed_number"})
})
public class Bed {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "room_id", nullable = false)
    private DormRoom room;

    @Column(name = "bed_number", nullable = false)
    private int bedNumber;
}
----------
.\src\main\java\com\smartdorm\backend\entity\ContentArticle.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;
import java.util.UUID;

@Data
@Entity
@Table(name = "content_articles")
public class ContentArticle {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Column(nullable = false)
    private String title;

    @Column(nullable = false, columnDefinition = "TEXT")
    private String content;

    @Column(nullable = false, length = 50)
    private String category;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "author_id")
    private User author;

    @CreationTimestamp
    private Instant createdAt;
}
----------
.\src\main\java\com\smartdorm\backend\entity\DimensionOption.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import java.util.UUID;

@Data
@Entity
@Table(name = "dimension_options")
public class DimensionOption {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "dimension_id", nullable = false)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private SurveyDimension dimension;

    @Column(name = "option_text", nullable = false, length = 255)
    private String optionText;

    @Column(name = "option_value", nullable = false)
    private double optionValue;
}
----------
.\src\main\java\com\smartdorm\backend\entity\DormBuilding.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@Entity
@Table(name = "dorm_buildings")
public class DormBuilding {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Column(nullable = false, unique = true, length = 100)
    private String name;

    @OneToMany(mappedBy = "building", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<DormRoom> rooms = new ArrayList<>();
}
----------
.\src\main\java\com\smartdorm\backend\entity\DormRoom.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@Entity
@Table(name = "dorm_rooms", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"building_id", "room_number"})
})
public class DormRoom {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "building_id", nullable = false)
    private DormBuilding building;

    @Column(name = "room_number", nullable = false, length = 20)
    private String roomNumber;

    @Column(nullable = false)
    private int capacity;

    @Column(name = "gender_type", nullable = false, length = 20)
    private String genderType; // "MALE" or "FEMALE"

    @OneToMany(mappedBy = "room", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Bed> beds = new ArrayList<>();
}
----------
.\src\main\java\com\smartdorm\backend\entity\Feedback.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;
import java.util.UUID;

@Data
@Entity
@Table(name = "feedback")
public class Feedback {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cycle_id", nullable = false)
    private MatchingCycle cycle;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(nullable = false)
    private boolean isAnonymous = false;

    private Integer rating;

    @Column(columnDefinition = "TEXT")
    private String comment;

    @CreationTimestamp
    private Instant createdAt;
}
----------
.\src\main\java\com\smartdorm\backend\entity\MatchingCycle.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@Entity
@Table(name = "matching_cycles")
public class MatchingCycle {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Column(nullable = false, length = 255)
    private String name;

    private Instant startDate;
    private Instant endDate;

    @Column(nullable = false, length = 20)
    private String status = "DRAFT"; // DRAFT, OPEN, PROCESSING, COMPLETED

    @CreationTimestamp
    private Instant createdAt;

    @OneToMany(mappedBy = "cycle", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<SurveyDimension> dimensions = new ArrayList<>();
}
----------
.\src\main\java\com\smartdorm\backend\entity\MatchingResult.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.util.UUID;

@Data
@Entity
@Table(name = "matching_results")
public class MatchingResult {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cycle_id", nullable = false)
    private MatchingCycle cycle;

    @OneToOne
    @JoinColumn(name = "user_id", nullable = false, unique = true)
    private User user;

    @OneToOne
    @JoinColumn(name = "bed_id", nullable = false, unique = true)
    private Bed bed;

    @Column(name = "match_group_id", nullable = false)
    private UUID matchGroupId; // Used to group roommates
}
----------
.\src\main\java\com\smartdorm\backend\entity\Notification.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import java.time.Instant;
import java.util.UUID;

@Data
@Entity
@Table(name = "notifications")
public class Notification {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(nullable = false, columnDefinition = "TEXT")
    private String message;

    private String linkUrl;

    @Column(nullable = false)
    private boolean isRead = false;

    @CreationTimestamp
    private Instant createdAt;
}
----------
.\src\main\java\com\smartdorm\backend\entity\SurveyDimension.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@Entity
@Table(name = "survey_dimensions", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"cycle_id", "dimension_key"})
})
public class SurveyDimension {

    // ... 鍏朵粬瀛楁淇濇寔涓嶅彉 ...
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cycle_id", nullable = false)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private MatchingCycle cycle;

    @Column(name = "dimension_key", nullable = false, length = 100)
    private String dimensionKey;

    @Column(nullable = false, columnDefinition = "TEXT")
    private String prompt;

    @Column(name = "dimension_type", nullable = false, length = 20)
    private String dimensionType;

    @Column(name = "response_type", nullable = false, length = 20)
    private String responseType;

    @Column(nullable = false)
    private double weight = 1.0;

    @Column(name = "parent_dimension_key", length = 100)
    private String parentDimensionKey;

    // [鍏抽敭淇敼] 灏嗗瓧娈靛悕浠?isReverseScored 鏀逛负 reverseScored
    // JPA 鍜?Lombok 浼氬皢鍏舵槧灏勫埌鏁版嵁搴撶殑 is_reverse_scored 鎴?reverse_scored 鍒?
    @Column(name = "reverse_scored", nullable = false)
    private boolean reverseScored = false;

    @OneToMany(mappedBy = "dimension", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private List<DimensionOption> options = new ArrayList<>();
}
----------
.\src\main\java\com\smartdorm\backend\entity\SwapRequest.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.Instant;
import java.util.UUID;

@Data
@Entity
@Table(name = "swap_requests")
public class SwapRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cycle_id", nullable = false)
    private MatchingCycle cycle;

    @Column(nullable = false, columnDefinition = "TEXT")
    private String reason;

    @Column(nullable = false, length = 20)
    private String status = "PENDING"; // PENDING, APPROVED, REJECTED

    @Column(columnDefinition = "TEXT")
    private String adminComment;

    @CreationTimestamp
    private Instant createdAt;

    @UpdateTimestamp
    private Instant updatedAt;
}
----------
.\src\main\java\com\smartdorm\backend\entity\User.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.Instant;
import java.util.UUID;

@Data
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Column(unique = true, nullable = false, length = 50)
    private String studentId;

    @Column(nullable = false, length = 100)
    private String name;

    @Column(name = "hashed_password", nullable = false)
    private String password;

    @Column(nullable = false, length = 20)
    private String role; // "STUDENT" or "ADMIN"

    @Column(nullable = false, length = 10)
    private String gender; // "MALE" or "FEMALE"

    @Column(nullable = false, length = 100)
    private String college;

    @Column(nullable = false)
    private boolean isSpecialNeeds = false;

    @CreationTimestamp
    private Instant createdAt;

    @UpdateTimestamp
    private Instant updatedAt;
}
----------
.\src\main\java\com\smartdorm\backend\entity\UserResponse.java:
package com.smartdorm.backend.entity;

import jakarta.persistence.*;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.Instant;
import java.util.UUID;

@Data
@Entity
@Table(name = "user_responses", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"user_id", "dimension_id"})
})
public class UserResponse {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "dimension_id", nullable = false)
    private SurveyDimension dimension;

    @Column(name = "raw_value", nullable = false)
    private double rawValue;

    @CreationTimestamp
    private Instant createdAt;

    @UpdateTimestamp
    private Instant updatedAt;
}
----------
.\src\main\java\com\smartdorm\backend\exception\DataConflictException.java:
package com.smartdorm.backend.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.CONFLICT)
public class DataConflictException extends RuntimeException {
    public DataConflictException(String message) {
        super(message);
    }
}
----------
.\src\main\java\com\smartdorm\backend\exception\GlobalExceptionHandler.java:
// src/main/java/com/smartdorm/backend/exception/GlobalExceptionHandler.java
package com.smartdorm.backend.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import java.time.Instant;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<Map<String, Object>> handleBadCredentialsException(BadCredentialsException ex) {
        return ResponseEntity
                .status(HttpStatus.UNAUTHORIZED)
                .body(Map.of(
                        "timestamp", Instant.now(),
                        "status", HttpStatus.UNAUTHORIZED.value(),
                        "error", "Unauthorized",
                        "message", ex.getMessage()
                ));
    }

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleResourceNotFoundException(ResourceNotFoundException ex) {
        return ResponseEntity
                .status(HttpStatus.NOT_FOUND)
                .body(Map.of(
                        "timestamp", Instant.now(),
                        "status", HttpStatus.NOT_FOUND.value(),
                        "error", "Not Found",
                        "message", ex.getMessage()
                ));
    }

    @ExceptionHandler(DataConflictException.class)
    public ResponseEntity<Map<String, Object>> handleDataConflictException(DataConflictException ex) {
        return ResponseEntity
                .status(HttpStatus.CONFLICT)
                .body(Map.of(
                        "timestamp", Instant.now(),
                        "status", HttpStatus.CONFLICT.value(),
                        "error", "Conflict",
                        "message", ex.getMessage()
                ));
    }
}
----------
.\src\main\java\com\smartdorm\backend\exception\ResourceNotFoundException.java:
package com.smartdorm.backend.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
----------
.\src\main\java\com\smartdorm\backend\mapper\CycleMapper.java:
package com.smartdorm.backend.mapper;

import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.entity.DimensionOption;
import com.smartdorm.backend.entity.MatchingCycle;
import com.smartdorm.backend.entity.SurveyDimension;
import org.springframework.stereotype.Component;
import java.util.stream.Collectors;

@Component
public class CycleMapper {

    public MatchingCycleDto toDto(MatchingCycle cycle) {
        return new MatchingCycleDto(cycle.getId(), cycle.getName(), cycle.getStartDate(), cycle.getEndDate(), cycle.getStatus());
    }
    public SurveyDimensionDto toDto(SurveyDimension dimension) {
        return new SurveyDimensionDto(
                dimension.getId(),
                dimension.getDimensionKey(),
                dimension.getPrompt(),
                dimension.getDimensionType(),
                dimension.getResponseType(),
                dimension.getWeight(),
                dimension.getParentDimensionKey(),
                // [鍏抽敭淇敼] 瀹炰綋涓殑瀛楁鍚嶄篃寤鸿鍚屾淇敼锛屼絾濡傛灉鏆傛椂涓嶅姩锛実etter灏辨槸isReverseScored()
                dimension.isReverseScored(),
                dimension.getOptions().stream().map(this::toDto).collect(Collectors.toList())
        );
    }

    public DimensionOptionDto toDto(DimensionOption option) {
        return new DimensionOptionDto(option.getId(), option.getOptionText(), option.getOptionValue());
    }
}
----------
.\src\main\java\com\smartdorm\backend\mapper\DormMapper.java:
package com.smartdorm.backend.mapper;

import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.entity.Bed;
import com.smartdorm.backend.entity.DormBuilding;
import com.smartdorm.backend.entity.DormRoom;
import org.springframework.stereotype.Component;

@Component
public class DormMapper {

    public DormBuildingDto toDto(DormBuilding building) {
        return new DormBuildingDto(building.getId(), building.getName());
    }

    public DormRoomDto toDto(DormRoom room) {
        return new DormRoomDto(
                room.getId(),
                room.getBuilding().getId(),
                room.getRoomNumber(),
                room.getCapacity(),
                room.getGenderType()
        );
    }

    public BedDto toDto(Bed bed) {
        return new BedDto(bed.getId(), bed.getRoom().getId(), bed.getBedNumber());
    }
}
----------
.\src\main\java\com\smartdorm\backend\repository\BedRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.Bed;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface BedRepository extends JpaRepository<Bed, UUID> {
    // 鐢ㄤ簬妫€鏌ユ埧闂翠笅鏄惁鏈夊簥浣?
    boolean existsByRoomId(UUID roomId);
    List<Bed> findByRoomIdOrderByBedNumberAsc(UUID roomId);
}
----------
.\src\main\java\com\smartdorm\backend\repository\ContentArticleRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.ContentArticle;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface ContentArticleRepository extends JpaRepository<ContentArticle, UUID> {
    List<ContentArticle> findByCategory(String category);
}
----------
.\src\main\java\com\smartdorm\backend\repository\DormBuildingRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.DormBuilding;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface DormBuildingRepository extends JpaRepository<DormBuilding, UUID> {
}
----------
.\src\main\java\com\smartdorm\backend\repository\DormRoomRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.DormRoom;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface DormRoomRepository extends JpaRepository<DormRoom, UUID> {
    // 鐢ㄤ簬妫€鏌ユゼ鏍嬩笅鏄惁鏈夋埧闂达紝姣斿姞杞芥暣涓垪琛ㄦ洿楂樻晥
    boolean existsByBuildingId(UUID buildingId);
    List<DormRoom> findAll();
}
----------
.\src\main\java\com\smartdorm\backend\repository\FeedbackRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.Feedback;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface FeedbackRepository extends JpaRepository<Feedback, UUID> {
}
----------
.\src\main\java\com\smartdorm\backend\repository\MatchingCycleRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.MatchingCycle;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.UUID;

@Repository
public interface MatchingCycleRepository extends JpaRepository<MatchingCycle, UUID> {
}
----------
.\src\main\java\com\smartdorm\backend\repository\MatchingResultRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.MatchingResult;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface MatchingResultRepository extends JpaRepository<MatchingResult, UUID> {
    Optional<MatchingResult> findByUserId(UUID userId);

    List<MatchingResult> findByBed_Room_Id(UUID roomId);
    List<MatchingResult> findByCycleId(UUID cycleId);

    boolean existsByCycleId(UUID cycleId);
}
----------
.\src\main\java\com\smartdorm\backend\repository\NotificationRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.Notification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface NotificationRepository extends JpaRepository<Notification, UUID> {
    List<Notification> findByUserIdOrderByCreatedAtDesc(UUID userId);
}
----------
.\src\main\java\com\smartdorm\backend\repository\SurveyDimensionRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.SurveyDimension;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public interface SurveyDimensionRepository extends JpaRepository<SurveyDimension, UUID> {
    List<SurveyDimension> findByCycleId(UUID cycleId);
}
----------
.\src\main\java\com\smartdorm\backend\repository\SwapRequestRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.SwapRequest;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface SwapRequestRepository extends JpaRepository<SwapRequest, UUID> {
}
----------
.\src\main\java\com\smartdorm\backend\repository\UserRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserRepository extends JpaRepository<User, UUID> {
    Optional<User> findByStudentId(String studentId);
}
----------
.\src\main\java\com\smartdorm\backend\repository\UserResponseRepository.java:
package com.smartdorm.backend.repository;

import com.smartdorm.backend.entity.UserResponse;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserResponseRepository extends JpaRepository<UserResponse, UUID> {
    Optional<UserResponse> findByUserIdAndDimensionId(UUID userId, UUID dimensionId);

    List<UserResponse> findByUserId(UUID userId);
    List<UserResponse> findByDimensionId(UUID userId);

}
----------
.\src\main\java\com\smartdorm\backend\security\JwtAccessDeniedHandler.java:
package com.smartdorm.backend.security;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAccessDeniedHandler implements AccessDeniedHandler {

    @Override
    public void handle(HttpServletRequest request,
                       HttpServletResponse response,
                       AccessDeniedException accessDeniedException) throws IOException {
        // 璁剧疆鍝嶅簲鐘舵€佺爜锛?03 Forbidden
        response.setStatus(HttpServletResponse.SC_FORBIDDEN);
        // 璁剧疆鍝嶅簲鍐呭绫诲瀷涓篔SON
        response.setContentType("application/json");
        // 鍐欏叆閿欒淇℃伅
        response.getWriter().write("{\"error\": \"Forbidden\", \"message\": \"" + accessDeniedException.getMessage() + "\"}");
    }
}

----------
.\src\main\java\com\smartdorm\backend\security\JwtAuthenticationEntryPoint.java:
package com.smartdorm.backend.security;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {

    @Override
    public void commence(HttpServletRequest request,
                         HttpServletResponse response,
                         AuthenticationException authException) throws IOException {
        // 璁剧疆鍝嶅簲鐘舵€佺爜锛?01 Unauthorized
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        // 璁剧疆鍝嶅簲鍐呭绫诲瀷涓篔SON锛堢鍚圧EST API瑙勮寖锛?
        response.setContentType("application/json");
        // 鍐欏叆閿欒淇℃伅锛堝彲閫夛紝鏍规嵁闇€姹傝皟鏁达級
        response.getWriter().write("{\"error\": \"Unauthorized\", \"message\": \"" + authException.getMessage() + "\"}");
    }
}

----------
.\src\main\java\com\smartdorm\backend\security\JwtRequestFilter.java:
package com.smartdorm.backend.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;
    private final UserDetailsService userDetailsService;

    public JwtRequestFilter(JwtUtil jwtUtil, UserDetailsService userDetailsService) {
        this.jwtUtil = jwtUtil;
        this.userDetailsService = userDetailsService;
    }

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request,
                                    @NonNull HttpServletResponse response,
                                    @NonNull FilterChain filterChain) throws ServletException, IOException {

        final String authHeader = request.getHeader("Authorization");
        String username = null;
        String jwt = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            jwt = authHeader.substring(7);
            username = jwtUtil.validateTokenAndGetUsername(jwt);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);

            UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                    userDetails, null, userDetails.getAuthorities());
            authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
            SecurityContextHolder.getContext().setAuthentication(authToken);
        }
        filterChain.doFilter(request, response);
    }
}
----------
.\src\main\java\com\smartdorm\backend\security\JwtUtil.java:
package com.smartdorm.backend.security;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.auth0.jwt.interfaces.DecodedJWT;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration-ms}")
    private long expirationMs;

    public String generateToken(UserDetails userDetails) {
        Algorithm algorithm = Algorithm.HMAC256(secret);
        return JWT.create()
                .withSubject(userDetails.getUsername())
                .withIssuedAt(new Date(System.currentTimeMillis()))
                .withExpiresAt(new Date(System.currentTimeMillis() + expirationMs))
                .sign(algorithm);
    }

    public String validateTokenAndGetUsername(String token) {
        try {
            Algorithm algorithm = Algorithm.HMAC256(secret);
            JWTVerifier verifier = JWT.require(algorithm).build();
            DecodedJWT decodedJWT = verifier.verify(token);
            return decodedJWT.getSubject();
        } catch (JWTVerificationException exception) {
            // Invalid signature/claims
            return null;
        }
    }
}
----------
.\src\main\java\com\smartdorm\backend\security\UserDetailsServiceImpl.java:
package com.smartdorm.backend.security;

import com.smartdorm.backend.repository.UserRepository;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    private final UserRepository userRepository;

    public UserDetailsServiceImpl(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String studentId) throws UsernameNotFoundException {
        com.smartdorm.backend.entity.User user = userRepository.findByStudentId(studentId)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with studentId: " + studentId));

        return new User(
                user.getStudentId(),
                user.getPassword(),
                Collections.singletonList(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );
    }
}
----------
.\src\main\java\com\smartdorm\backend\service\AdminAssignmentService.java:
package com.smartdorm.backend.service;

import com.smartdorm.backend.dto.AdminDtos.AdminAssignmentValidationDto;
import com.smartdorm.backend.dto.AdminDtos.AssignmentResultAdminDto;
import com.smartdorm.backend.dto.AdminDtos.ValidationDetailDto;
import com.smartdorm.backend.dto.UserDto;
import com.smartdorm.backend.entity.MatchingCycle;
import com.smartdorm.backend.entity.MatchingResult;
import com.smartdorm.backend.exception.DataConflictException;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.repository.MatchingCycleRepository;
import com.smartdorm.backend.repository.MatchingResultRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class AdminAssignmentService {

    private final MatchingCycleRepository cycleRepository;
    private final MatchingResultRepository resultRepository;

    public AdminAssignmentService(MatchingCycleRepository cycleRepository, MatchingResultRepository resultRepository) {
        this.cycleRepository = cycleRepository;
        this.resultRepository = resultRepository;
    }

    /**
     * Placeholder for the real assignment logic.
     * Currently, it just updates the cycle status.
     */
    public void triggerAssignment(UUID cycleId) {
        MatchingCycle cycle = cycleRepository.findById(cycleId)
                .orElseThrow(() -> new ResourceNotFoundException("Cycle not found with id: " + cycleId));

        if (!"OPEN".equals(cycle.getStatus())) {
            throw new DataConflictException("Cannot trigger assignment for a cycle that is not in 'OPEN' status.");
        }

        // In a real scenario, you'd trigger an async job here.
        // For now, we simulate the completion of the process.
        cycle.setStatus("PROCESSING"); // First set to processing
        // ... algorithm runs ...
        cycle.setStatus("COMPLETED"); // Then set to completed
        cycleRepository.save(cycle);

        // Here you would generate notifications, results etc.
    }

    /**
     * [IMPLEMENTED] Retrieves the complete list of assignment results for a specific cycle.
     * Corresponds to use case ADM-04.
     * @param cycleId The ID of the matching cycle.
     * @return A list of detailed assignment results for the admin.
     */
    public List<AssignmentResultAdminDto> getAssignmentResults(UUID cycleId) {
        if (!cycleRepository.existsById(cycleId)) {
            throw new ResourceNotFoundException("Cycle not found with id: " + cycleId);
        }

        List<MatchingResult> results = resultRepository.findByCycleId(cycleId);

        return results.stream()
                .map(this::mapToAssignmentResultAdminDto)
                .collect(Collectors.toList());
    }


    /**
     * [ENHANCED] Validates the results of an assignment against predefined quality metrics.
     * Corresponds to use case ADM-08.
     * The logic here is a placeholder, demonstrating the required DTO structure.
     *
     * @param cycleId The ID of the matching cycle.
     * @return A detailed validation report.
     */
    public AdminAssignmentValidationDto validateResults(UUID cycleId) {
        if (!resultRepository.existsByCycleId(cycleId)) {
            throw new ResourceNotFoundException("No assignment results found for cycle with id: " + cycleId);
        }

        // TODO: Implement real validation logic.
        // For now, return a mock successful validation report that matches the DTO structure.
        List<ValidationDetailDto> mockDetails = List.of(
                new ValidationDetailDto(
                        "Zijing Building 1-301", // Dorm name
                        "Neuroticism Mean",       // Metric name
                        0.55,                     // Metric value
                        true                      // Is compliant
                )
        );

        return new AdminAssignmentValidationDto(
                true,
                "Results meet all validation criteria.",
                mockDetails
        );
    }

    /**
     * Helper method to map a MatchingResult entity to its admin-facing DTO.
     */
    private AssignmentResultAdminDto mapToAssignmentResultAdminDto(MatchingResult result) {
        var user = result.getUser();
        var bed = result.getBed();
        var room = bed.getRoom();
        var building = room.getBuilding();

        UserDto userDto = new UserDto(user.getId(), user.getStudentId(), user.getName(), user.getRole(), user.getGender(), user.getCollege());

        return new AssignmentResultAdminDto(
                userDto,
                building.getName(),
                room.getRoomNumber(),
                bed.getBedNumber()
        );
    }
}
----------
.\src\main\java\com\smartdorm\backend\service\AuthService.java:
package com.smartdorm.backend.service;

import com.smartdorm.backend.dto.*;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.UserRepository;
import com.smartdorm.backend.security.JwtUtil;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class AuthService {

    private final AuthenticationManager authenticationManager;
    private final UserDetailsService userDetailsService;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

    public AuthService(AuthenticationManager authenticationManager, UserDetailsService userDetailsService, UserRepository userRepository, JwtUtil jwtUtil) {
        this.authenticationManager = authenticationManager;
        this.userDetailsService = userDetailsService;
        this.userRepository = userRepository;
        this.jwtUtil = jwtUtil;
    }

    public LoginResponse login(LoginRequest loginRequest) {
        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginRequest.studentId(), loginRequest.password())
            );
        } catch (BadCredentialsException e) {
            throw new BadCredentialsException("Invalid student ID or password");
        }

        final UserDetails userDetails = userDetailsService.loadUserByUsername(loginRequest.studentId());
        final String token = jwtUtil.generateToken(userDetails);

        // Fetch user entity to create UserDto
        User user = userRepository.findByStudentId(loginRequest.studentId()).orElseThrow(() -> new UsernameNotFoundException("User not found after successful authentication for: " + loginRequest.studentId()));
        UserDto userDto = new UserDto(user.getId(), user.getStudentId(), user.getName(), user.getRole(), user.getGender(), user.getCollege());

        return new LoginResponse(token, userDto);
    }
}
----------
.\src\main\java\com\smartdorm\backend\service\CycleManagementService.java:
package com.smartdorm.backend.service;

import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.entity.DimensionOption;
import com.smartdorm.backend.entity.MatchingCycle;
import com.smartdorm.backend.entity.SurveyDimension;
import com.smartdorm.backend.entity.UserResponse;
import com.smartdorm.backend.exception.DataConflictException;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.mapper.CycleMapper;
import com.smartdorm.backend.repository.MatchingCycleRepository;
import com.smartdorm.backend.repository.SurveyDimensionRepository;
import com.smartdorm.backend.repository.UserResponseRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class CycleManagementService {

    private final MatchingCycleRepository cycleRepository;
    private final SurveyDimensionRepository dimensionRepository;
    private final CycleMapper cycleMapper;
    private final UserResponseRepository userResponseRepository;

    public CycleManagementService(MatchingCycleRepository cycleRepository,
                                  SurveyDimensionRepository dimensionRepository,
                                  UserResponseRepository userResponseRepository,
                                  CycleMapper cycleMapper) {
        this.cycleRepository = cycleRepository;
        this.dimensionRepository = dimensionRepository;
        this.userResponseRepository = userResponseRepository;
        this.cycleMapper = cycleMapper;
    }

    // --- Cycle Methods ---

    public MatchingCycleDto createCycle(MatchingCycleCreateDto dto) {
        MatchingCycle cycle = new MatchingCycle();
        cycle.setName(dto.name());
        cycle.setStartDate(dto.startDate());
        cycle.setEndDate(dto.endDate());
        return cycleMapper.toDto(cycleRepository.save(cycle));
    }

    public List<MatchingCycleDto> getAllCycles() {
        return cycleRepository.findAll().stream().map(cycleMapper::toDto).collect(Collectors.toList());
    }

    public MatchingCycleDto getCycleById(UUID cycleId) {
        return cycleRepository.findById(cycleId)
                .map(cycleMapper::toDto)
                .orElseThrow(() -> new ResourceNotFoundException("Cycle not found with id: " + cycleId));
    }

    public MatchingCycleDto updateCycle(UUID cycleId, MatchingCycleUpdateDto dto) {
        MatchingCycle cycle = cycleRepository.findById(cycleId)
                .orElseThrow(() -> new ResourceNotFoundException("Cycle not found with id: " + cycleId));
        if(dto.name() != null) cycle.setName(dto.name());
        if(dto.startDate() != null) cycle.setStartDate(dto.startDate());
        if(dto.endDate() != null) cycle.setEndDate(dto.endDate());
        if(dto.status() != null) cycle.setStatus(dto.status());
        return cycleMapper.toDto(cycleRepository.save(cycle));
    }

    public void deleteCycle(UUID cycleId) {
        MatchingCycle cycle = cycleRepository.findById(cycleId)
                .orElseThrow(() -> new ResourceNotFoundException("Cycle not found with id: " + cycleId));
        if (!"DRAFT".equals(cycle.getStatus())) {
            throw new DataConflictException("Cannot delete cycle in status '" + cycle.getStatus() + "'. Only 'DRAFT' cycles can be deleted.");
        }
        cycleRepository.delete(cycle);
    }

    // --- Dimension Methods ---

    public SurveyDimensionDto createDimensionForCycle(UUID cycleId, SurveyDimensionCreateDto dto) {
        MatchingCycle cycle = cycleRepository.findById(cycleId)
                .orElseThrow(() -> new ResourceNotFoundException("Cycle not found with id: " + cycleId));

        SurveyDimension dimension = new SurveyDimension();
        dimension.setCycle(cycle);
        dimension.setDimensionKey(dto.getDimensionKey());
        dimension.setPrompt(dto.getPrompt());
        dimension.setDimensionType(dto.getDimensionType());
        dimension.setResponseType(dto.getResponseType());
        dimension.setWeight(dto.getWeight());
        dimension.setParentDimensionKey(dto.getParentDimensionKey());
        // [鍏抽敭淇] 浣跨敤 isReverseScored() getter
        dimension.setReverseScored(dto.isReverseScored());

        // 鐜板湪杩欓噷鐨刣to.getOptions()鏄粡杩嘋ontroller娓呯悊鍚庣殑骞插噣鍒楄〃锛屼笉浼氭湁null鍊?
        if (dto.getOptions() != null) {
            List<DimensionOption> options = dto.getOptions().stream().map(optDto -> {
                DimensionOption option = new DimensionOption();
                option.setOptionText(optDto.optionText());
                option.setOptionValue(optDto.optionValue()); // 杩欓噷涓嶄細鍐嶆湁NullPointerException
                option.setDimension(dimension);
                return option;
            }).collect(Collectors.toList());
            dimension.getOptions().addAll(options);
        }

        return cycleMapper.toDto(dimensionRepository.save(dimension));
    }


    public List<SurveyDimensionDto> getDimensionsForCycle(UUID cycleId) {
        if (!cycleRepository.existsById(cycleId)) {
            throw new ResourceNotFoundException("Cycle not found with id: " + cycleId);
        }
        return dimensionRepository.findByCycleId(cycleId).stream()
                .map(cycleMapper::toDto)
                .collect(Collectors.toList());
    }

    public SurveyDimensionDto updateDimension(UUID dimensionId, SurveyDimensionUpdateDto dto) {
        SurveyDimension dimension = dimensionRepository.findById(dimensionId)
                .orElseThrow(() -> new ResourceNotFoundException("Dimension not found with id: " + dimensionId));

        dimension.setPrompt(dto.prompt());
        dimension.setWeight(dto.weight());
        // [鍏抽敭淇敼] record 鐨勮闂櫒灏辨槸瀛楁鍚?
        dimension.setReverseScored(dto.reverseScored());

        return cycleMapper.toDto(dimensionRepository.save(dimension));
    }

    public void deleteDimension(UUID dimensionId) {
        // 1. 楠岃瘉缁村害鏄惁瀛樺湪锛屽鏋滀笉瀛樺湪锛屽悗缁搷浣滄棤鎰忎箟
        if (!dimensionRepository.existsById(dimensionId)) {
            throw new ResourceNotFoundException("Dimension not found with id: " + dimensionId);
        }

        // 2. 鏌ユ壘骞跺垹闄ゆ墍鏈夌浉鍏崇殑 UserResponse 璁板綍
        List<UserResponse> responsesToDelete = userResponseRepository.findByDimensionId(dimensionId);
        if (!responsesToDelete.isEmpty()) {
            userResponseRepository.deleteAllInBatch(responsesToDelete);
        }

        // 3. 鐜板湪鍙互瀹夊叏鍦板垹闄?SurveyDimension
        // SurveyDimension 瀹炰綋涓?DimensionOption 鏄竴瀵瑰鍏崇郴锛屽苟涓旇缃簡 cascade=ALL, orphanRemoval=true
        // 杩欐剰鍛崇潃褰撴垜浠垹闄?SurveyDimension 鏃讹紝JPA 浼氳嚜鍔ㄥ垹闄ゅ叾鍏宠仈鐨勬墍鏈?DimensionOption銆?
        // 鎵€浠ユ垜浠笉闇€瑕佹墜鍔ㄥ垹闄?options銆?
        dimensionRepository.deleteById(dimensionId);
    }
}
----------
.\src\main\java\com\smartdorm\backend\service\DormResourceService.java:
package com.smartdorm.backend.service;

import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.entity.Bed;
import com.smartdorm.backend.entity.DormBuilding;
import com.smartdorm.backend.entity.DormRoom;
import com.smartdorm.backend.exception.DataConflictException;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.mapper.DormMapper;
import com.smartdorm.backend.repository.BedRepository;
import com.smartdorm.backend.repository.DormBuildingRepository;
import com.smartdorm.backend.repository.DormRoomRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Service
@Transactional
public class DormResourceService {

    private final DormBuildingRepository buildingRepository;
    private final DormRoomRepository roomRepository;
    private final BedRepository bedRepository;
    private final DormMapper dormMapper;

    public DormResourceService(DormBuildingRepository buildingRepository, DormRoomRepository roomRepository, BedRepository bedRepository, DormMapper dormMapper) {
        this.buildingRepository = buildingRepository;
        this.roomRepository = roomRepository;
        this.bedRepository = bedRepository;
        this.dormMapper = dormMapper;
    }

    // --- Building Methods ---

    public List<DormBuildingDto> getAllBuildings() {
        return buildingRepository.findAll().stream().map(dormMapper::toDto).collect(Collectors.toList());
    }

    public DormBuildingDto createBuilding(BuildingCreateUpdateDto dto) {
        DormBuilding building = new DormBuilding();
        building.setName(dto.name());
        return dormMapper.toDto(buildingRepository.save(building));
    }

    public DormBuildingDto updateBuilding(UUID id, BuildingCreateUpdateDto dto) {
        DormBuilding building = buildingRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Building not found with id: " + id));
        building.setName(dto.name());
        return dormMapper.toDto(buildingRepository.save(building));
    }

    public void deleteBuilding(UUID id) {
        if (roomRepository.existsByBuildingId(id)) {
            throw new DataConflictException("Cannot delete building with id " + id + " because it contains rooms.");
        }
        buildingRepository.deleteById(id);
    }

    // --- Room Methods ---

    public DormRoomDto createRoom(RoomCreateUpdateDto dto) {
        DormBuilding building = buildingRepository.findById(dto.buildingId())
                .orElseThrow(() -> new ResourceNotFoundException("Building not found with id: " + dto.buildingId()));
        DormRoom room = new DormRoom();
        room.setBuilding(building);
        room.setRoomNumber(dto.roomNumber());
        room.setCapacity(dto.capacity());
        room.setGenderType(dto.genderType());
        return dormMapper.toDto(roomRepository.save(room));
    }

    public DormRoomDto updateRoom(UUID roomId, RoomCreateUpdateDto dto) {
        DormRoom room = roomRepository.findById(roomId)
                .orElseThrow(() -> new ResourceNotFoundException("Room not found with id: " + roomId));
        DormBuilding building = buildingRepository.findById(dto.buildingId())
                .orElseThrow(() -> new ResourceNotFoundException("Building not found with id: " + dto.buildingId()));

        room.setBuilding(building);
        room.setRoomNumber(dto.roomNumber());
        room.setCapacity(dto.capacity());
        room.setGenderType(dto.genderType());

        return dormMapper.toDto(roomRepository.save(room));
    }

    public void deleteRoom(UUID roomId) {
        if (bedRepository.existsByRoomId(roomId)) {
            throw new DataConflictException("Cannot delete room with id " + roomId + " because it contains beds.");
        }
        roomRepository.deleteById(roomId);
    }

    // --- Bed Methods ---

    public BedsCreatedResponseDto createBedsForRoom(UUID roomId, BedCreateRequestDto dto) {
        DormRoom room = roomRepository.findById(roomId)
                .orElseThrow(() -> new ResourceNotFoundException("Room not found with id: " + roomId));

        List<Bed> newBeds = new ArrayList<>();
        for (int i = 1; i <= dto.bedCount(); i++) {
            Bed bed = new Bed();
            bed.setRoom(room);
            bed.setBedNumber(i);
            newBeds.add(bed);
        }

        List<Bed> savedBeds = bedRepository.saveAll(newBeds);
        List<BedDto> bedDtos = savedBeds.stream().map(dormMapper::toDto).collect(Collectors.toList());

        return new BedsCreatedResponseDto(savedBeds.size(), bedDtos);
    }

    public void deleteBed(UUID bedId) {
        // Here you might add a check if the bed is assigned in matching_results table in later phases.
        // For now, simple deletion is fine.
        if (!bedRepository.existsById(bedId)) {
            throw new ResourceNotFoundException("Bed not found with id: " + bedId);
        }
        bedRepository.deleteById(bedId);
    }
    public record RoomDetailDto(UUID id, String roomNumber, int capacity, String genderType, UUID buildingId, String buildingName) {}

    public List<DormRoomDto> getAllRooms() {
        return roomRepository.findAll().stream().map(dormMapper::toDto).collect(Collectors.toList());
    }

    // New method to get enhanced room details for the view
    public List<RoomDetailDto> getRoomDetails() {
        List<DormRoom> rooms = roomRepository.findAll();
        // To avoid N+1 queries, fetch all buildings and put them in a map
        Map<UUID, String> buildingNames = buildingRepository.findAll().stream()
                .collect(Collectors.toMap(DormBuilding::getId, DormBuilding::getName));

        return rooms.stream()
                .map(room -> new RoomDetailDto(
                        room.getId(),
                        room.getRoomNumber(),
                        room.getCapacity(),
                        room.getGenderType(),
                        room.getBuilding().getId(),
                        buildingNames.getOrDefault(room.getBuilding().getId(), "N/A")
                ))
                .collect(Collectors.toList());
    }

    public DormRoomDto getRoomById(UUID roomId) {
        return roomRepository.findById(roomId)
                .map(dormMapper::toDto)
                .orElseThrow(() -> new ResourceNotFoundException("Room not found with id: " + roomId));
    }

    public List<BedDto> getBedsForRoom(UUID roomId) {
        return bedRepository.findByRoomIdOrderByBedNumberAsc(roomId).stream()
                .map(dormMapper::toDto)
                .collect(Collectors.toList());
    }

    public RoomDetailDto getRoomDetailById(UUID roomId) {
        DormRoom room = roomRepository.findById(roomId)
                .orElseThrow(() -> new ResourceNotFoundException("Room not found with id: " + roomId));

        // This is efficient as it only fetches what's needed
        return new RoomDetailDto(
                room.getId(),
                room.getRoomNumber(),
                room.getCapacity(),
                room.getGenderType(),
                room.getBuilding().getId(),
                room.getBuilding().getName() // Eagerly fetched or lazy loaded here
        );
    }

}
----------
.\src\main\java\com\smartdorm\backend\service\StudentService.java:
package com.smartdorm.backend.service;

import com.smartdorm.backend.dto.StudentDtos.*;
import com.smartdorm.backend.entity.*;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.mapper.CycleMapper;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class StudentService {

    private final MatchingCycleRepository cycleRepository;
    private final SurveyDimensionRepository dimensionRepository;
    private final UserResponseRepository responseRepository;
    private final MatchingResultRepository resultRepository;
    private final CycleMapper cycleMapper;

    public StudentService(MatchingCycleRepository cycleRepository, SurveyDimensionRepository dimensionRepository, UserResponseRepository responseRepository, MatchingResultRepository resultRepository, CycleMapper cycleMapper) {
        this.cycleRepository = cycleRepository;
        this.dimensionRepository = dimensionRepository;
        this.responseRepository = responseRepository;
        this.resultRepository = resultRepository;
        this.cycleMapper = cycleMapper;
    }

    public SurveyForStudentDto getSurveyForStudent() {
        MatchingCycle openCycle = cycleRepository.findAll().stream()
                .filter(c -> "OPEN".equals(c.getStatus()))
                .findFirst()
                .orElseThrow(() -> new ResourceNotFoundException("No open survey is available at the moment."));

        List<SurveyDimension> dimensions = dimensionRepository.findByCycleId(openCycle.getId());
        return new SurveyForStudentDto(
                openCycle.getId(),
                dimensions.stream().map(cycleMapper::toDto).collect(Collectors.toList())
        );
    }

    public void submitResponses(UserResponseSubmitDto dto, User currentUser) {
        List<UserResponse> responsesToSave = new ArrayList<>();
        for (ResponseItem item : dto.responses()) {
            UserResponse response = responseRepository.findByUserIdAndDimensionId(currentUser.getId(), item.dimensionId())
                    .orElse(new UserResponse());

            // Check if dimension exists (optional but good practice)
            SurveyDimension dimension = dimensionRepository.findById(item.dimensionId())
                    .orElseThrow(() -> new ResourceNotFoundException("Dimension not found with id: " + item.dimensionId()));

            response.setUser(currentUser);
            response.setDimension(dimension);
            response.setRawValue(item.rawValue());
            responsesToSave.add(response);
        }
        responseRepository.saveAll(responsesToSave);
    }

    public AssignmentResultStudentDto getStudentResult(User currentUser) {
        MatchingResult result = resultRepository.findByUserId(currentUser.getId())
                .orElseThrow(() -> new ResourceNotFoundException("Your assignment result is not available yet."));

        Bed bed = result.getBed();
        DormRoom room = bed.getRoom();
        DormBuilding building = room.getBuilding();

        AssignmentDetails assignmentDetails = new AssignmentDetails(building.getName(), room.getRoomNumber(), bed.getBedNumber());

        // Find roommates in the same room, excluding the current user
        List<RoommateDto> roommates = resultRepository.findByBed_Room_Id(room.getId()).stream()
                .map(MatchingResult::getUser)
                .filter(user -> !user.getId().equals(currentUser.getId()))
                .map(user -> new RoommateDto(user.getName(), user.getStudentId()))
                .collect(Collectors.toList());

        return new AssignmentResultStudentDto(assignmentDetails, roommates);
    }
}
----------
.\src\main\java\com\smartdorm\backend\service\SupportService.java:
package com.smartdorm.backend.service;

import com.smartdorm.backend.dto.SupportDtos.*;
import com.smartdorm.backend.entity.*;
import com.smartdorm.backend.exception.DataConflictException;
import com.smartdorm.backend.exception.ResourceNotFoundException;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class SupportService {

    private final FeedbackRepository feedbackRepository;
    private final SwapRequestRepository swapRequestRepository;
    private final ContentArticleRepository articleRepository;
    private final NotificationRepository notificationRepository;
    private final MatchingCycleRepository cycleRepository;

    public SupportService(FeedbackRepository feedbackRepository, SwapRequestRepository swapRequestRepository, ContentArticleRepository articleRepository, NotificationRepository notificationRepository, MatchingCycleRepository cycleRepository) {
        this.feedbackRepository = feedbackRepository;
        this.swapRequestRepository = swapRequestRepository;
        this.articleRepository = articleRepository;
        this.notificationRepository = notificationRepository;
        this.cycleRepository = cycleRepository;
    }

    // --- Helper to find the latest completed or processing cycle ---
    private MatchingCycle findLatestActiveCycle() {
        return cycleRepository.findAll().stream()
                .filter(c -> "COMPLETED".equals(c.getStatus()) || "PROCESSING".equals(c.getStatus()))
                .max((c1, c2) -> c1.getCreatedAt().compareTo(c2.getCreatedAt()))
                .orElseThrow(() -> new ResourceNotFoundException("No active or completed cycle found."));
    }

    // --- Feedback Logic ---
    public void createFeedback(FeedbackCreateDto dto, User currentUser) {
        MatchingCycle cycle = findLatestActiveCycle();
        Feedback feedback = new Feedback();
        feedback.setCycle(cycle);
        feedback.setUser(currentUser);
        feedback.setAnonymous(dto.isAnonymous());
        feedback.setRating(dto.rating());
        feedback.setComment(dto.comment());
        feedbackRepository.save(feedback);
    }

    // --- Swap Request Logic ---
    public void createSwapRequest(SwapRequestCreateDto dto, User currentUser) {
        MatchingCycle cycle = findLatestActiveCycle();
        SwapRequest request = new SwapRequest();
        request.setUser(currentUser);
        request.setCycle(cycle);
        request.setReason(dto.reason());
        swapRequestRepository.save(request);
    }

    public List<SwapRequestDto> getAllSwapRequests() {
        return swapRequestRepository.findAll().stream()
                .map(this::mapToSwapRequestDto)
                .collect(Collectors.toList());
    }

    public SwapRequestDto processSwapRequest(UUID requestId, SwapRequestUpdateDto dto) {
        SwapRequest request = swapRequestRepository.findById(requestId)
                .orElseThrow(() -> new ResourceNotFoundException("Swap request not found with id: " + requestId));
        request.setStatus(dto.status());
        request.setAdminComment(dto.adminComment());
        return mapToSwapRequestDto(swapRequestRepository.save(request));
    }

    // --- Article Logic ---
    public ArticleDto createArticle(ArticleCreateDto dto, User adminUser) {
        ContentArticle article = new ContentArticle();
        article.setTitle(dto.title());
        article.setContent(dto.content());
        article.setCategory(dto.category());
        article.setAuthor(adminUser);
        return mapToArticleDto(articleRepository.save(article));
    }

    public ArticleDto updateArticle(UUID articleId, ArticleUpdateDto dto) {
        ContentArticle article = articleRepository.findById(articleId)
                .orElseThrow(() -> new ResourceNotFoundException("Article not found with id: " + articleId));
        if (StringUtils.hasText(dto.title())) article.setTitle(dto.title());
        if (StringUtils.hasText(dto.content())) article.setContent(dto.content());
        if (StringUtils.hasText(dto.category())) article.setCategory(dto.category());
        return mapToArticleDto(articleRepository.save(article));
    }

    public void deleteArticle(UUID articleId) {
        if (!articleRepository.existsById(articleId)) {
            throw new ResourceNotFoundException("Article not found with id: " + articleId);
        }
        articleRepository.deleteById(articleId);
    }

    public List<ArticleDto> getArticles(String category) {
        List<ContentArticle> articles;
        if (StringUtils.hasText(category)) {
            articles = articleRepository.findByCategory(category);
        } else {
            articles = articleRepository.findAll();
        }
        return articles.stream().map(this::mapToArticleDto).collect(Collectors.toList());
    }



    public ArticleDto getArticleById(UUID articleId) {
        return articleRepository.findById(articleId)
                .map(this::mapToArticleDto)
                .orElseThrow(() -> new ResourceNotFoundException("Article not found with id: " + articleId));
    }

    // --- Notification Logic ---
    public List<NotificationDto> getNotificationsForUser(User currentUser) {
        return notificationRepository.findByUserIdOrderByCreatedAtDesc(currentUser.getId()).stream()
                .map(this::mapToNotificationDto)
                .collect(Collectors.toList());
    }

    public void markNotificationAsRead(UUID notificationId, User currentUser) {
        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new ResourceNotFoundException("Notification not found with id: " + notificationId));
        if (!notification.getUser().getId().equals(currentUser.getId())) {
            throw new DataConflictException("User does not have permission to read this notification.");
        }
        notification.setRead(true);
        notificationRepository.save(notification);
    }


    // --- Mappers ---
    private SwapRequestDto mapToSwapRequestDto(SwapRequest req) {
        return new SwapRequestDto(req.getId(), req.getUser().getId(), req.getUser().getName(), req.getCycle().getId(), req.getReason(), req.getStatus(), req.getAdminComment(), req.getCreatedAt());
    }

    private ArticleDto mapToArticleDto(ContentArticle article) {
        User author = article.getAuthor();
        return new ArticleDto(article.getId(), article.getTitle(), article.getContent(), article.getCategory(),
                author != null ? author.getId() : null,
                author != null ? author.getName() : "System",
                article.getCreatedAt());
    }

    private NotificationDto mapToNotificationDto(Notification notif) {
        return new NotificationDto(notif.getId(), notif.getMessage(), notif.getLinkUrl(), notif.isRead(), notif.getCreatedAt());
    }
}
----------
.\src\main\resources\application.yml:
server:
  port: 8080 # 搴旂敤鐩戝惉鐨勭鍙?

spring:
  # --- Datasource Configuration ---
  datasource:
    url: jdbc:postgresql://localhost:5432/smart_dorm # 杩炴帴鏈湴Docker鏁版嵁搴撶殑URL
    username: user       # 鏁版嵁搴撶敤鎴峰悕
    password: password   # 鏁版嵁搴撳瘑鐮?
    driver-class-name: org.postgresql.Driver

  # --- JPA / Hibernate Configuration ---
  jpa:
    hibernate:
      ddl-auto: update # 寮€鍙戞椂浣跨敤update锛屽簲鐢ㄥ惎鍔ㄦ椂浼氳嚜鍔ㄦ洿鏂拌〃缁撴瀯
    show-sql: true     # 鍦ㄦ帶鍒跺彴鎵撳嵃鎵ц鐨凷QL璇彞锛屾柟渚胯皟璇?
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect # 鎸囧畾PostgreSQL鏂硅█
        format_sql: true # 鏍煎紡鍖朣QL杈撳嚭

# --- Custom Application Properties ---
jwt:
  secret: "a-very-strong-and-long-secret-key-for-smart-dorm-project-2024" # 鐢ㄤ簬绛惧彂JWT鐨勫瘑閽ワ紝鐢熶骇鐜搴斾娇鐢ㄧ幆澧冨彉閲?
  expiration-ms: 86400000 # Token鏈夋晥鏈? 24灏忔椂 (24 * 60 * 60 * 1000)

logging:
  level:
    org.springframework.security: DEBUG
----------
.\src\main\resources\static\css\pico.min.css:
@charset "UTF-8";/*!
 * Pico CSS 鉁?v2.1.1 (https://picocss.com)
 * Copyright 2019-2025 - Licensed under MIT
 */:host,:root{--pico-font-family-emoji:"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--pico-font-family-sans-serif:system-ui,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,Helvetica,Arial,"Helvetica Neue",sans-serif,var(--pico-font-family-emoji);--pico-font-family-monospace:ui-monospace,SFMono-Regular,"SF Mono",Menlo,Consolas,"Liberation Mono",monospace,var(--pico-font-family-emoji);--pico-font-family:var(--pico-font-family-sans-serif);--pico-line-height:1.5;--pico-font-weight:400;--pico-font-size:100%;--pico-text-underline-offset:0.1rem;--pico-border-radius:0.25rem;--pico-border-width:0.0625rem;--pico-outline-width:0.125rem;--pico-transition:0.2s ease-in-out;--pico-spacing:1rem;--pico-typography-spacing-vertical:1rem;--pico-block-spacing-vertical:var(--pico-spacing);--pico-block-spacing-horizontal:var(--pico-spacing);--pico-grid-column-gap:var(--pico-spacing);--pico-grid-row-gap:var(--pico-spacing);--pico-form-element-spacing-vertical:0.75rem;--pico-form-element-spacing-horizontal:1rem;--pico-group-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-group-box-shadow-focus-with-button:0 0 0 var(--pico-outline-width) var(--pico-primary-focus);--pico-group-box-shadow-focus-with-input:0 0 0 0.0625rem var(--pico-form-element-border-color);--pico-modal-overlay-backdrop-filter:blur(0.375rem);--pico-nav-element-spacing-vertical:1rem;--pico-nav-element-spacing-horizontal:0.5rem;--pico-nav-link-spacing-vertical:0.5rem;--pico-nav-link-spacing-horizontal:0.5rem;--pico-nav-breadcrumb-divider:">";--pico-icon-checkbox:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(255, 255, 255)' stroke-width='4' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'%3E%3C/polyline%3E%3C/svg%3E");--pico-icon-minus:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(255, 255, 255)' stroke-width='4' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='5' y1='12' x2='19' y2='12'%3E%3C/line%3E%3C/svg%3E");--pico-icon-chevron:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");--pico-icon-date:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3E%3C/rect%3E%3Cline x1='16' y1='2' x2='16' y2='6'%3E%3C/line%3E%3Cline x1='8' y1='2' x2='8' y2='6'%3E%3C/line%3E%3Cline x1='3' y1='10' x2='21' y2='10'%3E%3C/line%3E%3C/svg%3E");--pico-icon-time:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cpolyline points='12 6 12 12 16 14'%3E%3C/polyline%3E%3C/svg%3E");--pico-icon-search:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='11' cy='11' r='8'%3E%3C/circle%3E%3Cline x1='21' y1='21' x2='16.65' y2='16.65'%3E%3C/line%3E%3C/svg%3E");--pico-icon-close:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(136, 145, 164)' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='18' y1='6' x2='6' y2='18'%3E%3C/line%3E%3Cline x1='6' y1='6' x2='18' y2='18'%3E%3C/line%3E%3C/svg%3E");--pico-icon-loading:url("data:image/svg+xml,%3Csvg fill='none' height='24' width='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' %3E%3Cstyle%3E g %7B animation: rotate 2s linear infinite; transform-origin: center center; %7D circle %7B stroke-dasharray: 75,100; stroke-dashoffset: -5; animation: dash 1.5s ease-in-out infinite; stroke-linecap: round; %7D @keyframes rotate %7B 0%25 %7B transform: rotate(0deg); %7D 100%25 %7B transform: rotate(360deg); %7D %7D @keyframes dash %7B 0%25 %7B stroke-dasharray: 1,100; stroke-dashoffset: 0; %7D 50%25 %7B stroke-dasharray: 44.5,100; stroke-dashoffset: -17.5; %7D 100%25 %7B stroke-dasharray: 44.5,100; stroke-dashoffset: -62; %7D %7D %3C/style%3E%3Cg%3E%3Ccircle cx='12' cy='12' r='10' fill='none' stroke='rgb(136, 145, 164)' stroke-width='4' /%3E%3C/g%3E%3C/svg%3E")}@media (min-width:576px){:host,:root{--pico-font-size:106.25%}}@media (min-width:768px){:host,:root{--pico-font-size:112.5%}}@media (min-width:1024px){:host,:root{--pico-font-size:118.75%}}@media (min-width:1280px){:host,:root{--pico-font-size:125%}}@media (min-width:1536px){:host,:root{--pico-font-size:131.25%}}a{--pico-text-decoration:underline}a.contrast,a.secondary{--pico-text-decoration:underline}small{--pico-font-size:0.875em}h1,h2,h3,h4,h5,h6{--pico-font-weight:700}h1{--pico-font-size:2rem;--pico-line-height:1.125;--pico-typography-spacing-top:3rem}h2{--pico-font-size:1.75rem;--pico-line-height:1.15;--pico-typography-spacing-top:2.625rem}h3{--pico-font-size:1.5rem;--pico-line-height:1.175;--pico-typography-spacing-top:2.25rem}h4{--pico-font-size:1.25rem;--pico-line-height:1.2;--pico-typography-spacing-top:1.874rem}h5{--pico-font-size:1.125rem;--pico-line-height:1.225;--pico-typography-spacing-top:1.6875rem}h6{--pico-font-size:1rem;--pico-line-height:1.25;--pico-typography-spacing-top:1.5rem}tfoot td,tfoot th,thead td,thead th{--pico-font-weight:600;--pico-border-width:0.1875rem}code,kbd,pre,samp{--pico-font-family:var(--pico-font-family-monospace)}kbd{--pico-font-weight:bolder}:where(select,textarea),input:not([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]){--pico-outline-width:0.0625rem}[type=search]{--pico-border-radius:5rem}[type=checkbox],[type=radio]{--pico-border-width:0.125rem}[type=checkbox][role=switch]{--pico-border-width:0.1875rem}details.dropdown summary:not([role=button]){--pico-outline-width:0.0625rem}nav details.dropdown summary:focus-visible{--pico-outline-width:0.125rem}[role=search]{--pico-border-radius:5rem}[role=group]:has(button.secondary:focus,[type=submit].secondary:focus,[type=button].secondary:focus,[role=button].secondary:focus),[role=search]:has(button.secondary:focus,[type=submit].secondary:focus,[type=button].secondary:focus,[role=button].secondary:focus){--pico-group-box-shadow-focus-with-button:0 0 0 var(--pico-outline-width) var(--pico-secondary-focus)}[role=group]:has(button.contrast:focus,[type=submit].contrast:focus,[type=button].contrast:focus,[role=button].contrast:focus),[role=search]:has(button.contrast:focus,[type=submit].contrast:focus,[type=button].contrast:focus,[role=button].contrast:focus){--pico-group-box-shadow-focus-with-button:0 0 0 var(--pico-outline-width) var(--pico-contrast-focus)}[role=group] [role=button],[role=group] [type=button],[role=group] [type=submit],[role=group] button,[role=search] [role=button],[role=search] [type=button],[role=search] [type=submit],[role=search] button{--pico-form-element-spacing-horizontal:2rem}details summary[role=button]:not(.outline)::after{filter:brightness(0) invert(1)}[aria-busy=true]:not(input,select,textarea):is(button,[type=submit],[type=button],[type=reset],[role=button]):not(.outline)::before{filter:brightness(0) invert(1)}:host(:not([data-theme=dark])),:root:not([data-theme=dark]),[data-theme=light]{color-scheme:light;--pico-background-color:#fff;--pico-color:#373c44;--pico-text-selection-color:rgba(2, 154, 232, 0.25);--pico-muted-color:#646b79;--pico-muted-border-color:rgb(231, 234, 239.5);--pico-primary:#0172ad;--pico-primary-background:#0172ad;--pico-primary-border:var(--pico-primary-background);--pico-primary-underline:rgba(1, 114, 173, 0.5);--pico-primary-hover:#015887;--pico-primary-hover-background:#02659a;--pico-primary-hover-border:var(--pico-primary-hover-background);--pico-primary-hover-underline:var(--pico-primary-hover);--pico-primary-focus:rgba(2, 154, 232, 0.5);--pico-primary-inverse:#fff;--pico-secondary:#5d6b89;--pico-secondary-background:#525f7a;--pico-secondary-border:var(--pico-secondary-background);--pico-secondary-underline:rgba(93, 107, 137, 0.5);--pico-secondary-hover:#48536b;--pico-secondary-hover-background:#48536b;--pico-secondary-hover-border:var(--pico-secondary-hover-background);--pico-secondary-hover-underline:var(--pico-secondary-hover);--pico-secondary-focus:rgba(93, 107, 137, 0.25);--pico-secondary-inverse:#fff;--pico-contrast:#181c25;--pico-contrast-background:#181c25;--pico-contrast-border:var(--pico-contrast-background);--pico-contrast-underline:rgba(24, 28, 37, 0.5);--pico-contrast-hover:#000;--pico-contrast-hover-background:#000;--pico-contrast-hover-border:var(--pico-contrast-hover-background);--pico-contrast-hover-underline:var(--pico-secondary-hover);--pico-contrast-focus:rgba(93, 107, 137, 0.25);--pico-contrast-inverse:#fff;--pico-box-shadow:0.0145rem 0.029rem 0.174rem rgba(129, 145, 181, 0.01698),0.0335rem 0.067rem 0.402rem rgba(129, 145, 181, 0.024),0.0625rem 0.125rem 0.75rem rgba(129, 145, 181, 0.03),0.1125rem 0.225rem 1.35rem rgba(129, 145, 181, 0.036),0.2085rem 0.417rem 2.502rem rgba(129, 145, 181, 0.04302),0.5rem 1rem 6rem rgba(129, 145, 181, 0.06),0 0 0 0.0625rem rgba(129, 145, 181, 0.015);--pico-h1-color:#2d3138;--pico-h2-color:#373c44;--pico-h3-color:#424751;--pico-h4-color:#4d535e;--pico-h5-color:#5c6370;--pico-h6-color:#646b79;--pico-mark-background-color:rgb(252.5, 230.5, 191.5);--pico-mark-color:#0f1114;--pico-ins-color:rgb(28.5, 105.5, 84);--pico-del-color:rgb(136, 56.5, 53);--pico-blockquote-border-color:var(--pico-muted-border-color);--pico-blockquote-footer-color:var(--pico-muted-color);--pico-button-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-button-hover-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-table-border-color:var(--pico-muted-border-color);--pico-table-row-stripped-background-color:rgba(111, 120, 135, 0.0375);--pico-code-background-color:rgb(243, 244.5, 246.75);--pico-code-color:#646b79;--pico-code-kbd-background-color:var(--pico-color);--pico-code-kbd-color:var(--pico-background-color);--pico-form-element-background-color:rgb(251, 251.5, 252.25);--pico-form-element-selected-background-color:#dfe3eb;--pico-form-element-border-color:#cfd5e2;--pico-form-element-color:#23262c;--pico-form-element-placeholder-color:var(--pico-muted-color);--pico-form-element-active-background-color:#fff;--pico-form-element-active-border-color:var(--pico-primary-border);--pico-form-element-focus-color:var(--pico-primary-border);--pico-form-element-disabled-opacity:0.5;--pico-form-element-invalid-border-color:rgb(183.5, 105.5, 106.5);--pico-form-element-invalid-active-border-color:rgb(200.25, 79.25, 72.25);--pico-form-element-invalid-focus-color:var(--pico-form-element-invalid-active-border-color);--pico-form-element-valid-border-color:rgb(76, 154.5, 137.5);--pico-form-element-valid-active-border-color:rgb(39, 152.75, 118.75);--pico-form-element-valid-focus-color:var(--pico-form-element-valid-active-border-color);--pico-switch-background-color:#bfc7d9;--pico-switch-checked-background-color:var(--pico-primary-background);--pico-switch-color:#fff;--pico-switch-thumb-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-range-border-color:#dfe3eb;--pico-range-active-border-color:#bfc7d9;--pico-range-thumb-border-color:var(--pico-background-color);--pico-range-thumb-color:var(--pico-secondary-background);--pico-range-thumb-active-color:var(--pico-primary-background);--pico-accordion-border-color:var(--pico-muted-border-color);--pico-accordion-active-summary-color:var(--pico-primary-hover);--pico-accordion-close-summary-color:var(--pico-color);--pico-accordion-open-summary-color:var(--pico-muted-color);--pico-card-background-color:var(--pico-background-color);--pico-card-border-color:var(--pico-muted-border-color);--pico-card-box-shadow:var(--pico-box-shadow);--pico-card-sectioning-background-color:rgb(251, 251.5, 252.25);--pico-dropdown-background-color:#fff;--pico-dropdown-border-color:#eff1f4;--pico-dropdown-box-shadow:var(--pico-box-shadow);--pico-dropdown-color:var(--pico-color);--pico-dropdown-hover-background-color:#eff1f4;--pico-loading-spinner-opacity:0.5;--pico-modal-overlay-background-color:rgba(232, 234, 237, 0.75);--pico-progress-background-color:#dfe3eb;--pico-progress-color:var(--pico-primary-background);--pico-tooltip-background-color:var(--pico-contrast-background);--pico-tooltip-color:var(--pico-contrast-inverse);--pico-icon-valid:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(76, 154.5, 137.5)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'%3E%3C/polyline%3E%3C/svg%3E");--pico-icon-invalid:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(200.25, 79.25, 72.25)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cline x1='12' y1='8' x2='12' y2='12'%3E%3C/line%3E%3Cline x1='12' y1='16' x2='12.01' y2='16'%3E%3C/line%3E%3C/svg%3E")}:host(:not([data-theme=dark])) input:is([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]),:root:not([data-theme=dark]) input:is([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]),[data-theme=light] input:is([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]){--pico-form-element-focus-color:var(--pico-primary-focus)}@media only screen and (prefers-color-scheme:dark){:host(:not([data-theme])),:root:not([data-theme]){color-scheme:dark;--pico-background-color:rgb(19, 22.5, 30.5);--pico-color:#c2c7d0;--pico-text-selection-color:rgba(1, 170, 255, 0.1875);--pico-muted-color:#7b8495;--pico-muted-border-color:#202632;--pico-primary:#01aaff;--pico-primary-background:#0172ad;--pico-primary-border:var(--pico-primary-background);--pico-primary-underline:rgba(1, 170, 255, 0.5);--pico-primary-hover:#79c0ff;--pico-primary-hover-background:#017fc0;--pico-primary-hover-border:var(--pico-primary-hover-background);--pico-primary-hover-underline:var(--pico-primary-hover);--pico-primary-focus:rgba(1, 170, 255, 0.375);--pico-primary-inverse:#fff;--pico-secondary:#969eaf;--pico-secondary-background:#525f7a;--pico-secondary-border:var(--pico-secondary-background);--pico-secondary-underline:rgba(150, 158, 175, 0.5);--pico-secondary-hover:#b3b9c5;--pico-secondary-hover-background:#5d6b89;--pico-secondary-hover-border:var(--pico-secondary-hover-background);--pico-secondary-hover-underline:var(--pico-secondary-hover);--pico-secondary-focus:rgba(144, 158, 190, 0.25);--pico-secondary-inverse:#fff;--pico-contrast:#dfe3eb;--pico-contrast-background:#eff1f4;--pico-contrast-border:var(--pico-contrast-background);--pico-contrast-underline:rgba(223, 227, 235, 0.5);--pico-contrast-hover:#fff;--pico-contrast-hover-background:#fff;--pico-contrast-hover-border:var(--pico-contrast-hover-background);--pico-contrast-hover-underline:var(--pico-contrast-hover);--pico-contrast-focus:rgba(207, 213, 226, 0.25);--pico-contrast-inverse:#000;--pico-box-shadow:0.0145rem 0.029rem 0.174rem rgba(7, 8.5, 12, 0.01698),0.0335rem 0.067rem 0.402rem rgba(7, 8.5, 12, 0.024),0.0625rem 0.125rem 0.75rem rgba(7, 8.5, 12, 0.03),0.1125rem 0.225rem 1.35rem rgba(7, 8.5, 12, 0.036),0.2085rem 0.417rem 2.502rem rgba(7, 8.5, 12, 0.04302),0.5rem 1rem 6rem rgba(7, 8.5, 12, 0.06),0 0 0 0.0625rem rgba(7, 8.5, 12, 0.015);--pico-h1-color:#f0f1f3;--pico-h2-color:#e0e3e7;--pico-h3-color:#c2c7d0;--pico-h4-color:#b3b9c5;--pico-h5-color:#a4acba;--pico-h6-color:#8891a4;--pico-mark-background-color:#014063;--pico-mark-color:#fff;--pico-ins-color:#62af9a;--pico-del-color:rgb(205.5, 126, 123);--pico-blockquote-border-color:var(--pico-muted-border-color);--pico-blockquote-footer-color:var(--pico-muted-color);--pico-button-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-button-hover-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-table-border-color:var(--pico-muted-border-color);--pico-table-row-stripped-background-color:rgba(111, 120, 135, 0.0375);--pico-code-background-color:rgb(26, 30.5, 40.25);--pico-code-color:#8891a4;--pico-code-kbd-background-color:var(--pico-color);--pico-code-kbd-color:var(--pico-background-color);--pico-form-element-background-color:rgb(28, 33, 43.5);--pico-form-element-selected-background-color:#2a3140;--pico-form-element-border-color:#2a3140;--pico-form-element-color:#e0e3e7;--pico-form-element-placeholder-color:#8891a4;--pico-form-element-active-background-color:rgb(26, 30.5, 40.25);--pico-form-element-active-border-color:var(--pico-primary-border);--pico-form-element-focus-color:var(--pico-primary-border);--pico-form-element-disabled-opacity:0.5;--pico-form-element-invalid-border-color:rgb(149.5, 74, 80);--pico-form-element-invalid-active-border-color:rgb(183.25, 63.5, 59);--pico-form-element-invalid-focus-color:var(--pico-form-element-invalid-active-border-color);--pico-form-element-valid-border-color:#2a7b6f;--pico-form-element-valid-active-border-color:rgb(22, 137, 105.5);--pico-form-element-valid-focus-color:var(--pico-form-element-valid-active-border-color);--pico-switch-background-color:#333c4e;--pico-switch-checked-background-color:var(--pico-primary-background);--pico-switch-color:#fff;--pico-switch-thumb-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-range-border-color:#202632;--pico-range-active-border-color:#2a3140;--pico-range-thumb-border-color:var(--pico-background-color);--pico-range-thumb-color:var(--pico-secondary-background);--pico-range-thumb-active-color:var(--pico-primary-background);--pico-accordion-border-color:var(--pico-muted-border-color);--pico-accordion-active-summary-color:var(--pico-primary-hover);--pico-accordion-close-summary-color:var(--pico-color);--pico-accordion-open-summary-color:var(--pico-muted-color);--pico-card-background-color:#181c25;--pico-card-border-color:var(--pico-card-background-color);--pico-card-box-shadow:var(--pico-box-shadow);--pico-card-sectioning-background-color:rgb(26, 30.5, 40.25);--pico-dropdown-background-color:#181c25;--pico-dropdown-border-color:#202632;--pico-dropdown-box-shadow:var(--pico-box-shadow);--pico-dropdown-color:var(--pico-color);--pico-dropdown-hover-background-color:#202632;--pico-loading-spinner-opacity:0.5;--pico-modal-overlay-background-color:rgba(7.5, 8.5, 10, 0.75);--pico-progress-background-color:#202632;--pico-progress-color:var(--pico-primary-background);--pico-tooltip-background-color:var(--pico-contrast-background);--pico-tooltip-color:var(--pico-contrast-inverse);--pico-icon-valid:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(42, 123, 111)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'%3E%3C/polyline%3E%3C/svg%3E");--pico-icon-invalid:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(149.5, 74, 80)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cline x1='12' y1='8' x2='12' y2='12'%3E%3C/line%3E%3Cline x1='12' y1='16' x2='12.01' y2='16'%3E%3C/line%3E%3C/svg%3E")}:host(:not([data-theme])) input:is([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]),:root:not([data-theme]) input:is([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]){--pico-form-element-focus-color:var(--pico-primary-focus)}:host(:not([data-theme])) details summary[role=button].contrast:not(.outline)::after,:root:not([data-theme]) details summary[role=button].contrast:not(.outline)::after{filter:brightness(0)}:host(:not([data-theme])) [aria-busy=true]:not(input,select,textarea).contrast:is(button,[type=submit],[type=button],[type=reset],[role=button]):not(.outline)::before,:root:not([data-theme]) [aria-busy=true]:not(input,select,textarea).contrast:is(button,[type=submit],[type=button],[type=reset],[role=button]):not(.outline)::before{filter:brightness(0)}}[data-theme=dark]{color-scheme:dark;--pico-background-color:rgb(19, 22.5, 30.5);--pico-color:#c2c7d0;--pico-text-selection-color:rgba(1, 170, 255, 0.1875);--pico-muted-color:#7b8495;--pico-muted-border-color:#202632;--pico-primary:#01aaff;--pico-primary-background:#0172ad;--pico-primary-border:var(--pico-primary-background);--pico-primary-underline:rgba(1, 170, 255, 0.5);--pico-primary-hover:#79c0ff;--pico-primary-hover-background:#017fc0;--pico-primary-hover-border:var(--pico-primary-hover-background);--pico-primary-hover-underline:var(--pico-primary-hover);--pico-primary-focus:rgba(1, 170, 255, 0.375);--pico-primary-inverse:#fff;--pico-secondary:#969eaf;--pico-secondary-background:#525f7a;--pico-secondary-border:var(--pico-secondary-background);--pico-secondary-underline:rgba(150, 158, 175, 0.5);--pico-secondary-hover:#b3b9c5;--pico-secondary-hover-background:#5d6b89;--pico-secondary-hover-border:var(--pico-secondary-hover-background);--pico-secondary-hover-underline:var(--pico-secondary-hover);--pico-secondary-focus:rgba(144, 158, 190, 0.25);--pico-secondary-inverse:#fff;--pico-contrast:#dfe3eb;--pico-contrast-background:#eff1f4;--pico-contrast-border:var(--pico-contrast-background);--pico-contrast-underline:rgba(223, 227, 235, 0.5);--pico-contrast-hover:#fff;--pico-contrast-hover-background:#fff;--pico-contrast-hover-border:var(--pico-contrast-hover-background);--pico-contrast-hover-underline:var(--pico-contrast-hover);--pico-contrast-focus:rgba(207, 213, 226, 0.25);--pico-contrast-inverse:#000;--pico-box-shadow:0.0145rem 0.029rem 0.174rem rgba(7, 8.5, 12, 0.01698),0.0335rem 0.067rem 0.402rem rgba(7, 8.5, 12, 0.024),0.0625rem 0.125rem 0.75rem rgba(7, 8.5, 12, 0.03),0.1125rem 0.225rem 1.35rem rgba(7, 8.5, 12, 0.036),0.2085rem 0.417rem 2.502rem rgba(7, 8.5, 12, 0.04302),0.5rem 1rem 6rem rgba(7, 8.5, 12, 0.06),0 0 0 0.0625rem rgba(7, 8.5, 12, 0.015);--pico-h1-color:#f0f1f3;--pico-h2-color:#e0e3e7;--pico-h3-color:#c2c7d0;--pico-h4-color:#b3b9c5;--pico-h5-color:#a4acba;--pico-h6-color:#8891a4;--pico-mark-background-color:#014063;--pico-mark-color:#fff;--pico-ins-color:#62af9a;--pico-del-color:rgb(205.5, 126, 123);--pico-blockquote-border-color:var(--pico-muted-border-color);--pico-blockquote-footer-color:var(--pico-muted-color);--pico-button-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-button-hover-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-table-border-color:var(--pico-muted-border-color);--pico-table-row-stripped-background-color:rgba(111, 120, 135, 0.0375);--pico-code-background-color:rgb(26, 30.5, 40.25);--pico-code-color:#8891a4;--pico-code-kbd-background-color:var(--pico-color);--pico-code-kbd-color:var(--pico-background-color);--pico-form-element-background-color:rgb(28, 33, 43.5);--pico-form-element-selected-background-color:#2a3140;--pico-form-element-border-color:#2a3140;--pico-form-element-color:#e0e3e7;--pico-form-element-placeholder-color:#8891a4;--pico-form-element-active-background-color:rgb(26, 30.5, 40.25);--pico-form-element-active-border-color:var(--pico-primary-border);--pico-form-element-focus-color:var(--pico-primary-border);--pico-form-element-disabled-opacity:0.5;--pico-form-element-invalid-border-color:rgb(149.5, 74, 80);--pico-form-element-invalid-active-border-color:rgb(183.25, 63.5, 59);--pico-form-element-invalid-focus-color:var(--pico-form-element-invalid-active-border-color);--pico-form-element-valid-border-color:#2a7b6f;--pico-form-element-valid-active-border-color:rgb(22, 137, 105.5);--pico-form-element-valid-focus-color:var(--pico-form-element-valid-active-border-color);--pico-switch-background-color:#333c4e;--pico-switch-checked-background-color:var(--pico-primary-background);--pico-switch-color:#fff;--pico-switch-thumb-box-shadow:0 0 0 rgba(0, 0, 0, 0);--pico-range-border-color:#202632;--pico-range-active-border-color:#2a3140;--pico-range-thumb-border-color:var(--pico-background-color);--pico-range-thumb-color:var(--pico-secondary-background);--pico-range-thumb-active-color:var(--pico-primary-background);--pico-accordion-border-color:var(--pico-muted-border-color);--pico-accordion-active-summary-color:var(--pico-primary-hover);--pico-accordion-close-summary-color:var(--pico-color);--pico-accordion-open-summary-color:var(--pico-muted-color);--pico-card-background-color:#181c25;--pico-card-border-color:var(--pico-card-background-color);--pico-card-box-shadow:var(--pico-box-shadow);--pico-card-sectioning-background-color:rgb(26, 30.5, 40.25);--pico-dropdown-background-color:#181c25;--pico-dropdown-border-color:#202632;--pico-dropdown-box-shadow:var(--pico-box-shadow);--pico-dropdown-color:var(--pico-color);--pico-dropdown-hover-background-color:#202632;--pico-loading-spinner-opacity:0.5;--pico-modal-overlay-background-color:rgba(7.5, 8.5, 10, 0.75);--pico-progress-background-color:#202632;--pico-progress-color:var(--pico-primary-background);--pico-tooltip-background-color:var(--pico-contrast-background);--pico-tooltip-color:var(--pico-contrast-inverse);--pico-icon-valid:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(42, 123, 111)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 6 9 17 4 12'%3E%3C/polyline%3E%3C/svg%3E");--pico-icon-invalid:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='rgb(149.5, 74, 80)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'%3E%3C/circle%3E%3Cline x1='12' y1='8' x2='12' y2='12'%3E%3C/line%3E%3Cline x1='12' y1='16' x2='12.01' y2='16'%3E%3C/line%3E%3C/svg%3E")}[data-theme=dark] input:is([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[type=file]){--pico-form-element-focus-color:var(--pico-primary-focus)}[data-theme=dark] details summary[role=button].contrast:not(.outline)::after{filter:brightness(0)}[data-theme=dark] [aria-busy=true]:not(input,select,textarea).contrast:is(button,[type=submit],[type=button],[type=reset],[role=button]):not(.outline)::before{filter:brightness(0)}[type=checkbox],[type=radio],[type=range],progress{accent-color:var(--pico-primary)}*,::after,::before{box-sizing:border-box;background-repeat:no-repeat}::after,::before{text-decoration:inherit;vertical-align:inherit}:where(:host),:where(:root){-webkit-tap-highlight-color:transparent;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;text-size-adjust:100%;background-color:var(--pico-background-color);color:var(--pico-color);font-weight:var(--pico-font-weight);font-size:var(--pico-font-size);line-height:var(--pico-line-height);font-family:var(--pico-font-family);text-underline-offset:var(--pico-text-underline-offset);text-rendering:optimizeLegibility;overflow-wrap:break-word;-moz-tab-size:4;-o-tab-size:4;tab-size:4}body{width:100%;margin:0}main{display:block}body>footer,body>header,body>main{padding-block:var(--pico-block-spacing-vertical)}section{margin-bottom:var(--pico-block-spacing-vertical)}.container,.container-fluid{width:100%;margin-right:auto;margin-left:auto;padding-right:var(--pico-spacing);padding-left:var(--pico-spacing)}@media (min-width:576px){.container{max-width:510px;padding-right:0;padding-left:0}}@media (min-width:768px){.container{max-width:700px}}@media (min-width:1024px){.container{max-width:950px}}@media (min-width:1280px){.container{max-width:1200px}}@media (min-width:1536px){.container{max-width:1450px}}.grid{grid-column-gap:var(--pico-grid-column-gap);grid-row-gap:var(--pico-grid-row-gap);display:grid;grid-template-columns:1fr}@media (min-width:768px){.grid{grid-template-columns:repeat(auto-fit,minmax(0%,1fr))}}.grid>*{min-width:0}.overflow-auto{overflow:auto}b,strong{font-weight:bolder}sub,sup{position:relative;font-size:.75em;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}address,blockquote,dl,ol,p,pre,table,ul{margin-top:0;margin-bottom:var(--pico-typography-spacing-vertical);color:var(--pico-color);font-style:normal;font-weight:var(--pico-font-weight)}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:var(--pico-typography-spacing-vertical);color:var(--pico-color);font-weight:var(--pico-font-weight);font-size:var(--pico-font-size);line-height:var(--pico-line-height);font-family:var(--pico-font-family)}h1{--pico-color:var(--pico-h1-color)}h2{--pico-color:var(--pico-h2-color)}h3{--pico-color:var(--pico-h3-color)}h4{--pico-color:var(--pico-h4-color)}h5{--pico-color:var(--pico-h5-color)}h6{--pico-color:var(--pico-h6-color)}:where(article,address,blockquote,dl,figure,form,ol,p,pre,table,ul)~:is(h1,h2,h3,h4,h5,h6){margin-top:var(--pico-typography-spacing-top)}p{margin-bottom:var(--pico-typography-spacing-vertical)}hgroup{margin-bottom:var(--pico-typography-spacing-vertical)}hgroup>*{margin-top:0;margin-bottom:0}hgroup>:not(:first-child):last-child{--pico-color:var(--pico-muted-color);--pico-font-weight:unset;font-size:1rem}:where(ol,ul) li{margin-bottom:calc(var(--pico-typography-spacing-vertical) * .25)}:where(dl,ol,ul) :where(dl,ol,ul){margin:0;margin-top:calc(var(--pico-typography-spacing-vertical) * .25)}ul li{list-style:square}mark{padding:.125rem .25rem;background-color:var(--pico-mark-background-color);color:var(--pico-mark-color);vertical-align:baseline}blockquote{display:block;margin:var(--pico-typography-spacing-vertical) 0;padding:var(--pico-spacing);border-right:none;border-left:.25rem solid var(--pico-blockquote-border-color);border-inline-start:0.25rem solid var(--pico-blockquote-border-color);border-inline-end:none}blockquote footer{margin-top:calc(var(--pico-typography-spacing-vertical) * .5);color:var(--pico-blockquote-footer-color)}abbr[title]{border-bottom:1px dotted;text-decoration:none;cursor:help}ins{color:var(--pico-ins-color);text-decoration:none}del{color:var(--pico-del-color)}::-moz-selection{background-color:var(--pico-text-selection-color)}::selection{background-color:var(--pico-text-selection-color)}:where(a:not([role=button])),[role=link]{--pico-color:var(--pico-primary);--pico-background-color:transparent;--pico-underline:var(--pico-primary-underline);outline:0;background-color:var(--pico-background-color);color:var(--pico-color);-webkit-text-decoration:var(--pico-text-decoration);text-decoration:var(--pico-text-decoration);text-decoration-color:var(--pico-underline);text-underline-offset:0.125em;transition:background-color var(--pico-transition),color var(--pico-transition),box-shadow var(--pico-transition),-webkit-text-decoration var(--pico-transition);transition:background-color var(--pico-transition),color var(--pico-transition),text-decoration var(--pico-transition),box-shadow var(--pico-transition);transition:background-color var(--pico-transition),color var(--pico-transition),text-decoration var(--pico-transition),box-shadow var(--pico-transition),-webkit-text-decoration var(--pico-transition)}:where(a:not([role=button])):is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[role=link]:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-color:var(--pico-primary-hover);--pico-underline:var(--pico-primary-hover-underline);--pico-text-decoration:underline}:where(a:not([role=button])):focus-visible,[role=link]:focus-visible{box-shadow:0 0 0 var(--pico-outline-width) var(--pico-primary-focus)}:where(a:not([role=button])).secondary,[role=link].secondary{--pico-color:var(--pico-secondary);--pico-underline:var(--pico-secondary-underline)}:where(a:not([role=button])).secondary:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[role=link].secondary:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-color:var(--pico-secondary-hover);--pico-underline:var(--pico-secondary-hover-underline)}:where(a:not([role=button])).contrast,[role=link].contrast{--pico-color:var(--pico-contrast);--pico-underline:var(--pico-contrast-underline)}:where(a:not([role=button])).contrast:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[role=link].contrast:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-color:var(--pico-contrast-hover);--pico-underline:var(--pico-contrast-hover-underline)}a[role=button]{display:inline-block}button{margin:0;overflow:visible;font-family:inherit;text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[role=button],[type=button],[type=file]::file-selector-button,[type=reset],[type=submit],button{--pico-background-color:var(--pico-primary-background);--pico-border-color:var(--pico-primary-border);--pico-color:var(--pico-primary-inverse);--pico-box-shadow:var(--pico-button-box-shadow, 0 0 0 rgba(0, 0, 0, 0));padding:var(--pico-form-element-spacing-vertical) var(--pico-form-element-spacing-horizontal);border:var(--pico-border-width) solid var(--pico-border-color);border-radius:var(--pico-border-radius);outline:0;background-color:var(--pico-background-color);box-shadow:var(--pico-box-shadow);color:var(--pico-color);font-weight:var(--pico-font-weight);font-size:1rem;line-height:var(--pico-line-height);text-align:center;text-decoration:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;transition:background-color var(--pico-transition),border-color var(--pico-transition),color var(--pico-transition),box-shadow var(--pico-transition)}[role=button]:is(:hover,:active,:focus),[role=button]:is([aria-current]:not([aria-current=false])),[type=button]:is(:hover,:active,:focus),[type=button]:is([aria-current]:not([aria-current=false])),[type=file]::file-selector-button:is(:hover,:active,:focus),[type=file]::file-selector-button:is([aria-current]:not([aria-current=false])),[type=reset]:is(:hover,:active,:focus),[type=reset]:is([aria-current]:not([aria-current=false])),[type=submit]:is(:hover,:active,:focus),[type=submit]:is([aria-current]:not([aria-current=false])),button:is(:hover,:active,:focus),button:is([aria-current]:not([aria-current=false])){--pico-background-color:var(--pico-primary-hover-background);--pico-border-color:var(--pico-primary-hover-border);--pico-box-shadow:var(--pico-button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0));--pico-color:var(--pico-primary-inverse)}[role=button]:focus,[role=button]:is([aria-current]:not([aria-current=false])):focus,[type=button]:focus,[type=button]:is([aria-current]:not([aria-current=false])):focus,[type=file]::file-selector-button:focus,[type=file]::file-selector-button:is([aria-current]:not([aria-current=false])):focus,[type=reset]:focus,[type=reset]:is([aria-current]:not([aria-current=false])):focus,[type=submit]:focus,[type=submit]:is([aria-current]:not([aria-current=false])):focus,button:focus,button:is([aria-current]:not([aria-current=false])):focus{--pico-box-shadow:var(--pico-button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),0 0 0 var(--pico-outline-width) var(--pico-primary-focus)}[type=button],[type=reset],[type=submit]{margin-bottom:var(--pico-spacing)}:is(button,[type=submit],[type=button],[role=button]).secondary,[type=file]::file-selector-button,[type=reset]{--pico-background-color:var(--pico-secondary-background);--pico-border-color:var(--pico-secondary-border);--pico-color:var(--pico-secondary-inverse);cursor:pointer}:is(button,[type=submit],[type=button],[role=button]).secondary:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[type=file]::file-selector-button:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[type=reset]:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-background-color:var(--pico-secondary-hover-background);--pico-border-color:var(--pico-secondary-hover-border);--pico-color:var(--pico-secondary-inverse)}:is(button,[type=submit],[type=button],[role=button]).secondary:focus,:is(button,[type=submit],[type=button],[role=button]).secondary:is([aria-current]:not([aria-current=false])):focus,[type=file]::file-selector-button:focus,[type=file]::file-selector-button:is([aria-current]:not([aria-current=false])):focus,[type=reset]:focus,[type=reset]:is([aria-current]:not([aria-current=false])):focus{--pico-box-shadow:var(--pico-button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),0 0 0 var(--pico-outline-width) var(--pico-secondary-focus)}:is(button,[type=submit],[type=button],[role=button]).contrast{--pico-background-color:var(--pico-contrast-background);--pico-border-color:var(--pico-contrast-border);--pico-color:var(--pico-contrast-inverse)}:is(button,[type=submit],[type=button],[role=button]).contrast:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-background-color:var(--pico-contrast-hover-background);--pico-border-color:var(--pico-contrast-hover-border);--pico-color:var(--pico-contrast-inverse)}:is(button,[type=submit],[type=button],[role=button]).contrast:focus,:is(button,[type=submit],[type=button],[role=button]).contrast:is([aria-current]:not([aria-current=false])):focus{--pico-box-shadow:var(--pico-button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),0 0 0 var(--pico-outline-width) var(--pico-contrast-focus)}:is(button,[type=submit],[type=button],[role=button]).outline,[type=reset].outline{--pico-background-color:transparent;--pico-color:var(--pico-primary);--pico-border-color:var(--pico-primary)}:is(button,[type=submit],[type=button],[role=button]).outline:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[type=reset].outline:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-background-color:transparent;--pico-color:var(--pico-primary-hover);--pico-border-color:var(--pico-primary-hover)}:is(button,[type=submit],[type=button],[role=button]).outline.secondary,[type=reset].outline{--pico-color:var(--pico-secondary);--pico-border-color:var(--pico-secondary)}:is(button,[type=submit],[type=button],[role=button]).outline.secondary:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),[type=reset].outline:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-color:var(--pico-secondary-hover);--pico-border-color:var(--pico-secondary-hover)}:is(button,[type=submit],[type=button],[role=button]).outline.contrast{--pico-color:var(--pico-contrast);--pico-border-color:var(--pico-contrast)}:is(button,[type=submit],[type=button],[role=button]).outline.contrast:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){--pico-color:var(--pico-contrast-hover);--pico-border-color:var(--pico-contrast-hover)}:where(button,[type=submit],[type=reset],[type=button],[role=button])[disabled],:where(fieldset[disabled]) :is(button,[type=submit],[type=button],[type=reset],[role=button]){opacity:.5;pointer-events:none}:where(table){width:100%;border-collapse:collapse;border-spacing:0;text-indent:0}td,th{padding:calc(var(--pico-spacing)/ 2) var(--pico-spacing);border-bottom:var(--pico-border-width) solid var(--pico-table-border-color);background-color:var(--pico-background-color);color:var(--pico-color);font-weight:var(--pico-font-weight);text-align:left;text-align:start}tfoot td,tfoot th{border-top:var(--pico-border-width) solid var(--pico-table-border-color);border-bottom:0}table.striped tbody tr:nth-child(odd) td,table.striped tbody tr:nth-child(odd) th{background-color:var(--pico-table-row-stripped-background-color)}:where(audio,canvas,iframe,img,svg,video){vertical-align:middle}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}:where(iframe){border-style:none}img{max-width:100%;height:auto;border-style:none}:where(svg:not([fill])){fill:currentColor}svg:not(:host),svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-size:.875em;font-family:var(--pico-font-family)}pre code,pre samp{font-size:inherit;font-family:inherit}pre{-ms-overflow-style:scrollbar;overflow:auto}code,kbd,pre,samp{border-radius:var(--pico-border-radius);background:var(--pico-code-background-color);color:var(--pico-code-color);font-weight:var(--pico-font-weight);line-height:initial}code,kbd,samp{display:inline-block;padding:.375rem}pre{display:block;margin-bottom:var(--pico-spacing);overflow-x:auto}pre>code,pre>samp{display:block;padding:var(--pico-spacing);background:0 0;line-height:var(--pico-line-height)}kbd{background-color:var(--pico-code-kbd-background-color);color:var(--pico-code-kbd-color);vertical-align:baseline}figure{display:block;margin:0;padding:0}figure figcaption{padding:calc(var(--pico-spacing) * .5) 0;color:var(--pico-muted-color)}hr{height:0;margin:var(--pico-typography-spacing-vertical) 0;border:0;border-top:1px solid var(--pico-muted-border-color);color:inherit}[hidden],template{display:none!important}canvas{display:inline-block}input,optgroup,select,textarea{margin:0;font-size:1rem;line-height:var(--pico-line-height);font-family:inherit;letter-spacing:inherit}input{overflow:visible}select{text-transform:none}legend{max-width:100%;padding:0;color:inherit;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{padding:0}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}::-moz-focus-inner{padding:0;border-style:none}:-moz-focusring{outline:0}:-moz-ui-invalid{box-shadow:none}::-ms-expand{display:none}[type=file],[type=range]{padding:0;border-width:0}input:not([type=checkbox],[type=radio],[type=range]){height:calc(1rem * var(--pico-line-height) + var(--pico-form-element-spacing-vertical) * 2 + var(--pico-border-width) * 2)}fieldset{width:100%;margin:0;margin-bottom:var(--pico-spacing);padding:0;border:0}fieldset legend,label{display:block;margin-bottom:calc(var(--pico-spacing) * .375);color:var(--pico-color);font-weight:var(--pico-form-label-font-weight,var(--pico-font-weight))}fieldset legend{margin-bottom:calc(var(--pico-spacing) * .5)}button[type=submit],input:not([type=checkbox],[type=radio]),select,textarea{width:100%}input:not([type=checkbox],[type=radio],[type=range],[type=file]),select,textarea{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:var(--pico-form-element-spacing-vertical) var(--pico-form-element-spacing-horizontal)}input,select,textarea{--pico-background-color:var(--pico-form-element-background-color);--pico-border-color:var(--pico-form-element-border-color);--pico-color:var(--pico-form-element-color);--pico-box-shadow:none;border:var(--pico-border-width) solid var(--pico-border-color);border-radius:var(--pico-border-radius);outline:0;background-color:var(--pico-background-color);box-shadow:var(--pico-box-shadow);color:var(--pico-color);font-weight:var(--pico-font-weight);transition:background-color var(--pico-transition),border-color var(--pico-transition),color var(--pico-transition),box-shadow var(--pico-transition)}:where(select,textarea):not([readonly]):is(:active,:focus),input:not([type=submit],[type=button],[type=reset],[type=checkbox],[type=radio],[readonly]):is(:active,:focus){--pico-background-color:var(--pico-form-element-active-background-color)}:where(select,textarea):not([readonly]):is(:active,:focus),input:not([type=submit],[type=button],[type=reset],[role=switch],[readonly]):is(:active,:focus){--pico-border-color:var(--pico-form-element-active-border-color)}:where(select,textarea):not([readonly]):focus,input:not([type=submit],[type=button],[type=reset],[type=range],[type=file],[readonly]):focus{--pico-box-shadow:0 0 0 var(--pico-outline-width) var(--pico-form-element-focus-color)}:where(fieldset[disabled]) :is(input:not([type=submit],[type=button],[type=reset]),select,textarea),input:not([type=submit],[type=button],[type=reset])[disabled],label[aria-disabled=true],select[disabled],textarea[disabled]{opacity:var(--pico-form-element-disabled-opacity);pointer-events:none}label[aria-disabled=true] input[disabled]{opacity:1}:where(input,select,textarea):not([type=checkbox],[type=radio],[type=date],[type=datetime-local],[type=month],[type=time],[type=week],[type=range])[aria-invalid]{padding-right:calc(var(--pico-form-element-spacing-horizontal) + 1.5rem)!important;padding-left:var(--pico-form-element-spacing-horizontal);padding-inline-start:var(--pico-form-element-spacing-horizontal)!important;padding-inline-end:calc(var(--pico-form-element-spacing-horizontal) + 1.5rem)!important;background-position:center right .75rem;background-size:1rem auto;background-repeat:no-repeat}:where(input,select,textarea):not([type=checkbox],[type=radio],[type=date],[type=datetime-local],[type=month],[type=time],[type=week],[type=range])[aria-invalid=false]:not(select){background-image:var(--pico-icon-valid)}:where(input,select,textarea):not([type=checkbox],[type=radio],[type=date],[type=datetime-local],[type=month],[type=time],[type=week],[type=range])[aria-invalid=true]:not(select){background-image:var(--pico-icon-invalid)}:where(input,select,textarea)[aria-invalid=false]{--pico-border-color:var(--pico-form-element-valid-border-color)}:where(input,select,textarea)[aria-invalid=false]:is(:active,:focus){--pico-border-color:var(--pico-form-element-valid-active-border-color)!important}:where(input,select,textarea)[aria-invalid=false]:is(:active,:focus):not([type=checkbox],[type=radio]){--pico-box-shadow:0 0 0 var(--pico-outline-width) var(--pico-form-element-valid-focus-color)!important}:where(input,select,textarea)[aria-invalid=true]{--pico-border-color:var(--pico-form-element-invalid-border-color)}:where(input,select,textarea)[aria-invalid=true]:is(:active,:focus){--pico-border-color:var(--pico-form-element-invalid-active-border-color)!important}:where(input,select,textarea)[aria-invalid=true]:is(:active,:focus):not([type=checkbox],[type=radio]){--pico-box-shadow:0 0 0 var(--pico-outline-width) var(--pico-form-element-invalid-focus-color)!important}[dir=rtl] :where(input,select,textarea):not([type=checkbox],[type=radio]):is([aria-invalid],[aria-invalid=true],[aria-invalid=false]){background-position:center left .75rem}input::-webkit-input-placeholder,input::placeholder,select:invalid,textarea::-webkit-input-placeholder,textarea::placeholder{color:var(--pico-form-element-placeholder-color);opacity:1}input:not([type=checkbox],[type=radio]),select,textarea{margin-bottom:var(--pico-spacing)}select::-ms-expand{border:0;background-color:transparent}select:not([multiple],[size]){padding-right:calc(var(--pico-form-element-spacing-horizontal) + 1.5rem);padding-left:var(--pico-form-element-spacing-horizontal);padding-inline-start:var(--pico-form-element-spacing-horizontal);padding-inline-end:calc(var(--pico-form-element-spacing-horizontal) + 1.5rem);background-image:var(--pico-icon-chevron);background-position:center right .75rem;background-size:1rem auto;background-repeat:no-repeat}select[multiple] option:checked{background:var(--pico-form-element-selected-background-color);color:var(--pico-form-element-color)}[dir=rtl] select:not([multiple],[size]){background-position:center left .75rem}textarea{display:block;resize:vertical}textarea[aria-invalid]{--pico-icon-height:calc(1rem * var(--pico-line-height) + var(--pico-form-element-spacing-vertical) * 2 + var(--pico-border-width) * 2);background-position:top right .75rem!important;background-size:1rem var(--pico-icon-height)!important}:where(input,select,textarea,fieldset,.grid)+small{display:block;width:100%;margin-top:calc(var(--pico-spacing) * -.75);margin-bottom:var(--pico-spacing);color:var(--pico-muted-color)}:where(input,select,textarea,fieldset,.grid)[aria-invalid=false]+small{color:var(--pico-ins-color)}:where(input,select,textarea,fieldset,.grid)[aria-invalid=true]+small{color:var(--pico-del-color)}label>:where(input,select,textarea){margin-top:calc(var(--pico-spacing) * .25)}label:has([type=checkbox],[type=radio]){width:-moz-fit-content;width:fit-content;cursor:pointer}[type=checkbox],[type=radio]{-webkit-appearance:none;-moz-appearance:none;appearance:none;width:1.25em;height:1.25em;margin-top:-.125em;margin-inline-end:.5em;border-width:var(--pico-border-width);vertical-align:middle;cursor:pointer}[type=checkbox]::-ms-check,[type=radio]::-ms-check{display:none}[type=checkbox]:checked,[type=checkbox]:checked:active,[type=checkbox]:checked:focus,[type=radio]:checked,[type=radio]:checked:active,[type=radio]:checked:focus{--pico-background-color:var(--pico-primary-background);--pico-border-color:var(--pico-primary-border);background-image:var(--pico-icon-checkbox);background-position:center;background-size:.75em auto;background-repeat:no-repeat}[type=checkbox]~label,[type=radio]~label{display:inline-block;margin-bottom:0;cursor:pointer}[type=checkbox]~label:not(:last-of-type),[type=radio]~label:not(:last-of-type){margin-inline-end:1em}[type=checkbox]:indeterminate{--pico-background-color:var(--pico-primary-background);--pico-border-color:var(--pico-primary-border);background-image:var(--pico-icon-minus);background-position:center;background-size:.75em auto;background-repeat:no-repeat}[type=radio]{border-radius:50%}[type=radio]:checked,[type=radio]:checked:active,[type=radio]:checked:focus{--pico-background-color:var(--pico-primary-inverse);border-width:.35em;background-image:none}[type=checkbox][role=switch]{--pico-background-color:var(--pico-switch-background-color);--pico-color:var(--pico-switch-color);width:2.25em;height:1.25em;border:var(--pico-border-width) solid var(--pico-border-color);border-radius:1.25em;background-color:var(--pico-background-color);line-height:1.25em}[type=checkbox][role=switch]:not([aria-invalid]){--pico-border-color:var(--pico-switch-background-color)}[type=checkbox][role=switch]:before{display:block;aspect-ratio:1;height:100%;border-radius:50%;background-color:var(--pico-color);box-shadow:var(--pico-switch-thumb-box-shadow);content:"";transition:margin .1s ease-in-out}[type=checkbox][role=switch]:focus{--pico-background-color:var(--pico-switch-background-color);--pico-border-color:var(--pico-switch-background-color)}[type=checkbox][role=switch]:checked{--pico-background-color:var(--pico-switch-checked-background-color);--pico-border-color:var(--pico-switch-checked-background-color);background-image:none}[type=checkbox][role=switch]:checked::before{margin-inline-start:calc(2.25em - 1.25em)}[type=checkbox][role=switch][disabled]{--pico-background-color:var(--pico-border-color)}[type=checkbox][aria-invalid=false]:checked,[type=checkbox][aria-invalid=false]:checked:active,[type=checkbox][aria-invalid=false]:checked:focus,[type=checkbox][role=switch][aria-invalid=false]:checked,[type=checkbox][role=switch][aria-invalid=false]:checked:active,[type=checkbox][role=switch][aria-invalid=false]:checked:focus{--pico-background-color:var(--pico-form-element-valid-border-color)}[type=checkbox]:checked:active[aria-invalid=true],[type=checkbox]:checked:focus[aria-invalid=true],[type=checkbox]:checked[aria-invalid=true],[type=checkbox][role=switch]:checked:active[aria-invalid=true],[type=checkbox][role=switch]:checked:focus[aria-invalid=true],[type=checkbox][role=switch]:checked[aria-invalid=true]{--pico-background-color:var(--pico-form-element-invalid-border-color)}[type=checkbox][aria-invalid=false]:checked,[type=checkbox][aria-invalid=false]:checked:active,[type=checkbox][aria-invalid=false]:checked:focus,[type=checkbox][role=switch][aria-invalid=false]:checked,[type=checkbox][role=switch][aria-invalid=false]:checked:active,[type=checkbox][role=switch][aria-invalid=false]:checked:focus,[type=radio][aria-invalid=false]:checked,[type=radio][aria-invalid=false]:checked:active,[type=radio][aria-invalid=false]:checked:focus{--pico-border-color:var(--pico-form-element-valid-border-color)}[type=checkbox]:checked:active[aria-invalid=true],[type=checkbox]:checked:focus[aria-invalid=true],[type=checkbox]:checked[aria-invalid=true],[type=checkbox][role=switch]:checked:active[aria-invalid=true],[type=checkbox][role=switch]:checked:focus[aria-invalid=true],[type=checkbox][role=switch]:checked[aria-invalid=true],[type=radio]:checked:active[aria-invalid=true],[type=radio]:checked:focus[aria-invalid=true],[type=radio]:checked[aria-invalid=true]{--pico-border-color:var(--pico-form-element-invalid-border-color)}[type=color]::-webkit-color-swatch-wrapper{padding:0}[type=color]::-moz-focus-inner{padding:0}[type=color]::-webkit-color-swatch{border:0;border-radius:calc(var(--pico-border-radius) * .5)}[type=color]::-moz-color-swatch{border:0;border-radius:calc(var(--pico-border-radius) * .5)}input:not([type=checkbox],[type=radio],[type=range],[type=file]):is([type=date],[type=datetime-local],[type=month],[type=time],[type=week]){--pico-icon-position:0.75rem;--pico-icon-width:1rem;padding-right:calc(var(--pico-icon-width) + var(--pico-icon-position));background-image:var(--pico-icon-date);background-position:center right var(--pico-icon-position);background-size:var(--pico-icon-width) auto;background-repeat:no-repeat}input:not([type=checkbox],[type=radio],[type=range],[type=file])[type=time]{background-image:var(--pico-icon-time)}[type=date]::-webkit-calendar-picker-indicator,[type=datetime-local]::-webkit-calendar-picker-indicator,[type=month]::-webkit-calendar-picker-indicator,[type=time]::-webkit-calendar-picker-indicator,[type=week]::-webkit-calendar-picker-indicator{width:var(--pico-icon-width);margin-right:calc(var(--pico-icon-width) * -1);margin-left:var(--pico-icon-position);opacity:0}@-moz-document url-prefix(){[type=date],[type=datetime-local],[type=month],[type=time],[type=week]{padding-right:var(--pico-form-element-spacing-horizontal)!important;background-image:none!important}}[dir=rtl] :is([type=date],[type=datetime-local],[type=month],[type=time],[type=week]){text-align:right}[type=file]{--pico-color:var(--pico-muted-color);margin-left:calc(var(--pico-outline-width) * -1);padding:calc(var(--pico-form-element-spacing-vertical) * .5) 0;padding-left:var(--pico-outline-width);border:0;border-radius:0;background:0 0}[type=file]::file-selector-button{margin-right:calc(var(--pico-spacing)/ 2);padding:calc(var(--pico-form-element-spacing-vertical) * .5) var(--pico-form-element-spacing-horizontal)}[type=file]:is(:hover,:active,:focus)::file-selector-button{--pico-background-color:var(--pico-secondary-hover-background);--pico-border-color:var(--pico-secondary-hover-border)}[type=file]:focus::file-selector-button{--pico-box-shadow:var(--pico-button-hover-box-shadow, 0 0 0 rgba(0, 0, 0, 0)),0 0 0 var(--pico-outline-width) var(--pico-secondary-focus)}[type=range]{-webkit-appearance:none;-moz-appearance:none;appearance:none;width:100%;height:1.25rem;background:0 0}[type=range]::-webkit-slider-runnable-track{width:100%;height:.375rem;border-radius:var(--pico-border-radius);background-color:var(--pico-range-border-color);-webkit-transition:background-color var(--pico-transition),box-shadow var(--pico-transition);transition:background-color var(--pico-transition),box-shadow var(--pico-transition)}[type=range]::-moz-range-track{width:100%;height:.375rem;border-radius:var(--pico-border-radius);background-color:var(--pico-range-border-color);-moz-transition:background-color var(--pico-transition),box-shadow var(--pico-transition);transition:background-color var(--pico-transition),box-shadow var(--pico-transition)}[type=range]::-ms-track{width:100%;height:.375rem;border-radius:var(--pico-border-radius);background-color:var(--pico-range-border-color);-ms-transition:background-color var(--pico-transition),box-shadow var(--pico-transition);transition:background-color var(--pico-transition),box-shadow var(--pico-transition)}[type=range]::-webkit-slider-thumb{-webkit-appearance:none;width:1.25rem;height:1.25rem;margin-top:-.4375rem;border:2px solid var(--pico-range-thumb-border-color);border-radius:50%;background-color:var(--pico-range-thumb-color);cursor:pointer;-webkit-transition:background-color var(--pico-transition),transform var(--pico-transition);transition:background-color var(--pico-transition),transform var(--pico-transition)}[type=range]::-moz-range-thumb{-webkit-appearance:none;width:1.25rem;height:1.25rem;margin-top:-.4375rem;border:2px solid var(--pico-range-thumb-border-color);border-radius:50%;background-color:var(--pico-range-thumb-color);cursor:pointer;-moz-transition:background-color var(--pico-transition),transform var(--pico-transition);transition:background-color var(--pico-transition),transform var(--pico-transition)}[type=range]::-ms-thumb{-webkit-appearance:none;width:1.25rem;height:1.25rem;margin-top:-.4375rem;border:2px solid var(--pico-range-thumb-border-color);border-radius:50%;background-color:var(--pico-range-thumb-color);cursor:pointer;-ms-transition:background-color var(--pico-transition),transform var(--pico-transition);transition:background-color var(--pico-transition),transform var(--pico-transition)}[type=range]:active,[type=range]:focus-within{--pico-range-border-color:var(--pico-range-active-border-color);--pico-range-thumb-color:var(--pico-range-thumb-active-color)}[type=range]:active::-webkit-slider-thumb{transform:scale(1.25)}[type=range]:active::-moz-range-thumb{transform:scale(1.25)}[type=range]:active::-ms-thumb{transform:scale(1.25)}input:not([type=checkbox],[type=radio],[type=range],[type=file])[type=search]{padding-inline-start:calc(var(--pico-form-element-spacing-horizontal) + 1.75rem);background-image:var(--pico-icon-search);background-position:center left calc(var(--pico-form-element-spacing-horizontal) + .125rem);background-size:1rem auto;background-repeat:no-repeat}input:not([type=checkbox],[type=radio],[type=range],[type=file])[type=search][aria-invalid]{padding-inline-start:calc(var(--pico-form-element-spacing-horizontal) + 1.75rem)!important;background-position:center left 1.125rem,center right .75rem}input:not([type=checkbox],[type=radio],[type=range],[type=file])[type=search][aria-invalid=false]{background-image:var(--pico-icon-search),var(--pico-icon-valid)}input:not([type=checkbox],[type=radio],[type=range],[type=file])[type=search][aria-invalid=true]{background-image:var(--pico-icon-search),var(--pico-icon-invalid)}[dir=rtl] :where(input):not([type=checkbox],[type=radio],[type=range],[type=file])[type=search]{background-position:center right 1.125rem}[dir=rtl] :where(input):not([type=checkbox],[type=radio],[type=range],[type=file])[type=search][aria-invalid]{background-position:center right 1.125rem,center left .75rem}details{display:block;margin-bottom:var(--pico-spacing)}details summary{line-height:1rem;list-style-type:none;cursor:pointer;transition:color var(--pico-transition)}details summary:not([role]){color:var(--pico-accordion-close-summary-color)}details summary::-webkit-details-marker{display:none}details summary::marker{display:none}details summary::-moz-list-bullet{list-style-type:none}details summary::after{display:block;width:1rem;height:1rem;margin-inline-start:calc(var(--pico-spacing,1rem) * .5);float:right;transform:rotate(-90deg);background-image:var(--pico-icon-chevron);background-position:right center;background-size:1rem auto;background-repeat:no-repeat;content:"";transition:transform var(--pico-transition)}details summary:focus{outline:0}details summary:focus:not([role]){color:var(--pico-accordion-active-summary-color)}details summary:focus-visible:not([role]){outline:var(--pico-outline-width) solid var(--pico-primary-focus);outline-offset:calc(var(--pico-spacing,1rem) * 0.5);color:var(--pico-primary)}details summary[role=button]{width:100%;text-align:left}details summary[role=button]::after{height:calc(1rem * var(--pico-line-height,1.5))}details[open]>summary{margin-bottom:var(--pico-spacing)}details[open]>summary:not([role]):not(:focus){color:var(--pico-accordion-open-summary-color)}details[open]>summary::after{transform:rotate(0)}[dir=rtl] details summary{text-align:right}[dir=rtl] details summary::after{float:left;background-position:left center}article{margin-bottom:var(--pico-block-spacing-vertical);padding:var(--pico-block-spacing-vertical) var(--pico-block-spacing-horizontal);border-radius:var(--pico-border-radius);background:var(--pico-card-background-color);box-shadow:var(--pico-card-box-shadow)}article>footer,article>header{margin-right:calc(var(--pico-block-spacing-horizontal) * -1);margin-left:calc(var(--pico-block-spacing-horizontal) * -1);padding:calc(var(--pico-block-spacing-vertical) * .66) var(--pico-block-spacing-horizontal);background-color:var(--pico-card-sectioning-background-color)}article>header{margin-top:calc(var(--pico-block-spacing-vertical) * -1);margin-bottom:var(--pico-block-spacing-vertical);border-bottom:var(--pico-border-width) solid var(--pico-card-border-color);border-top-right-radius:var(--pico-border-radius);border-top-left-radius:var(--pico-border-radius)}article>footer{margin-top:var(--pico-block-spacing-vertical);margin-bottom:calc(var(--pico-block-spacing-vertical) * -1);border-top:var(--pico-border-width) solid var(--pico-card-border-color);border-bottom-right-radius:var(--pico-border-radius);border-bottom-left-radius:var(--pico-border-radius)}details.dropdown{position:relative;border-bottom:none}details.dropdown>a::after,details.dropdown>button::after,details.dropdown>summary::after{display:block;width:1rem;height:calc(1rem * var(--pico-line-height,1.5));margin-inline-start:.25rem;float:right;transform:rotate(0) translateX(.2rem);background-image:var(--pico-icon-chevron);background-position:right center;background-size:1rem auto;background-repeat:no-repeat;content:""}nav details.dropdown{margin-bottom:0}details.dropdown>summary:not([role]){height:calc(1rem * var(--pico-line-height) + var(--pico-form-element-spacing-vertical) * 2 + var(--pico-border-width) * 2);padding:var(--pico-form-element-spacing-vertical) var(--pico-form-element-spacing-horizontal);border:var(--pico-border-width) solid var(--pico-form-element-border-color);border-radius:var(--pico-border-radius);background-color:var(--pico-form-element-background-color);color:var(--pico-form-element-placeholder-color);line-height:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;transition:background-color var(--pico-transition),border-color var(--pico-transition),color var(--pico-transition),box-shadow var(--pico-transition)}details.dropdown>summary:not([role]):active,details.dropdown>summary:not([role]):focus{border-color:var(--pico-form-element-active-border-color);background-color:var(--pico-form-element-active-background-color)}details.dropdown>summary:not([role]):focus{box-shadow:0 0 0 var(--pico-outline-width) var(--pico-form-element-focus-color)}details.dropdown>summary:not([role]):focus-visible{outline:0}details.dropdown>summary:not([role])[aria-invalid=false]{--pico-form-element-border-color:var(--pico-form-element-valid-border-color);--pico-form-element-active-border-color:var(--pico-form-element-valid-focus-color);--pico-form-element-focus-color:var(--pico-form-element-valid-focus-color)}details.dropdown>summary:not([role])[aria-invalid=true]{--pico-form-element-border-color:var(--pico-form-element-invalid-border-color);--pico-form-element-active-border-color:var(--pico-form-element-invalid-focus-color);--pico-form-element-focus-color:var(--pico-form-element-invalid-focus-color)}nav details.dropdown{display:inline;margin:calc(var(--pico-nav-element-spacing-vertical) * -1) 0}nav details.dropdown>summary::after{transform:rotate(0) translateX(0)}nav details.dropdown>summary:not([role]){height:calc(1rem * var(--pico-line-height) + var(--pico-nav-link-spacing-vertical) * 2);padding:calc(var(--pico-nav-link-spacing-vertical) - var(--pico-border-width) * 2) var(--pico-nav-link-spacing-horizontal)}nav details.dropdown>summary:not([role]):focus-visible{box-shadow:0 0 0 var(--pico-outline-width) var(--pico-primary-focus)}details.dropdown>summary+ul{display:flex;z-index:99;position:absolute;left:0;flex-direction:column;width:100%;min-width:-moz-fit-content;min-width:fit-content;margin:0;margin-top:var(--pico-outline-width);padding:0;border:var(--pico-border-width) solid var(--pico-dropdown-border-color);border-radius:var(--pico-border-radius);background-color:var(--pico-dropdown-background-color);box-shadow:var(--pico-dropdown-box-shadow);color:var(--pico-dropdown-color);white-space:nowrap;opacity:0;transition:opacity var(--pico-transition),transform 0s ease-in-out 1s}details.dropdown>summary+ul[dir=rtl]{right:0;left:auto}details.dropdown>summary+ul li{width:100%;margin-bottom:0;padding:calc(var(--pico-form-element-spacing-vertical) * .5) var(--pico-form-element-spacing-horizontal);list-style:none}details.dropdown>summary+ul li:first-of-type{margin-top:calc(var(--pico-form-element-spacing-vertical) * .5)}details.dropdown>summary+ul li:last-of-type{margin-bottom:calc(var(--pico-form-element-spacing-vertical) * .5)}details.dropdown>summary+ul li a{display:block;margin:calc(var(--pico-form-element-spacing-vertical) * -.5) calc(var(--pico-form-element-spacing-horizontal) * -1);padding:calc(var(--pico-form-element-spacing-vertical) * .5) var(--pico-form-element-spacing-horizontal);overflow:hidden;border-radius:0;color:var(--pico-dropdown-color);text-decoration:none;text-overflow:ellipsis}details.dropdown>summary+ul li a:active,details.dropdown>summary+ul li a:focus,details.dropdown>summary+ul li a:focus-visible,details.dropdown>summary+ul li a:hover,details.dropdown>summary+ul li a[aria-current]:not([aria-current=false]){background-color:var(--pico-dropdown-hover-background-color)}details.dropdown>summary+ul li label{width:100%}details.dropdown>summary+ul li:has(label):hover{background-color:var(--pico-dropdown-hover-background-color)}details.dropdown[open]>summary{margin-bottom:0}details.dropdown[open]>summary+ul{transform:scaleY(1);opacity:1;transition:opacity var(--pico-transition),transform 0s ease-in-out 0s}details.dropdown[open]>summary::before{display:block;z-index:1;position:fixed;width:100vw;height:100vh;inset:0;background:0 0;content:"";cursor:default}label>details.dropdown{margin-top:calc(var(--pico-spacing) * .25)}[role=group],[role=search]{display:inline-flex;position:relative;width:100%;margin-bottom:var(--pico-spacing);border-radius:var(--pico-border-radius);box-shadow:var(--pico-group-box-shadow,0 0 0 transparent);vertical-align:middle;transition:box-shadow var(--pico-transition)}[role=group] input:not([type=checkbox],[type=radio]),[role=group] select,[role=group]>*,[role=search] input:not([type=checkbox],[type=radio]),[role=search] select,[role=search]>*{position:relative;flex:1 1 auto;margin-bottom:0}[role=group] input:not([type=checkbox],[type=radio]):not(:first-child),[role=group] select:not(:first-child),[role=group]>:not(:first-child),[role=search] input:not([type=checkbox],[type=radio]):not(:first-child),[role=search] select:not(:first-child),[role=search]>:not(:first-child){margin-left:0;border-top-left-radius:0;border-bottom-left-radius:0}[role=group] input:not([type=checkbox],[type=radio]):not(:last-child),[role=group] select:not(:last-child),[role=group]>:not(:last-child),[role=search] input:not([type=checkbox],[type=radio]):not(:last-child),[role=search] select:not(:last-child),[role=search]>:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}[role=group] input:not([type=checkbox],[type=radio]):focus,[role=group] select:focus,[role=group]>:focus,[role=search] input:not([type=checkbox],[type=radio]):focus,[role=search] select:focus,[role=search]>:focus{z-index:2}[role=group] [role=button]:not(:first-child),[role=group] [type=button]:not(:first-child),[role=group] [type=reset]:not(:first-child),[role=group] [type=submit]:not(:first-child),[role=group] button:not(:first-child),[role=group] input:not([type=checkbox],[type=radio]):not(:first-child),[role=group] select:not(:first-child),[role=search] [role=button]:not(:first-child),[role=search] [type=button]:not(:first-child),[role=search] [type=reset]:not(:first-child),[role=search] [type=submit]:not(:first-child),[role=search] button:not(:first-child),[role=search] input:not([type=checkbox],[type=radio]):not(:first-child),[role=search] select:not(:first-child){margin-left:calc(var(--pico-border-width) * -1)}[role=group] [role=button],[role=group] [type=button],[role=group] [type=reset],[role=group] [type=submit],[role=group] button,[role=search] [role=button],[role=search] [type=button],[role=search] [type=reset],[role=search] [type=submit],[role=search] button{width:auto}@supports selector(:has(*)){[role=group]:has(button:focus,[type=submit]:focus,[type=button]:focus,[role=button]:focus),[role=search]:has(button:focus,[type=submit]:focus,[type=button]:focus,[role=button]:focus){--pico-group-box-shadow:var(--pico-group-box-shadow-focus-with-button)}[role=group]:has(button:focus,[type=submit]:focus,[type=button]:focus,[role=button]:focus) input:not([type=checkbox],[type=radio]),[role=group]:has(button:focus,[type=submit]:focus,[type=button]:focus,[role=button]:focus) select,[role=search]:has(button:focus,[type=submit]:focus,[type=button]:focus,[role=button]:focus) input:not([type=checkbox],[type=radio]),[role=search]:has(button:focus,[type=submit]:focus,[type=button]:focus,[role=button]:focus) select{border-color:transparent}[role=group]:has(input:not([type=submit],[type=button]):focus,select:focus),[role=search]:has(input:not([type=submit],[type=button]):focus,select:focus){--pico-group-box-shadow:var(--pico-group-box-shadow-focus-with-input)}[role=group]:has(input:not([type=submit],[type=button]):focus,select:focus) [role=button],[role=group]:has(input:not([type=submit],[type=button]):focus,select:focus) [type=button],[role=group]:has(input:not([type=submit],[type=button]):focus,select:focus) [type=submit],[role=group]:has(input:not([type=submit],[type=button]):focus,select:focus) button,[role=search]:has(input:not([type=submit],[type=button]):focus,select:focus) [role=button],[role=search]:has(input:not([type=submit],[type=button]):focus,select:focus) [type=button],[role=search]:has(input:not([type=submit],[type=button]):focus,select:focus) [type=submit],[role=search]:has(input:not([type=submit],[type=button]):focus,select:focus) button{--pico-button-box-shadow:0 0 0 var(--pico-border-width) var(--pico-primary-border);--pico-button-hover-box-shadow:0 0 0 var(--pico-border-width) var(--pico-primary-hover-border)}[role=group] [role=button]:focus,[role=group] [type=button]:focus,[role=group] [type=reset]:focus,[role=group] [type=submit]:focus,[role=group] button:focus,[role=search] [role=button]:focus,[role=search] [type=button]:focus,[role=search] [type=reset]:focus,[role=search] [type=submit]:focus,[role=search] button:focus{box-shadow:none}}[role=search]>:first-child{border-top-left-radius:5rem;border-bottom-left-radius:5rem}[role=search]>:last-child{border-top-right-radius:5rem;border-bottom-right-radius:5rem}[aria-busy=true]:not(input,select,textarea,html,form){white-space:nowrap}[aria-busy=true]:not(input,select,textarea,html,form)::before{display:inline-block;width:1em;height:1em;background-image:var(--pico-icon-loading);background-size:1em auto;background-repeat:no-repeat;content:"";vertical-align:-.125em}[aria-busy=true]:not(input,select,textarea,html,form):not(:empty)::before{margin-inline-end:calc(var(--pico-spacing) * .5)}[aria-busy=true]:not(input,select,textarea,html,form):empty{text-align:center}[role=button][aria-busy=true],[type=button][aria-busy=true],[type=reset][aria-busy=true],[type=submit][aria-busy=true],a[aria-busy=true],button[aria-busy=true]{pointer-events:none}:host,:root{--pico-scrollbar-width:0px}dialog{display:flex;z-index:999;position:fixed;top:0;right:0;bottom:0;left:0;align-items:center;justify-content:center;width:inherit;min-width:100%;height:inherit;min-height:100%;padding:0;border:0;-webkit-backdrop-filter:var(--pico-modal-overlay-backdrop-filter);backdrop-filter:var(--pico-modal-overlay-backdrop-filter);background-color:var(--pico-modal-overlay-background-color);color:var(--pico-color)}dialog>article{width:100%;max-height:calc(100vh - var(--pico-spacing) * 2);margin:var(--pico-spacing);overflow:auto}@media (min-width:576px){dialog>article{max-width:510px}}@media (min-width:768px){dialog>article{max-width:700px}}dialog>article>header>*{margin-bottom:0}dialog>article>header .close,dialog>article>header :is(a,button)[rel=prev]{margin:0;margin-left:var(--pico-spacing);padding:0;float:right}dialog>article>footer{text-align:right}dialog>article>footer [role=button],dialog>article>footer button{margin-bottom:0}dialog>article>footer [role=button]:not(:first-of-type),dialog>article>footer button:not(:first-of-type){margin-left:calc(var(--pico-spacing) * .5)}dialog>article .close,dialog>article :is(a,button)[rel=prev]{display:block;width:1rem;height:1rem;margin-top:calc(var(--pico-spacing) * -1);margin-bottom:var(--pico-spacing);margin-left:auto;border:none;background-image:var(--pico-icon-close);background-position:center;background-size:auto 1rem;background-repeat:no-repeat;background-color:transparent;opacity:.5;transition:opacity var(--pico-transition)}dialog>article .close:is([aria-current]:not([aria-current=false]),:hover,:active,:focus),dialog>article :is(a,button)[rel=prev]:is([aria-current]:not([aria-current=false]),:hover,:active,:focus){opacity:1}dialog:not([open]),dialog[open=false]{display:none}.modal-is-open{padding-right:var(--pico-scrollbar-width,0);overflow:hidden;pointer-events:none;touch-action:none}.modal-is-open dialog{pointer-events:auto;touch-action:auto}:where(.modal-is-opening,.modal-is-closing) dialog,:where(.modal-is-opening,.modal-is-closing) dialog>article{animation-duration:.2s;animation-timing-function:ease-in-out;animation-fill-mode:both}:where(.modal-is-opening,.modal-is-closing) dialog{animation-duration:.8s;animation-name:modal-overlay}:where(.modal-is-opening,.modal-is-closing) dialog>article{animation-delay:.2s;animation-name:modal}.modal-is-closing dialog,.modal-is-closing dialog>article{animation-delay:0s;animation-direction:reverse}@keyframes modal-overlay{from{-webkit-backdrop-filter:none;backdrop-filter:none;background-color:transparent}}@keyframes modal{from{transform:translateY(-100%);opacity:0}}:where(nav li)::before{float:left;content:"鈥?}nav,nav ul{display:flex}nav{justify-content:space-between;overflow:visible}nav ol,nav ul{align-items:center;margin-bottom:0;padding:0;list-style:none}nav ol:first-of-type,nav ul:first-of-type{margin-left:calc(var(--pico-nav-element-spacing-horizontal) * -1)}nav ol:last-of-type,nav ul:last-of-type{margin-right:calc(var(--pico-nav-element-spacing-horizontal) * -1)}nav li{display:inline-block;margin:0;padding:var(--pico-nav-element-spacing-vertical) var(--pico-nav-element-spacing-horizontal)}nav li :where(a,[role=link]){display:inline-block;margin:calc(var(--pico-nav-link-spacing-vertical) * -1) calc(var(--pico-nav-link-spacing-horizontal) * -1);padding:var(--pico-nav-link-spacing-vertical) var(--pico-nav-link-spacing-horizontal);border-radius:var(--pico-border-radius)}nav li :where(a,[role=link]):not(:hover){text-decoration:none}nav li [role=button],nav li [type=button],nav li button,nav li input:not([type=checkbox],[type=radio],[type=range],[type=file]),nav li select{height:auto;margin-right:inherit;margin-bottom:0;margin-left:inherit;padding:calc(var(--pico-nav-link-spacing-vertical) - var(--pico-border-width) * 2) var(--pico-nav-link-spacing-horizontal)}nav[aria-label=breadcrumb]{align-items:center;justify-content:start}nav[aria-label=breadcrumb] ul li:not(:first-child){margin-inline-start:var(--pico-nav-link-spacing-horizontal)}nav[aria-label=breadcrumb] ul li a{margin:calc(var(--pico-nav-link-spacing-vertical) * -1) 0;margin-inline-start:calc(var(--pico-nav-link-spacing-horizontal) * -1)}nav[aria-label=breadcrumb] ul li:not(:last-child)::after{display:inline-block;position:absolute;width:calc(var(--pico-nav-link-spacing-horizontal) * 4);margin:0 calc(var(--pico-nav-link-spacing-horizontal) * -1);content:var(--pico-nav-breadcrumb-divider);color:var(--pico-muted-color);text-align:center;text-decoration:none;white-space:nowrap}nav[aria-label=breadcrumb] a[aria-current]:not([aria-current=false]){background-color:transparent;color:inherit;text-decoration:none;pointer-events:none}aside li,aside nav,aside ol,aside ul{display:block}aside li{padding:calc(var(--pico-nav-element-spacing-vertical) * .5) var(--pico-nav-element-spacing-horizontal)}aside li a{display:block}aside li [role=button]{margin:inherit}[dir=rtl] nav[aria-label=breadcrumb] ul li:not(:last-child) ::after{content:"\\"}progress{display:inline-block;vertical-align:baseline}progress{-webkit-appearance:none;-moz-appearance:none;display:inline-block;appearance:none;width:100%;height:.5rem;margin-bottom:calc(var(--pico-spacing) * .5);overflow:hidden;border:0;border-radius:var(--pico-border-radius);background-color:var(--pico-progress-background-color);color:var(--pico-progress-color)}progress::-webkit-progress-bar{border-radius:var(--pico-border-radius);background:0 0}progress[value]::-webkit-progress-value{background-color:var(--pico-progress-color);-webkit-transition:inline-size var(--pico-transition);transition:inline-size var(--pico-transition)}progress::-moz-progress-bar{background-color:var(--pico-progress-color)}@media (prefers-reduced-motion:no-preference){progress:indeterminate{background:var(--pico-progress-background-color) linear-gradient(to right,var(--pico-progress-color) 30%,var(--pico-progress-background-color) 30%) top left/150% 150% no-repeat;animation:progress-indeterminate 1s linear infinite}progress:indeterminate[value]::-webkit-progress-value{background-color:transparent}progress:indeterminate::-moz-progress-bar{background-color:transparent}}@media (prefers-reduced-motion:no-preference){[dir=rtl] progress:indeterminate{animation-direction:reverse}}@keyframes progress-indeterminate{0%{background-position:200% 0}100%{background-position:-200% 0}}[data-tooltip]{position:relative}[data-tooltip]:not(a,button,input,[role=button]){border-bottom:1px dotted;text-decoration:none;cursor:help}[data-tooltip]::after,[data-tooltip]::before,[data-tooltip][data-placement=top]::after,[data-tooltip][data-placement=top]::before{display:block;z-index:99;position:absolute;bottom:100%;left:50%;padding:.25rem .5rem;overflow:hidden;transform:translate(-50%,-.25rem);border-radius:var(--pico-border-radius);background:var(--pico-tooltip-background-color);content:attr(data-tooltip);color:var(--pico-tooltip-color);font-style:normal;font-weight:var(--pico-font-weight);font-size:.875rem;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;opacity:0;pointer-events:none}[data-tooltip]::after,[data-tooltip][data-placement=top]::after{padding:0;transform:translate(-50%,0);border-top:.3rem solid;border-right:.3rem solid transparent;border-left:.3rem solid transparent;border-radius:0;background-color:transparent;content:"";color:var(--pico-tooltip-background-color)}[data-tooltip][data-placement=bottom]::after,[data-tooltip][data-placement=bottom]::before{top:100%;bottom:auto;transform:translate(-50%,.25rem)}[data-tooltip][data-placement=bottom]:after{transform:translate(-50%,-.3rem);border:.3rem solid transparent;border-bottom:.3rem solid}[data-tooltip][data-placement=left]::after,[data-tooltip][data-placement=left]::before{top:50%;right:100%;bottom:auto;left:auto;transform:translate(-.25rem,-50%)}[data-tooltip][data-placement=left]:after{transform:translate(.3rem,-50%);border:.3rem solid transparent;border-left:.3rem solid}[data-tooltip][data-placement=right]::after,[data-tooltip][data-placement=right]::before{top:50%;right:auto;bottom:auto;left:100%;transform:translate(.25rem,-50%)}[data-tooltip][data-placement=right]:after{transform:translate(-.3rem,-50%);border:.3rem solid transparent;border-right:.3rem solid}[data-tooltip]:focus::after,[data-tooltip]:focus::before,[data-tooltip]:hover::after,[data-tooltip]:hover::before{opacity:1}@media (hover:hover) and (pointer:fine){[data-tooltip]:focus::after,[data-tooltip]:focus::before,[data-tooltip]:hover::after,[data-tooltip]:hover::before{--pico-tooltip-slide-to:translate(-50%, -0.25rem);transform:translate(-50%,.75rem);animation-duration:.2s;animation-fill-mode:forwards;animation-name:tooltip-slide;opacity:0}[data-tooltip]:focus::after,[data-tooltip]:hover::after{--pico-tooltip-caret-slide-to:translate(-50%, 0rem);transform:translate(-50%,-.25rem);animation-name:tooltip-caret-slide}[data-tooltip][data-placement=bottom]:focus::after,[data-tooltip][data-placement=bottom]:focus::before,[data-tooltip][data-placement=bottom]:hover::after,[data-tooltip][data-placement=bottom]:hover::before{--pico-tooltip-slide-to:translate(-50%, 0.25rem);transform:translate(-50%,-.75rem);animation-name:tooltip-slide}[data-tooltip][data-placement=bottom]:focus::after,[data-tooltip][data-placement=bottom]:hover::after{--pico-tooltip-caret-slide-to:translate(-50%, -0.3rem);transform:translate(-50%,-.5rem);animation-name:tooltip-caret-slide}[data-tooltip][data-placement=left]:focus::after,[data-tooltip][data-placement=left]:focus::before,[data-tooltip][data-placement=left]:hover::after,[data-tooltip][data-placement=left]:hover::before{--pico-tooltip-slide-to:translate(-0.25rem, -50%);transform:translate(.75rem,-50%);animation-name:tooltip-slide}[data-tooltip][data-placement=left]:focus::after,[data-tooltip][data-placement=left]:hover::after{--pico-tooltip-caret-slide-to:translate(0.3rem, -50%);transform:translate(.05rem,-50%);animation-name:tooltip-caret-slide}[data-tooltip][data-placement=right]:focus::after,[data-tooltip][data-placement=right]:focus::before,[data-tooltip][data-placement=right]:hover::after,[data-tooltip][data-placement=right]:hover::before{--pico-tooltip-slide-to:translate(0.25rem, -50%);transform:translate(-.75rem,-50%);animation-name:tooltip-slide}[data-tooltip][data-placement=right]:focus::after,[data-tooltip][data-placement=right]:hover::after{--pico-tooltip-caret-slide-to:translate(-0.3rem, -50%);transform:translate(-.05rem,-50%);animation-name:tooltip-caret-slide}}@keyframes tooltip-slide{to{transform:var(--pico-tooltip-slide-to);opacity:1}}@keyframes tooltip-caret-slide{50%{opacity:0}to{transform:var(--pico-tooltip-caret-slide-to);opacity:1}}[aria-controls]{cursor:pointer}[aria-disabled=true],[disabled]{cursor:not-allowed}[aria-hidden=false][hidden]{display:initial}[aria-hidden=false][hidden]:not(:focus){clip:rect(0,0,0,0);position:absolute}[tabindex],a,area,button,input,label,select,summary,textarea{-ms-touch-action:manipulation}[dir=rtl]{direction:rtl}@media (prefers-reduced-motion:reduce){:not([aria-busy=true]),:not([aria-busy=true])::after,:not([aria-busy=true])::before{background-attachment:initial!important;animation-duration:1ms!important;animation-delay:-1ms!important;animation-iteration-count:1!important;scroll-behavior:auto!important;transition-delay:0s!important;transition-duration:0s!important}}
----------
.\src\main\resources\templates\layout.html:
<!DOCTYPE html>
<html lang="zh-CN"
      xmlns:th="http://www.thymeleaf.org"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title layout:title-pattern="$CONTENT_TITLE - $LAYOUT_TITLE">鏅烘収瀹胯垗鍒嗛厤绯荤粺</title>
    <link rel="stylesheet" th:href="@{/css/pico.min.css}">
    <style>
        :root {
            --pico-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
            --pico-block-spacing-vertical: 1.2rem;
            --pico-card-background-color: var(--pico-background-color);
            --pico-card-border-color: var(--pico-muted-border-color);
        }
        main { min-height: 75vh; }
        .error { color: var(--pico-form-element-invalid-border-color); font-size: 0.875rem; }
        .success { color: var(--pico-form-element-valid-border-color); }
        body > header {
            border-bottom: 1px solid var(--pico-muted-border-color);
            padding-bottom: 0.5rem;
        }
        /* Style for logout button inside dropdown */
        details[role="list"] ul li button {
            background: none;
            border: none;
            padding: 0.5rem 1rem;
            width: 100%;
            text-align: right;
            color: var(--pico-color);
            cursor: pointer;
        }
        details[role="list"] ul li button:hover {
            background-color: var(--pico-dropdown-hover-background-color);
        }
    </style>
</head>
<body data-theme="light">

<header class="container">
    <nav>
        <ul>
            <li><strong>鏅烘収瀹胯垗鍒嗛厤绯荤粺</strong></li>
        </ul>
        <ul>
            <li sec:authorize="isAuthenticated()">
                <details role="list" dir="rtl">
                    <summary aria-haspopup="listbox" role="button" class="secondary outline" sec:authentication="name"></summary>
                    <ul role="listbox">
                        <li>
                            <form th:action="@{/perform_logout}" method="post" style="margin: 0;">
                                <button type="submit">鐧诲嚭</button>
                            </form>
                        </li>
                    </ul>
                </details>
            </li>
        </ul>
    </nav>
</header>

<main class="container" layout:fragment="content">
    <!-- Page-specific content will be inserted here -->
</main>

<footer class="container" style="text-align: center; margin-top: 2rem; padding: 2rem 0; border-top: 1px solid var(--pico-muted-border-color);">
    <small>漏 2024 鏅烘収瀹胯垗鍒嗛厤绯荤粺. All rights reserved.</small>
</footer>

</body>
</html>
----------
.\src\main\resources\templates\login.html:
<!DOCTYPE html>
<html lang="zh-CN" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>绯荤粺鐧诲綍 - 鏅烘収瀹胯垗鍒嗛厤绯荤粺</title>
    <link rel="stylesheet" th:href="@{/css/pico.min.css}">
    <style>
        .error { color: var(--pico-form-element-invalid-border-color); font-size: 0.875rem; margin-top: -0.5rem; margin-bottom: 1rem; }
        .success { color: var(--pico-form-element-valid-border-color); }
    </style>
</head>
<body>
<main class="container" style="max-width: 480px; margin-top: 10vh;">
    <article>
        <h2 style="text-align: center;">鏅烘収瀹胯垗绯荤粺鐧诲綍</h2>

        <form th:action="@{/perform_login}" method="post">
            <p th:if="${param.error}" class="error">瀛﹀彿鎴栧瘑鐮侀敊璇紝璇烽噸璇曘€?/p>
            <p th:if="${param.logout}" class="success">鎮ㄥ凡鎴愬姛鐧诲嚭銆?/p>

            <label for="username">瀛﹀彿</label>
            <input type="text" id="username" name="username" placeholder="瀛﹀彿 / 绠＄悊鍛樿处鍙? required autofocus>

            <label for="password">瀵嗙爜</label>
            <input type="password" id="password" name="password" placeholder="瀵嗙爜" required>

            <button type="submit" style="width: 100%;">鐧诲綍</button>
        </form>
    </article>
</main>
</body>
</html>
----------
.\src\main\resources\templates\admin\dashboard.html:
<!-- src/main/resources/templates/admin/dashboard.html -->
<!DOCTYPE html>
<html lang="zh-CN"
      layout:decorate="~{layout}"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <title>绠＄悊鍛樹富闈㈡澘</title>
</head>
<body>

<section layout:fragment="content">
    <hgroup>
        <h2>绠＄悊鍛樹富闈㈡澘</h2>
        <h3>娆㈣繋鎮紝<span sec:authentication="name">Admin</span>锛佸湪杩欓噷绠＄悊鏁翠釜瀹胯垗鍒嗛厤娴佺▼銆?/h3>
    </hgroup>
    <div class="grid">
        <article>
            <!-- [淇敼] 娣诲姞浜嗘纭殑 th:href -->
            <h4><a th:href="@{/view/admin/cycles}" class="contrast">绠＄悊鍖归厤鍛ㄦ湡</a></h4>
            <p>鍒涘缓銆佹煡鐪嬨€侀厤缃棶鍗峰拰鍚姩鏂扮殑鍒嗛厤鍛ㄦ湡銆?/p>
            <!-- [淇敼] 娣诲姞浜嗘纭殑 th:href -->
            <footer><a th:href="@{/view/admin/cycles}" role="button">鍓嶅線绠＄悊</a></footer>
        </article>
        <article>
            <h4><a th:href="@{/view/admin/dorms/buildings}" class="contrast">绠＄悊瀹胯垗璧勬簮</a></h4>
            <p>澧炲垹鏀规煡妤兼爧銆佹埧闂村拰搴婁綅绛夌墿鐞嗚祫婧愩€?/p>
            <footer><a th:href="@{/view/admin/dorms/buildings}" role="button" class="secondary">鍓嶅線绠＄悊</a></footer>
        </article>
        <article>
            <h4><a href="#support" class="contrast">鏀寔涓庡唴瀹?/a></h4>
            <p>澶勭悊璋冨鐢宠銆佸彂甯冨績鐞嗗仴搴锋枃绔犵瓑銆?/p>
            <footer><a href="#support" role="button" class="contrast">鍓嶅線澶勭悊</a></footer>
        </article>
    </div>
</section>

</body>
</html>
----------
.\src\main\resources\templates\admin\cycle\cycle-form.html:
<!-- src/main/resources/templates/admin/cycle/cycle-form.html -->
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title th:text="${pageTitle}">鍛ㄦ湡琛ㄥ崟</title>
</head>
<body>
<section layout:fragment="content">
    <hgroup>
        <h2 th:text="${pageTitle}">鏂板缓/缂栬緫鍖归厤鍛ㄦ湡</h2>
        <h3>濉啓鍛ㄦ湡鐨勫熀鏈俊鎭€?/h3>
    </hgroup>

    <article>
        <!-- [鍏抽敭淇] 淇浜唗h:action鐨凾hymeleaf琛ㄨ揪寮忚娉?-->
        <form th:action="@{${cycleId == null ? '/view/admin/cycles/create' : '/view/admin/cycles/' + cycleId + '/update'}}"
              th:object="${cycleDto}"
              method="post">

            <label for="name">
                鍛ㄦ湡鍚嶇О
                <input type="text" id="name" th:field="*{name}" placeholder="渚嬪锛?024绾ф柊鐢熺瀛ｅ垎閰? required
                       th:aria-invalid="${#fields.hasErrors('name')} ? 'true' : 'false'">
                <small th:if="${#fields.hasErrors('name')}" th:errors="*{name}" class="error"></small>
            </label>

            <div class="grid">
                <label for="startDate">
                    寮€濮嬫棩鏈?(閫夊～)
                    <!-- Thymeleaf鏈熸湜鏃ユ湡鏍煎紡涓?yyyy-MM-dd -->
                    <input type="date" id="startDate" th:field="*{startDate}">
                </label>
                <label for="endDate">
                    缁撴潫鏃ユ湡 (閫夊～)
                    <input type="date" id="endDate" th:field="*{endDate}">
                </label>
            </div>

            <label for="status" th:if="${cycleId != null}">
                鐘舵€?
                <select id="status" th:field="*{status}">
                    <option value="DRAFT">鑽夌 (DRAFT)</option>
                    <option value="OPEN">寮€鏀?(OPEN)</option>
                    <option value="COMPLETED">瀹屾垚 (COMPLETED)</option>
                </select>
            </label>

            <div class="grid">
                <a th:href="@{/view/admin/cycles}" role="button" class="secondary outline">鍙栨秷</a>
                <button type="submit" th:text="${cycleId == null} ? '鍒涘缓鍛ㄦ湡' : '淇濆瓨鏇存敼'">鎻愪氦</button>
            </div>
        </form>
    </article>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\cycle\cycles-list.html:
<!-- src/main/resources/templates/admin/cycle/cycles-list.html -->
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title>鍖归厤鍛ㄦ湡绠＄悊</title>
</head>
<body>
<section layout:fragment="content">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <hgroup style="margin-bottom: 0;">
            <h2>鍖归厤鍛ㄦ湡绠＄悊</h2>
            <h3>鍒涘缓鍜岀鐞嗘墍鏈夊鑸嶅垎閰嶅懆鏈熴€?/h3>
        </hgroup>
        <a th:href="@{/view/admin/cycles/new}" role="button" style="margin-bottom: 1rem;">鏂板缓鍖归厤鍛ㄦ湡</a>
    </div>

    <div th:if="${successMessage}" class="success" th:text="${successMessage}" style="margin-bottom: 1rem;"></div>
    <div th:if="${errorMessage}" class="error" th:text="${errorMessage}" style="margin-bottom: 1rem;"></div>

    <figure>
        <table role="grid">
            <thead>
            <tr>
                <th scope="col">鍛ㄦ湡鍚嶇О</th>
                <th scope="col">鐘舵€?/th>
                <th scope="col">寮€濮嬫棩鏈?/th>
                <th scope="col">缁撴潫鏃ユ湡</th>
                <th scope="col" style="text-align: right;">鎿嶄綔</th>
            </tr>
            </thead>
            <tbody>
            <tr th:if="${#lists.isEmpty(cycles)}">
                <td colspan="5">鏆傛棤鍖归厤鍛ㄦ湡锛岃鍏堟柊寤恒€?/td>
            </tr>
            <tr th:each="cycle : ${cycles}">
                <td th:text="${cycle.name()}">2024绉嬪鏂扮敓</td>
                <td>
                    <span th:text="${cycle.status()}"
                          th:classappend="${cycle.status() == 'OPEN'} ? 'success' : (${cycle.status() == 'COMPLETED'} ? 'contrast' : '')"
                          style="padding: 0.2rem 0.5rem; border-radius: var(--pico-border-radius); font-weight: bold; font-size: 0.8em;"
                          th:styleappend="${cycle.status() == 'OPEN'} ? 'background-color: var(--pico-form-element-valid-border-color); color: white;' : (${cycle.status() == 'COMPLETED'} ? 'background-color: var(--pico-color-indigo-600); color: white;' : 'background-color: var(--pico-muted-border-color);')">
                    </span>
                </td>
                <td th:text="${cycle.startDate() != null} ? ${#temporals.format(cycle.startDate(), 'yyyy-MM-dd')} : '鏈缃?"></td>
                <td th:text="${cycle.endDate() != null} ? ${#temporals.format(cycle.endDate(), 'yyyy-MM-dd')} : '鏈缃?"></td>
                <td style="text-align: right;">
                    <div role="group">
                        <a th:href="@{/view/admin/cycles/{id}/dimensions(id=${cycle.id()})}" role="button">闂嵎绠＄悊</a>
                        <a th:href="@{/view/admin/cycles/{id}/edit(id=${cycle.id()})}" role="button" class="secondary outline">缂栬緫</a>
                        <form th:action="@{/view/admin/cycles/{id}/delete(id=${cycle.id()})}" method="post" style="display: inline;" onsubmit="return confirm('纭畾瑕佸垹闄ゆ鍛ㄦ湡鍚楋紵姝ゆ搷浣滀笉鍙仮澶嶃€?);" th:if="${cycle.status() == 'DRAFT'}">
                            <button type="submit" class="contrast outline">鍒犻櫎</button>
                        </form>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
    </figure>
    <a th:href="@{/view/admin/dashboard}">鈫?杩斿洖涓婚潰鏉?/a>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\cycle\dimension-form.html:
<!-- src/main/resources/templates/admin/cycle/dimension-form.html -->
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title th:text="${pageTitle}">缁村害琛ㄥ崟</title>
    <style>
        .option-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 1rem;
            align-items: end;
        }
    </style>
</head>
<body>
<section layout:fragment="content">
    <div th:replace="~{admin/cycle/_cycle-nav :: subnav(cycleId=${cycle.id()}, activeTab='dimensions')}"></div>
    <hgroup>
        <!-- [淇敼] 鍔ㄦ€佹樉绀哄懆鏈熷悕绉?-->
        <h2 th:text="${pageTitle} + ' for ' + ${cycle.name()}">鏂板缓闂嵎缁村害</h2>
        <h3>璁捐涓€涓棶鍗烽棶棰橈紝鍖呮嫭鍏剁被鍨嬨€佹潈閲嶅拰閫夐」銆?/h3>
    </hgroup>

    <article>
        <!-- 琛ㄥ崟 action 涓殑 cycleId 搴旇鐢?cycle.id() -->
        <form th:action="@{/view/admin/cycles/{id}/dimensions/create(id=${cycle.id()})}"
              th:object="${dimensionDto}"
              method="post">

            <!-- 鍏朵粬琛ㄥ崟鍐呭淇濇寔涓嶅彉... -->
            <div class="grid">
                <label for="prompt">
                    闂/鎻愮ず璇?
                    <input type="text" id="prompt" th:field="*{prompt}" placeholder="渚嬪锛氫綘鐨勪綔鎭範鎯槸锛? required
                           th:aria-invalid="${#fields.hasErrors('prompt')} ? 'true' : 'false'">
                    <small th:if="${#fields.hasErrors('prompt')}" th:errors="*{prompt}" class="error"></small>
                </label>
                <label for="dimensionKey">
                    鍞竴鏍囪瘑 (Key)
                    <input type="text" id="dimensionKey" th:field="*{dimensionKey}" placeholder="渚嬪锛歳est_habit" required
                           th:aria-invalid="${#fields.hasErrors('dimensionKey')} ? 'true' : 'false'">
                    <small th:if="${#fields.hasErrors('dimensionKey')}" th:errors="*{dimensionKey}" class="error"></small>
                </label>
            </div>

            <div class="grid">
                <label for="dimensionType">
                    缁村害鐢ㄩ€?
                    <select id="dimensionType" th:field="*{dimensionType}">
                        <option value="SOFT_FACTOR">杞€у尮閰嶅洜瀛?(鐢ㄤ簬璁＄畻鐩镐技搴?</option>
                        <option value="HARD_FILTER">纭€х瓫閫夋潯浠?(鐢ㄤ簬鍒嗙粍)</option>
                    </select>
                </label>
                <label for="responseType">
                    鍥炵瓟绫诲瀷
                    <select id="responseType" th:field="*{responseType}">
                        <option value="SINGLE_CHOICE">鍗曢€?/option>
                        <option value="SCALE">閲忚〃 (1-5鍒?</option>
                        <option value="COMPOSITE" disabled>澶嶅悎缁村害 (鏆備笉鏀寔)</option>
                    </select>
                </label>
                <label for="weight">
                    鏉冮噸
                    <input type="number" step="0.1" id="weight" th:field="*{weight}" required>
                </label>
            </div>

            <hr>
            <h5>闂閫夐」璁剧疆 (璇疯嚦灏戝～鍐欏墠涓や釜)</h5>
            <div th:each="option, iterStat : *{options}" class="grid">
                <label th:for="${'optionText' + iterStat.index}">
                    閫夐」 [[${iterStat.count}]] 鎻忚堪
                    <input type="text" th:id="${'optionText' + iterStat.index}" th:field="*{options[__${iterStat.index}__].optionText}" placeholder="閫夐」鎻忚堪">
                </label>
                <label th:for="${'optionValue' + iterStat.index}">
                    鍒嗗€?
                    <input type="number" step="0.1" th:id="${'optionValue' + iterStat.index}" th:field="*{options[__${iterStat.index}__].optionValue}">
                </label>
            </div>
            <small th:if="${#fields.hasGlobalErrors()}" th:errors="*{}" class="error"></small>
            <small th:if="${#fields.hasErrors('options')}" th:errors="*{options}" class="error"></small>

            <label for="reverseScored">
                <input type="checkbox" id="reverseScored" th:field="*{reverseScored}">
                鏄惁鍙嶅悜璁″垎 (閫変腑鍚庯紝楂樺垎琛ㄧず璐熷悜)
            </label>

            <div class="grid">
                <a th:href="@{/view/admin/cycles/{id}/dimensions(id=${cycle.id()})}" role="button" class="secondary outline">鍙栨秷</a>
                <button type="submit">鍒涘缓缁村害</button>
            </div>
        </form>
    </article>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\cycle\dimensions-list.html:
<!-- src/main/resources/templates/admin/cycle/dimensions-list.html -->
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title>闂嵎绠＄悊 - [[${cycle.name()}]]</title>
</head>
<body>
<section layout:fragment="content">
    <div th:replace="~{admin/cycle/_cycle-nav :: subnav(cycleId=${cycle.id()}, activeTab='dimensions')}"></div>
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <hgroup style="margin-bottom: 0;">
            <h2>闂嵎缁村害绠＄悊: [[${cycle.name()}]]</h2>
            <h3>鍦ㄦ涓哄懆鏈熻璁￠棶鍗烽棶棰橈紙缁村害锛夈€?/h3>
        </hgroup>
        <a th:href="@{/view/admin/cycles/{id}/dimensions/new(id=${cycle.id()})}" role="button" style="margin-bottom: 1rem;">鏂板缁村害</a>
    </div>

    <div th:if="${successMessage}" class="success" th:text="${successMessage}" style="margin-bottom: 1rem;"></div>
    <div th:if="${errorMessage}" class="error" th:text="${errorMessage}" style="margin-bottom: 1rem;"></div>

    <figure>
        <table role="grid">
            <thead>
            <tr>
                <th scope="col">闂/鎻愮ず</th>
                <th scope="col">Key</th>
                <th scope="col">绫诲瀷</th>
                <th scope="col">鏉冮噸</th>
                <th scope="col" style="text-align: right;">鎿嶄綔</th>
            </tr>
            </thead>
            <tbody>
            <tr th:if="${#lists.isEmpty(dimensions)}">
                <td colspan="5">璇ュ懆鏈熸殏鏃犻棶鍗风淮搴︼紝璇峰厛鏂板銆?/td>
            </tr>
            <tr th:each="dim : ${dimensions}">
                <td th:text="${dim.prompt()}"></td>
                <td><code th:text="${dim.dimensionKey()}"></code></td>
                <td th:text="${dim.dimensionType()}"></td>
                <td th:text="${dim.weight()}"></td>
                <td style="text-align: right;">
                    <div role="group">
                        <a href="#" role="button" class="secondary outline">缂栬緫</a>
                        <form action="#" method="post" style="display: inline;" onsubmit="return confirm('纭畾瑕佸垹闄ゆ缁村害鍚楋紵');">
                            <button type="submit" class="contrast outline">鍒犻櫎</button>
                        </form>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
    </figure>
    <a th:href="@{/view/admin/cycles}">鈫?杩斿洖鍛ㄦ湡鍒楄〃</a>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\cycle\_cycle-nav.html:
<!-- src/main/resources/templates/admin/cycle/_cycle-nav.html -->
<!DOCTYPE html>
<html lang="zh-CN" xmlns:th="http://www.thymeleaf.org">
<body>
<nav th:fragment="subnav(cycleId, activeTab)" aria-label="breadcrumb">
    <ul>
        <li>
            <a th:href="@{/view/admin/cycles/{id}/dimensions(id=${cycleId})}"
               th:aria-current="${activeTab == 'dimensions' ? 'page' : null}">
                闂嵎缁村害绠＄悊
            </a>
        </li>
        <li>
            <a href="#" th:aria-current="${activeTab == 'results' ? 'page' : null}">
                鍒嗛厤缁撴灉
            </a>
        </li>
        <li>
            <a href="#" th:aria-current="${activeTab == 'report' ? 'page' : null}">
                璐ㄩ噺鎶ュ憡
            </a>
        </li>
    </ul>
</nav>
</body>
</html>
----------
.\src\main\resources\templates\admin\dorm\building-form.html:
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title th:text="${pageTitle}">妤兼爧琛ㄥ崟</title>
</head>
<body>
<section layout:fragment="content">
    <hgroup>
        <h2 th:text="${pageTitle}">鏂板缓/缂栬緫妤兼爧</h2>
        <h3 th:text="${buildingId == null} ? '鍒涘缓涓€涓柊鐨勫鑸嶆ゼ銆? : '淇敼鐜版湁瀹胯垗妤肩殑淇℃伅銆?"></h3>
    </hgroup>

    <article>
        <form th:action="${buildingId == null} ? @{/view/admin/dorms/buildings/create} : @{/view/admin/dorms/buildings/{id}/update(id=${buildingId})}"
              th:object="${buildingDto}"
              method="post">

            <label for="name">
                妤兼爧鍚嶇О
                <input type="text" id="name" th:field="*{name}" placeholder="渚嬪锛氱传鑽?鍙锋ゼ" required
                       th:aria-invalid="${#fields.hasErrors('name')} ? 'true' : 'false'">
                <small th:if="${#fields.hasErrors('name')}" th:errors="*{name}" class="error"></small>
            </label>

            <div class="grid">
                <a th:href="@{/view/admin/dorms/buildings}" role="button" class="secondary outline">鍙栨秷</a>
                <button type="submit" th:text="${buildingId == null} ? '鍒涘缓妤兼爧' : '淇濆瓨鏇存敼'">鎻愪氦</button>
            </div>
        </form>
    </article>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\dorm\buildings-list.html:
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title>妤兼爧璧勬簮绠＄悊</title>
</head>
<body>
<section layout:fragment="content">
    <div th:replace="~{admin/dorm/_dorm-nav :: subnav(activeTab='buildings')}"></div>
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <hgroup style="margin-bottom: 0;">
            <h2>妤兼爧璧勬簮绠＄悊</h2>
            <h3>绠＄悊鏍″洯鍐呯殑鎵€鏈夊鑸嶆ゼ銆?/h3>
        </hgroup>
        <a th:href="@{/view/admin/dorms/buildings/new}" role="button" style="margin-bottom: 1rem;">鏂板缓妤兼爧</a>
    </div>

    <!-- Success/Error Messages -->
    <div th:if="${successMessage}" class="success" th:text="${successMessage}" style="margin-bottom: 1rem;"></div>
    <div th:if="${errorMessage}" class="error" th:text="${errorMessage}" style="margin-bottom: 1rem;"></div>

    <figure>
        <table role="grid">
            <thead>
            <tr>
                <th scope="col">妤兼爧鍚嶇О</th>
                <th scope="col" style="text-align: right;">鎿嶄綔</th>
            </tr>
            </thead>
            <tbody>
            <tr th:if="${#lists.isEmpty(buildings)}">
                <td colspan="2">鏆傛棤妤兼爧淇℃伅锛岃鍏堟柊寤恒€?/td>
            </tr>
            <tr th:each="building : ${buildings}">
                <td th:text="${building.name()}">绱崋1鍙锋ゼ</td>
                <td style="text-align: right;">
                    <div role="group">
                        <a th:href="@{/view/admin/dorms/buildings/{id}/edit(id=${building.id()})}" role="button" class="secondary outline">缂栬緫</a>
                        <form th:action="@{/view/admin/dorms/buildings/{id}/delete(id=${building.id()})}" method="post" style="display: inline;" onsubmit="return confirm('纭畾瑕佸垹闄ゆ妤兼爧鍚楋紵鍏朵笅鐨勬埧闂村拰搴婁綅涔熷皢琚垹闄ゃ€?);">
                            <button type="submit" class="contrast outline">鍒犻櫎</button>
                        </form>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
    </figure>
    <a th:href="@{/view/admin/dashboard}">鈫?杩斿洖涓婚潰鏉?/a>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\dorm\room-details.html:
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title>鎴块棿璇︽儏 - [[${room.buildingName()}]] [[${room.roomNumber()}]]</title>
</head>
<body>
<section layout:fragment="content">
    <div th:replace="~{admin/dorm/_dorm-nav :: subnav(activeTab='rooms')}"></div>

    <div style="display: flex; justify-content: space-between; align-items: center;">
        <hgroup style="margin-bottom: 0;">
            <h2>鎴块棿璇︽儏: [[${room.buildingName()}]] - [[${room.roomNumber()}]]</h2>
            <h3>绠＄悊璇ユ埧闂翠笅鐨勬墍鏈夊簥浣嶃€?/h3>
        </hgroup>
    </div>

    <!-- Success/Error Messages -->
    <div th:if="${successMessage}" class="success" th:text="${successMessage}" style="margin-bottom: 1rem;"></div>
    <div th:if="${errorMessage}" class="error" th:text="${errorMessage}" style="margin-bottom: 1rem;"></div>

    <div class="grid">
        <!-- 搴婁綅鍒楄〃 -->
        <article>
            <h4 style="margin-bottom: 1rem;">搴婁綅鍒楄〃 ([[${#lists.size(beds)}]] / [[${room.capacity()}]])</h4>
            <div th:if="${#lists.isEmpty(beds)}">
                <p>姝ゆ埧闂存殏鏃犲簥浣嶃€?/p>
            </div>
            <div th:unless="${#lists.isEmpty(beds)}">
                <table role="grid">
                    <thead>
                    <tr>
                        <th>搴婁綅鍙?/th>
                        <th style="text-align: right;">鎿嶄綔</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr th:each="bed : ${beds}">
                        <td th:text="${bed.bedNumber()} + ' 鍙峰簥'">1 鍙峰簥</td>
                        <td style="text-align: right;">
                            <form th:id="'deleteForm-' + ${bed.id()}" th:action="@{/view/admin/dorms/beds/{bedId}/delete(bedId=${bed.id()})}" method="post" style="display: inline;">
                                <input type="hidden" name="roomId" th:value="${room.id()}"/>

                                <!--
                                    鍏抽敭淇:
                                    1. 鎴戜滑灏嗙‘璁ら€昏緫绉诲埌浜?<button> 鐨?th:onclick 浜嬩欢涓€?
                                    2. 浣跨敤 |...| 绗﹀彿杩涜瀛楃涓叉嫾鎺ワ紝杩欐槸Thymeleaf鐨勫瓧闈㈤噺鏇挎崲(Literal Substitution)銆?
                                    3. 浣跨敤 [[...]] 杩涜JavaScript鍐呰仈锛岀‘淇濆彉閲忚姝ｇ‘娓叉煋涓篔S浠ｇ爜鐨勪竴閮ㄥ垎銆?
                                    4. onclick 杩斿洖 false 鏃讹紝灏嗛樆姝㈣〃鍗曠殑榛樿鎻愪氦琛屼负銆?
                                -->
                                <button type="button"
                                        th:onclick="|if(confirm('纭畾瑕佸垹闄?' + [[${bed.bedNumber()}]] + ' 鍙峰簥鍚楋紵')) document.getElementById('deleteForm-' + [[${bed.id()}]].toString()).submit();|"
                                        class="contrast outline" style="padding: 0.25rem 0.5rem; font-size: 0.875rem;">
                                    鍒犻櫎
                                </button>
                            </form>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </article>

        <!-- 鎵归噺娣诲姞搴婁綅 -->
        <article>
            <h4>鎵归噺娣诲姞搴婁綅</h4>
            <form th:action="@{/view/admin/dorms/rooms/{roomId}/beds/create-batch(roomId=${room.id()})}"
                  th:object="${bedCreateDto}"
                  method="post">
                <p>绯荤粺灏嗚嚜鍔ㄤ粠褰撳墠鏈€澶у簥浣嶅彿寮€濮嬶紝杩炵画鍒涘缓鎸囧畾鏁伴噺鐨勫簥浣嶃€?/p>
                <label for="bedCount">
                    娣诲姞鏁伴噺
                    <input type="number" id="bedCount" name="bedCount" th:field="*{bedCount}" min="1" required
                           th:aria-invalid="${#fields.hasErrors('bedCount')} ? 'true' : 'false'">
                    <small th:if="${#fields.hasErrors('bedCount')}" th:errors="*{bedCount}" class="error"></small>
                </label>
                <button type="submit">纭娣诲姞</button>
            </form>
        </article>
    </div>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\dorm\room-form.html:
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title th:text="${pageTitle}">鎴块棿琛ㄥ崟</title>
</head>
<body>
<section layout:fragment="content">
    <hgroup>
        <h2 th:text="${pageTitle}">鏂板缓/缂栬緫鎴块棿</h2>
        <h3 th:text="${roomId == null} ? '鍒涘缓涓€涓柊鐨勬埧闂淬€? : '淇敼鐜版湁鎴块棿鐨勪俊鎭€?"></h3>
    </hgroup>

    <article>
        <form th:action="${roomId == null} ? @{/view/admin/dorms/rooms/create} : @{/view/admin/dorms/rooms/{id}/update(id=${roomId})}"
              th:object="${roomDto}"
              method="post">

            <label for="buildingId">
                鎵€灞炴ゼ鏍?
                <select id="buildingId" th:field="*{buildingId}" required
                        th:aria-invalid="${#fields.hasErrors('buildingId')} ? 'true' : 'false'">
                    <option value="">璇烽€夋嫨涓€涓ゼ鏍?/option>
                    <option th:each="building : ${buildings}"
                            th:value="${building.id()}"
                            th:text="${building.name()}"></option>
                </select>
                <small th:if="${#fields.hasErrors('buildingId')}" th:errors="*{buildingId}" class="error"></small>
            </label>

            <div class="grid">
                <label for="roomNumber">
                    鎴块棿鍙?
                    <input type="text" id="roomNumber" th:field="*{roomNumber}" placeholder="渚嬪: 301, 402B" required
                           th:aria-invalid="${#fields.hasErrors('roomNumber')} ? 'true' : 'false'">
                    <small th:if="${#fields.hasErrors('roomNumber')}" th:errors="*{roomNumber}" class="error"></small>
                </label>
                <label for="capacity">
                    瀹归噺
                    <input type="number" id="capacity" th:field="*{capacity}" min="1" required
                           th:aria-invalid="${#fields.hasErrors('capacity')} ? 'true' : 'false'">
                    <small th:if="${#fields.hasErrors('capacity')}" th:errors="*{capacity}" class="error"></small>
                </label>
            </div>

            <fieldset>
                <legend>鎬у埆绫诲瀷</legend>
                <label for="male">
                    <input type="radio" id="male" th:field="*{genderType}" value="MALE">
                    鐢?
                </label>
                <label for="female">
                    <input type="radio" id="female" th:field="*{genderType}" value="FEMALE">
                    濂?
                </label>
            </fieldset>

            <div class="grid">
                <a th:href="@{/view/admin/dorms/rooms}" role="button" class="secondary outline">鍙栨秷</a>
                <button type="submit" th:text="${roomId == null} ? '鍒涘缓鎴块棿' : '淇濆瓨鏇存敼'">鎻愪氦</button>
            </div>
        </form>
    </article>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\dorm\rooms-list.html:
<!DOCTYPE html>
<html lang="zh-CN" layout:decorate="~{layout}" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">
<head>
    <title>鎴块棿璧勬簮绠＄悊</title>
</head>
<body>
<section layout:fragment="content">
    <div th:replace="~{admin/dorm/_dorm-nav :: subnav(activeTab='rooms')}"></div>

    <div style="display: flex; justify-content: space-between; align-items: center;">
        <hgroup style="margin-bottom: 0;">
            <h2>鎴块棿璧勬簮绠＄悊</h2>
            <h3>绠＄悊鎵€鏈夋ゼ鏍嬪唴鐨勬埧闂翠俊鎭€?/h3>
        </hgroup>
        <a th:href="@{/view/admin/dorms/rooms/new}" role="button" style="margin-bottom: 1rem;">鏂板缓鎴块棿</a>
    </div>

    <!-- Success/Error Messages -->
    <div th:if="${successMessage}" class="success" th:text="${successMessage}" style="margin-bottom: 1rem;"></div>
    <div th:if="${errorMessage}" class="error" th:text="${errorMessage}" style="margin-bottom: 1rem;"></div>

    <!-- Filter Form -->
    <form th:action="@{/view/admin/dorms/rooms}" method="get" class="grid">
        <select id="buildingId" name="buildingId" onchange="this.form.submit()">
            <option value="">鎵€鏈夋ゼ鏍?/option>
            <option th:each="building : ${buildings}"
                    th:value="${building.id()}"
                    th:text="${building.name()}"
                    th:selected="${building.id().equals(selectedBuildingId)}">
            </option>
        </select>
        <a th:href="@{/view/admin/dorms/rooms}" role="button" class="secondary outline">娓呴櫎绛涢€?/a>
    </form>


    <figure>
        <table role="grid">
            <thead>
            <tr>
                <th scope="col">鎴块棿鍙?/th>
                <th scope="col">鎵€灞炴ゼ鏍?/th>
                <th scope="col">瀹归噺</th>
                <th scope="col">鎬у埆绫诲瀷</th>
                <th scope="col" style="text-align: right;">鎿嶄綔</th>
            </tr>
            </thead>
            <tbody>
            <tr th:if="${#lists.isEmpty(roomDetails)}">
                <td colspan="5">鏆傛棤鎴块棿淇℃伅锛屾垨褰撳墠绛涢€夋潯浠朵笅鏃犵粨鏋溿€?/td>
            </tr>
            <tr th:each="room : ${roomDetails}">
                <td th:text="${room.roomNumber()}">101</td>
                <td th:text="${room.buildingName()}">绱崋1鍙锋ゼ</td>
                <td th:text="${room.capacity()}">4</td>
                <td th:text="${room.genderType() == 'MALE' ? '鐢? : '濂?}">鐢?/td>
                <td style="text-align: right;">
                    <div role="group">
                        <a th:href="@{/view/admin/dorms/rooms/{id}/details(id=${room.id()})}" role="button">搴婁綅绠＄悊</a>
                        <a th:href="@{/view/admin/dorms/rooms/{id}/edit(id=${room.id()})}" role="button" class="secondary outline">缂栬緫</a>
                        <form th:action="@{/view/admin/dorms/rooms/{id}/delete(id=${room.id()})}" method="post" style="display: inline;" onsubmit="return confirm('纭畾瑕佸垹闄ゆ鎴块棿鍚楋紵');">
                            <button type="submit" class="contrast outline">鍒犻櫎</button>
                        </form>
                    </div>
                </td>
            </tr>
            </tbody>
        </table>
    </figure>
    <a th:href="@{/view/admin/dashboard}">鈫?杩斿洖涓婚潰鏉?/a>
</section>
</body>
</html>
----------
.\src\main\resources\templates\admin\dorm\_dorm-nav.html:
<!DOCTYPE html>
<html lang="zh-CN" xmlns:th="http://www.thymeleaf.org">
<body>

<!-- 杩欎釜鐗囨灏嗚鍖呭惈鍦ㄦ墍鏈夊鑸嶈祫婧愮鐞嗙殑椤甸潰涓?-->
<nav th:fragment="subnav(activeTab)" aria-label="breadcrumb">
    <ul>
        <li>
            <a th:href="@{/view/admin/dorms/buildings}"
               th:aria-current="${activeTab == 'buildings' ? 'page' : null}">
                妤兼爧绠＄悊
            </a>
        </li>
        <li>
            <a th:href="@{/view/admin/dorms/rooms}"
               th:aria-current="${activeTab == 'rooms' ? 'page' : null}">
                鎴块棿绠＄悊
            </a>
        </li>
    </ul>
</nav>

</body>
</html>
----------
.\src\main\resources\templates\student\dashboard.html:
<!DOCTYPE html>
<html lang="zh-CN"
      layout:decorate="~{layout}"
      xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <title>瀛︾敓涓婚潰鏉?/title>
</head>
<body>

<section layout:fragment="content">
    <hgroup>
        <h2>瀛︾敓涓婚潰鏉?/h2>
        <h3>娆㈣繋浣狅紝<span sec:authentication="name">Student</span>鍚屽锛?/h3>
    </hgroup>

    <!-- Example of conditional content -->
    <!--
    <div th:if="${isSurveyOpen}">
        <article>
            <h4>鏂扮殑鍒嗛厤闂嵎宸插紑鏀撅紒</h4>
            <p>璇峰湪鎴鏃ユ湡鍓嶅畬鎴愪釜浜哄亸濂介棶鍗风殑濉啓銆?/p>
            <footer><a href="/view/student/survey" role="button">绔嬪嵆濉啓</a></footer>
        </article>
    </div>
    -->

    <div class="grid">
        <article>
            <h4><a href="#survey" class="contrast">濉啓鍋忓ソ闂嵎</a></h4>
            <p>鍦ㄥ垎閰嶅懆鏈熷唴锛屽～鍐欏苟鎻愪氦浣犵殑涓汉鍋忓ソ銆?/p>
            <footer><a href="#survey" role="button">鏌ョ湅闂嵎</a></footer>
        </article>
        <article>
            <h4><a href="#result" class="contrast">鏌ョ湅鍒嗛厤缁撴灉</a></h4>
            <p>鍦ㄧ粨鏋滃叕甯冨悗锛屾煡鐪嬩綘鐨勫鑸嶅拰瀹ゅ弸淇℃伅銆?/p>
            <footer><a href="#result" role="button" class="secondary">鏌ョ湅缁撴灉</a></footer>
        </article>
        <article>
            <h4><a href="#support" class="contrast">瀵绘眰甯姪</a></h4>
            <p>鎻愪氦鍏ヤ綇鍙嶉銆佺敵璇疯皟瀹挎垨娴忚鏀寔鏂囩珷銆?/p>
            <footer><a href="#support" role="button" class="contrast">娴忚鍐呭</a></footer>
        </article>
    </div>
</section>

</body>
</html>
----------
.\src\test\java\com\smartdorm\backend\controller\AdminCycleViewControllerTest.java:
// src/test/java/com/smartdorm/backend/controller/AdminCycleViewControllerTest.java
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.CycleDtos;
import com.smartdorm.backend.service.CycleManagementService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.Instant;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@DisplayName("TDD for AdminCycleViewController")
@WithMockUser(roles = "ADMIN") // Apply to all tests in this class
public class AdminCycleViewControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private CycleManagementService cycleService;

    @Test
    @DisplayName("GET /view/admin/cycles - Should return list of cycles")
    void whenListCycles_thenReturnsListView() throws Exception {
        when(cycleService.getAllCycles()).thenReturn(Collections.emptyList());

        mockMvc.perform(get("/view/admin/cycles"))
                .andExpect(status().isOk())
                .andExpect(view().name("admin/cycle/cycles-list"))
                .andExpect(model().attributeExists("cycles"));
    }

    @Test
    @DisplayName("POST /view/admin/cycles/create - Should create cycle and redirect")
    void whenCreateCycle_thenRedirects() throws Exception {
        CycleDtos.MatchingCycleCreateDto createDto = new CycleDtos.MatchingCycleCreateDto("Test Cycle", Instant.now(), Instant.now());
        when(cycleService.createCycle(any())).thenReturn(new CycleDtos.MatchingCycleDto(UUID.randomUUID(), "Test Cycle", null, null, "DRAFT"));

        mockMvc.perform(post("/view/admin/cycles/create")
                        .flashAttr("cycleDto", createDto)
                        .with(csrf()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/view/admin/cycles"))
                .andExpect(flash().attributeExists("successMessage"));

        verify(cycleService, times(1)).createCycle(any(CycleDtos.MatchingCycleCreateDto.class));
    }

    @Test
    @DisplayName("GET /view/admin/cycles/{id}/dimensions - Should return dimensions list for a cycle")
    void whenListDimensions_thenReturnsDimensionsView() throws Exception {
        UUID cycleId = UUID.randomUUID();
        CycleDtos.MatchingCycleDto mockCycle = new CycleDtos.MatchingCycleDto(cycleId, "Test Cycle", null, null, "DRAFT");
        List<CycleDtos.SurveyDimensionDto> mockDimensions = Collections.emptyList();

        when(cycleService.getCycleById(cycleId)).thenReturn(mockCycle);
        when(cycleService.getDimensionsForCycle(cycleId)).thenReturn(mockDimensions);

        mockMvc.perform(get("/view/admin/cycles/" + cycleId + "/dimensions"))
                .andExpect(status().isOk())
                .andExpect(view().name("admin/cycle/dimensions-list"))
                .andExpect(model().attribute("cycle", mockCycle))
                .andExpect(model().attribute("dimensions", mockDimensions));
    }

    @Test
    @DisplayName("POST /view/admin/cycles/{id}/dimensions/create - Should create dimension and redirect")
    void whenCreateDimension_thenRedirectsToDimensionsList() throws Exception {
        UUID cycleId = UUID.randomUUID();
        CycleDtos.SurveyDimensionCreateDto createDto = new CycleDtos.SurveyDimensionCreateDto(
                "rest_habit", "Your rest habit?", "SOFT_FACTOR", "SINGLE_CHOICE",
                1.0, null, false, List.of(new CycleDtos.OptionCreateDto("Early Bird", 1.0))
        );

        when(cycleService.createDimensionForCycle(eq(cycleId), any())).thenReturn(mock(CycleDtos.SurveyDimensionDto.class));

        mockMvc.perform(post("/view/admin/cycles/" + cycleId + "/dimensions/create")
                        .flashAttr("dimensionDto", createDto)
                        .with(csrf()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/view/admin/cycles/" + cycleId + "/dimensions"))
                .andExpect(flash().attributeExists("successMessage"));

        verify(cycleService, times(1)).createDimensionForCycle(eq(cycleId), any(CycleDtos.SurveyDimensionCreateDto.class));
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\AdminDormViewControllerTest.java:
package com.smartdorm.backend.controller;

import com.smartdorm.backend.dto.DormDtos;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.UserRepository;
import com.smartdorm.backend.service.DormResourceService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;
import java.util.List;
import java.util.UUID;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

// 鍏抽敭鍙樻洿 1: 浣跨敤 @SpringBootTest 鍔犺浇瀹屾暣涓婁笅鏂?
@SpringBootTest
// 鍏抽敭鍙樻洿 2: 鑷姩閰嶇疆 MockMvc
@AutoConfigureMockMvc
@DisplayName("TDD for AdminDormViewController (using @SpringBootTest)")
public class AdminDormViewControllerTest {

    @Autowired
    private MockMvc mockMvc;

    // 鎴戜滑浠嶇劧 mock service 灞傦紝浠ラ殧绂?controller 鐨勯€昏緫
    @MockBean
    private DormResourceService dormResourceService;

    // 娉ㄦ剰锛氬湪@SpringBootTest妯″紡涓嬶紝鎴戜滑涓嶅啀闇€瑕乵ock SecurityConfig鐨勪緷璧栦簡锛?
    // 鍥犱负瀹冧滑浼氫粠瀹屾暣鐨勪笂涓嬫枃涓嚜鍔ㄥ姞杞姐€傛垜浠篃涓嶉渶瑕丂Import(SecurityConfig.class)銆?
    // 浣嗘槸锛屾垜浠粛鐒堕渶瑕佷竴涓凡璁よ瘉鐨勭敤鎴锋潵閫氳繃鏉冮檺妫€鏌ャ€?

    @Test
    @DisplayName("绠＄悊鍛樿幏鍙栨ゼ鏍嬪垪琛ㄩ〉闈㈠簲鎴愬姛")
    // 鍏抽敭鍙樻洿 3: 浣跨敤 @WithMockUser 鏉ユā鎷熶竴涓凡鐧诲綍鐨凙DMIN鐢ㄦ埛
    // 杩欐瘮鎵嬪姩鑾峰彇token瑕佺畝鍗曞緱澶氾紝闈炲父閫傚悎瑙嗗浘灞傛祴璇曘€?
    @WithMockUser(username = "admin", roles = "ADMIN")
    void whenListBuildings_thenReturnsListView() throws Exception {
        when(dormResourceService.getAllBuildings()).thenReturn(Collections.emptyList());

        mockMvc.perform(get("/view/admin/dorms/buildings"))
                .andExpect(status().isOk())
                .andExpect(view().name("admin/dorm/buildings-list"))
                .andExpect(model().attributeExists("buildings"));
    }

    @Test
    @DisplayName("绠＄悊鍛樻彁浜ゆ柊寤烘ゼ鏍嬭〃鍗曞簲鎴愬姛骞堕噸瀹氬悜")
    @WithMockUser(username = "admin", roles = "ADMIN")
    void whenCreateBuilding_thenRedirects() throws Exception {
        when(dormResourceService.createBuilding(any(DormDtos.BuildingCreateUpdateDto.class)))
                .thenReturn(new DormDtos.DormBuildingDto(UUID.randomUUID(), "绱崋1鍙锋ゼ"));

        mockMvc.perform(post("/view/admin/dorms/buildings/create")
                        .contentType(org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED)
                        .param("name", "绱崋1鍙锋ゼ")
                        .with(csrf()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/view/admin/dorms/buildings"));

        verify(dormResourceService, times(1)).createBuilding(any(DormDtos.BuildingCreateUpdateDto.class));
    }

    @Test
    @DisplayName("绠＄悊鍛樻彁浜ゅ垹闄ゆゼ鏍嬭姹傚簲鎴愬姛骞堕噸瀹氬悜")
    @WithMockUser(username = "admin", roles = "ADMIN")
    void whenDeleteBuilding_thenRedirects() throws Exception {
        UUID buildingId = UUID.randomUUID();
        doNothing().when(dormResourceService).deleteBuilding(buildingId);

        mockMvc.perform(post("/view/admin/dorms/buildings/" + buildingId + "/delete")
                        .with(csrf()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/view/admin/dorms/buildings"));

        verify(dormResourceService, times(1)).deleteBuilding(buildingId);
    }

    // --- Room Tests ---

    @Test
    @DisplayName("绠＄悊鍛樿幏鍙栨埧闂磋鎯呬笌搴婁綅鍒楄〃椤甸潰搴旀垚鍔?)
    @WithMockUser(roles = "ADMIN")
    void whenShowRoomDetails_thenReturnsDetailsView() throws Exception {
        UUID roomId = UUID.randomUUID();
        DormResourceService.RoomDetailDto mockRoomDetails = new DormResourceService.RoomDetailDto(roomId, "101", 4, "MALE", UUID.randomUUID(), "Test Building");

        // 鍏抽敭淇: 纭繚鎴戜滑 mock 鐨勬槸 Controller 瀹為檯璋冪敤鐨?getRoomDetailById 鏂规硶
        when(dormResourceService.getRoomDetailById(roomId)).thenReturn(mockRoomDetails);

        // 杩欎釜 mock 淇濇寔涓嶅彉锛屾槸姝ｇ‘鐨?
        when(dormResourceService.getBedsForRoom(roomId)).thenReturn(Collections.emptyList());

        mockMvc.perform(get("/view/admin/dorms/rooms/" + roomId + "/details"))
                .andExpect(status().isOk())
                .andExpect(view().name("admin/dorm/room-details"))
                .andExpect(model().attributeExists("room"))
                .andExpect(model().attribute("room", mockRoomDetails)) // 鎴戜滑鍙互鏇磋繘涓€姝ワ紝楠岃瘉 model 閲岀殑瀵硅薄灏辨槸鎴戜滑 mock 鐨勯偅涓?
                .andExpect(model().attributeExists("beds"));
    }

    @Test
    @DisplayName("绠＄悊鍛樻彁浜ゆ柊寤烘埧闂磋〃鍗曞簲鎴愬姛骞堕噸瀹氬悜")
    @WithMockUser(username = "admin", roles = "ADMIN")
    void whenCreateRoom_thenRedirects() throws Exception {
        UUID buildingId = UUID.randomUUID();
        when(dormResourceService.createRoom(any(DormDtos.RoomCreateUpdateDto.class)))
                .thenReturn(new DormDtos.DormRoomDto(UUID.randomUUID(), buildingId, "101", 4, "MALE"));

        mockMvc.perform(post("/view/admin/dorms/rooms/create")
                        .contentType(org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED)
                        .param("buildingId", buildingId.toString())
                        .param("roomNumber", "101")
                        .param("capacity", "4")
                        .param("genderType", "MALE")
                        .with(csrf()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/view/admin/dorms/rooms"));

        verify(dormResourceService, times(1)).createRoom(any(DormDtos.RoomCreateUpdateDto.class));
    }


    @Test
    @DisplayName("绠＄悊鍛樻壒閲忓垱寤哄簥浣嶅簲鎴愬姛骞堕噸瀹氬悜鍥炶鎯呴〉")
    @WithMockUser(roles = "ADMIN")
    void whenCreateBedsBatch_thenRedirectsToDetails() throws Exception {
        UUID roomId = UUID.randomUUID();

        mockMvc.perform(post("/view/admin/dorms/rooms/" + roomId + "/beds/create-batch")
                        .contentType(org.springframework.http.MediaType.APPLICATION_FORM_URLENCODED)
                        .param("bedCount", "4")
                        .with(csrf()))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrl("/view/admin/dorms/rooms/" + roomId + "/details"));

        verify(dormResourceService, times(1)).createBedsForRoom(eq(roomId), any(DormDtos.BedCreateRequestDto.class));
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\AuthControllerIntegrationTest.java:
// src/test/java/com/smartdorm/backend/controller/AuthControllerIntegrationTest.java
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK) // 鍔犺浇瀹屾暣鐨凷pring搴旂敤涓婁笅鏂?
@Testcontainers // 鍚敤Testcontainers
@AutoConfigureMockMvc // 鑷姩閰嶇疆MockMvc浠ユā鎷烪TTP璇锋眰
@DisplayName("闆嗘垚娴嬭瘯: AuthController 鍜屽畨鍏ㄦ祦绋?)
class AuthControllerIntegrationTest {

    // 澹版槑涓€涓狿ostgreSQL瀹瑰櫒锛屼娇鐢ㄤ笌docker-compose.yml涓浉鍚岀殑闀滃儚
    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");

    @Autowired
    private MockMvc mockMvc; // 鐢ㄤ簬鎵цHTTP璇锋眰

    @Autowired
    private ObjectMapper objectMapper; // 鐢ㄤ簬搴忓垪鍖朖ava瀵硅薄涓篔SON瀛楃涓?

    @Autowired
    private UserRepository userRepository; // 鐢ㄤ簬鐩存帴鎿嶄綔鏁版嵁搴撲互鍑嗗娴嬭瘯鏁版嵁

    @Autowired
    private PasswordEncoder passwordEncoder; // 鐢ㄤ簬鍔犲瘑娴嬭瘯鐢ㄦ埛鐨勫瘑鐮?

    // 鍔ㄦ€侀厤缃暟鎹簮锛屼娇鍏舵寚鍚戠敱Testcontainers鍚姩鐨勬暟鎹簱瀹炰緥
    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        // 璁剧疆ddl-auto涓篶reate锛岀‘淇濅负姣忎釜娴嬭瘯绫昏繍琛屾椂閮藉垱寤轰竴涓共鍑€鐨勮〃缁撴瀯
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
    }

    // 鍦ㄦ瘡涓祴璇曟柟娉曡繍琛屽墠锛屾竻鐞嗘暟鎹簱骞跺垱寤轰竴涓爣鍑嗘祴璇曠敤鎴?
    @BeforeEach
    void setUp() {
        userRepository.deleteAll(); // 娓呯┖鏁版嵁锛屼繚璇佹祴璇曠嫭绔嬫€?
        createTestUser("S001", "password123", "STUDENT", "John Doe");
    }

    // 杈呭姪鏂规硶锛岀敤浜庡湪鏁版嵁搴撲腑鍒涘缓娴嬭瘯鐢ㄦ埛
    private void createTestUser(String studentId, String rawPassword, String role, String name) {
        User user = new User();
        user.setStudentId(studentId);
        user.setName(name);
        user.setPassword(passwordEncoder.encode(rawPassword)); // 瀵嗙爜蹇呴』鍔犲瘑瀛樺偍
        user.setRole(role);
        user.setGender("MALE");
        user.setCollege("Test College");
        userRepository.save(user);
    }

    @Test
    @DisplayName("鎴愬姛鐧诲綍: 浣跨敤鏈夋晥鍑嵁搴旇繑鍥濲WT鍜岀敤鎴蜂俊鎭?)
    void login_withValidCredentials_shouldReturnTokenAndUserDto() throws Exception {
        LoginRequest loginRequest = new LoginRequest("S001", "password123");

        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.token").isString())
                .andExpect(jsonPath("$.token").isNotEmpty())
                .andExpect(jsonPath("$.user.studentId").value("S001"))
                .andExpect(jsonPath("$.user.name").value("John Doe"))
                .andExpect(jsonPath("$.user.role").value("STUDENT"))
                .andExpect(jsonPath("$.user.password").doesNotExist()); // 鍏抽敭鏂█: 纭繚瀵嗙爜瀛楁鏈湪鍝嶅簲涓繑鍥?
    }

    @Test
    @DisplayName("鐧诲綍澶辫触: 瀵嗙爜閿欒搴旇繑鍥?01 Unauthorized")
    void login_withInvalidPassword_shouldReturnUnauthorized() throws Exception {
        LoginRequest loginRequest = new LoginRequest("S001", "wrongpassword");

        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isUnauthorized())
                .andExpect(jsonPath("$.error").value("Unauthorized"))
                .andExpect(jsonPath("$.message").value("Invalid student ID or password"));
    }

    @Test
    @DisplayName("鐧诲綍澶辫触: 鐢ㄦ埛涓嶅瓨鍦ㄥ簲杩斿洖401 Unauthorized")
    void login_withNonExistentUser_shouldReturnUnauthorized() throws Exception {
        LoginRequest loginRequest = new LoginRequest("S999", "password123");

        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @DisplayName("鍏紑绔偣璁块棶: /ping 搴旀棤闇€璁よ瘉鍗冲彲璁块棶")
    void ping_publicEndpoint_shouldBeAccessible() throws Exception {
        mockMvc.perform(get("/api/ping"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("ok"));
    }

    @Test
    @DisplayName("鍙椾繚鎶ょ鐐硅闂け璐? 鏃燭oken搴旇繑鍥?01 Unauthorized")
    void accessSecuredEndpoint_withoutToken_shouldReturnUnauthorized() throws Exception {
        mockMvc.perform(get("/api/users/me"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @DisplayName("鍙椾繚鎶ょ鐐硅闂垚鍔? 浣跨敤鏈夋晥Token搴旇繑鍥炵敤鎴蜂俊鎭?)
    void accessSecuredEndpoint_withValidToken_shouldReturnOkAndUserData() throws Exception {
        // 姝ラ 1: 鐧诲綍浠ヨ幏鍙栨湁鏁堢殑JWT
        LoginRequest loginRequest = new LoginRequest("S001", "password123");
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();

        // 浠庣櫥褰曞搷搴斾腑瑙ｆ瀽鍑簍oken
        String responseBody = result.getResponse().getContentAsString();
        LoginResponse loginResponse = objectMapper.readValue(responseBody, LoginResponse.class);
        String token = loginResponse.token();
        assertThat(token).isNotNull();

        // 姝ラ 2: 浣跨敤鑾峰彇鍒扮殑token璁块棶鍙椾繚鎶ょ殑 /users/me 绔偣
        mockMvc.perform(get("/api/users/me")
                        .header("Authorization", "Bearer " + token)) // 鍦ㄨ姹傚ご涓檮甯oken
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.studentId").value("S001"))
                .andExpect(jsonPath("$.name").value("John Doe"))
                .andExpect(jsonPath("$.role").value("STUDENT"));
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\CycleControllerIntegrationTest.java:
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.entity.MatchingCycle;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.MatchingCycleRepository;
import com.smartdorm.backend.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.List;
import java.util.UUID;

import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("闆嗘垚娴嬭瘯: CycleController")
@Transactional
class CycleControllerIntegrationTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private UserRepository userRepository;
    @Autowired private MatchingCycleRepository cycleRepository;
    @Autowired private PasswordEncoder passwordEncoder;

    private String adminToken;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
    }

    @BeforeEach
    void setUp() throws Exception {
        userRepository.deleteAll();
        cycleRepository.deleteAll();

        User admin = new User();
        admin.setStudentId("admin02");
        admin.setName("Cycle Admin");
        admin.setPassword(passwordEncoder.encode("cyclepass"));
        admin.setRole("ADMIN");
        admin.setGender("FEMALE");
        admin.setCollege("Management");
        userRepository.save(admin);

        adminToken = getAdminToken("admin02", "cyclepass");
    }

    private String getAdminToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        return "Bearer " + response.token();
    }

    @Test
    @DisplayName("Admin鍙互瀹屾暣鍦扮鐞嗕竴涓垎閰嶅懆鏈熷拰鍏堕棶鍗风淮搴?)
    void adminCanManageFullLifecycleOfCycleAndDimensions() throws Exception {
        // 1. Create a cycle
        MatchingCycleCreateDto createDto = new MatchingCycleCreateDto("2024绉嬪鏂扮敓鍒嗛厤", null, null);
        MvcResult cycleResult = mockMvc.perform(post("/api/admin/cycles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name", is("2024绉嬪鏂扮敓鍒嗛厤")))
                .andExpect(jsonPath("$.status", is("DRAFT")))
                .andReturn();
        MatchingCycleDto createdCycle = objectMapper.readValue(cycleResult.getResponse().getContentAsString(), MatchingCycleDto.class);
        UUID cycleId = createdCycle.id();

        // 2. Add a dimension with options to the cycle
        List<OptionCreateDto> options = List.of(
                new OptionCreateDto("鏃╃潯鏃╄捣", 1.0),
                new OptionCreateDto("鏅氱潯鏅氳捣", 5.0)
        );
        SurveyDimensionCreateDto dimensionDto = new SurveyDimensionCreateDto(
                "rest_habit", "浣犵殑浣滄伅涔犳儻鏄紵", "SOFT_FACTOR", "SINGLE_CHOICE", 2.0, null, false, options);

        mockMvc.perform(post("/api/admin/cycles/" + cycleId + "/dimensions")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dimensionDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.dimensionKey", is("rest_habit")))
                .andExpect(jsonPath("$.options", hasSize(2)))
                .andExpect(jsonPath("$.options[0].optionText", is("鏃╃潯鏃╄捣")));

        // 3. Get dimensions for the cycle and verify
        mockMvc.perform(get("/api/admin/cycles/" + cycleId + "/dimensions").header("Authorization", adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].prompt", is("浣犵殑浣滄伅涔犳儻鏄紵")));

        // 4. Delete the cycle (should fail because status is not DRAFT)
        // First, let's update status to OPEN
        MatchingCycleUpdateDto updateStatusDto = new MatchingCycleUpdateDto(null, null, null, "OPEN");
        mockMvc.perform(put("/api/admin/cycles/" + cycleId)
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateStatusDto)))
                .andExpect(status().isOk());

        // Now, try to delete it
        mockMvc.perform(delete("/api/admin/cycles/" + cycleId).header("Authorization", adminToken))
                .andExpect(status().isConflict());

        // 5. Change status back to DRAFT and delete successfully
        MatchingCycleUpdateDto revertStatusDto = new MatchingCycleUpdateDto(null, null, null, "DRAFT");
        mockMvc.perform(put("/api/admin/cycles/" + cycleId)
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(revertStatusDto)))
                .andExpect(status().isOk());

        mockMvc.perform(delete("/api/admin/cycles/" + cycleId).header("Authorization", adminToken))
                .andExpect(status().isNoContent());
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\DashboardControllerTest.java:
package com.smartdorm.backend.controller;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.hamcrest.Matchers.containsString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
@DisplayName("TDD for DashboardController")
class DashboardControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    @DisplayName("Admin鐢ㄦ埛璁块棶/view/admin/dashboard搴旀垚鍔熷苟杩斿洖绠＄悊鍛橀潰鏉?)
    @WithMockUser(username = "test-admin", roles = "ADMIN")
    void whenAdminAccessesDashboard_thenReturnsAdminDashboardView() throws Exception {
        mockMvc.perform(get("/view/admin/dashboard"))
                .andExpect(status().isOk())
                .andExpect(view().name("admin/dashboard"))
                .andExpect(content().string(containsString("绠＄悊鍛樹富闈㈡澘")));
    }

    @Test
    @DisplayName("Student鐢ㄦ埛璁块棶/view/student/dashboard搴旀垚鍔熷苟杩斿洖瀛︾敓闈㈡澘")
    @WithMockUser(username = "test-student", roles = "STUDENT")
    void whenStudentAccessesDashboard_thenReturnsStudentDashboardView() throws Exception {
        mockMvc.perform(get("/view/student/dashboard"))
                .andExpect(status().isOk())
                .andExpect(view().name("student/dashboard"))
                .andExpect(content().string(containsString("瀛︾敓涓婚潰鏉?)));
    }

    @Test
    @DisplayName("Student鐢ㄦ埛璁块棶绠＄悊鍛橀潰鏉垮簲杩斿洖403 Forbidden")
    @WithMockUser(username = "test-student", roles = "STUDENT")
    void whenStudentAccessesAdminDashboard_thenIsForbidden() throws Exception {
        mockMvc.perform(get("/view/admin/dashboard"))
                .andExpect(status().isForbidden());
    }

    @Test
    @DisplayName("鏈璇佺敤鎴疯闂换浣曢潰鏉块兘搴旈噸瀹氬悜鍒扮櫥褰曢〉")
    void whenUnauthenticatedAccessDashboard_thenRedirectsToLogin() throws Exception {
        mockMvc.perform(get("/view/admin/dashboard"))
                .andExpect(status().is3xxRedirection())
                .andExpect(redirectedUrlPattern("**/login"));
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\DormResourceControllerIntegrationTest.java:
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.entity.DormBuilding;
import com.smartdorm.backend.entity.DormRoom;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.DormBuildingRepository;
import com.smartdorm.backend.repository.DormRoomRepository;
import com.smartdorm.backend.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.UUID;

import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("闆嗘垚娴嬭瘯: DormResourceController")
@Transactional // Roll back transactions after each test
class DormResourceControllerIntegrationTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private DormBuildingRepository buildingRepository;
    @Autowired
    private DormRoomRepository roomRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;

    private String adminToken;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
    }

    @BeforeEach
    void setUp() throws Exception {
        userRepository.deleteAll();
        buildingRepository.deleteAll();

        // Create an admin user
        User admin = new User();
        admin.setStudentId("admin01");
        admin.setName("Admin User");
        admin.setPassword(passwordEncoder.encode("adminpass"));
        admin.setRole("ADMIN");
        admin.setGender("MALE");
        admin.setCollege("Admin College");
        userRepository.save(admin);

        // Login as admin to get token
        adminToken = getAdminToken("admin01", "adminpass");
    }

    private String getAdminToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        return "Bearer " + response.token();
    }

    @Test
    @DisplayName("Admin鍙互鍒涘缓銆佽幏鍙栥€佹洿鏂板拰鍒犻櫎妤兼爧")
    void adminCanManageBuildings() throws Exception {
        // 1. Create Building
        BuildingCreateUpdateDto createDto = new BuildingCreateUpdateDto("绱崋1鍙锋ゼ");
        MvcResult createResult = mockMvc.perform(post("/api/admin/dorm-buildings")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name", is("绱崋1鍙锋ゼ")))
                .andReturn();
        DormBuildingDto createdBuilding = objectMapper.readValue(createResult.getResponse().getContentAsString(), DormBuildingDto.class);
        UUID buildingId = createdBuilding.id();

        // 2. Get All Buildings
        mockMvc.perform(get("/api/admin/dorm-buildings").header("Authorization", adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].name", is("绱崋1鍙锋ゼ")));

        // 3. Update Building
        BuildingCreateUpdateDto updateDto = new BuildingCreateUpdateDto("绱崋1鍙锋ゼ (鏂?");
        mockMvc.perform(put("/api/admin/dorm-buildings/" + buildingId)
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is("绱崋1鍙锋ゼ (鏂?")));

        // 4. Delete Building
        mockMvc.perform(delete("/api/admin/dorm-buildings/" + buildingId).header("Authorization", adminToken))
                .andExpect(status().isNoContent());
    }

    @Test
    @DisplayName("褰撴ゼ鏍嬩笅鏈夋埧闂存椂锛屽垹闄ゆゼ鏍嬪簲杩斿洖409 Conflict")
    void deleteBuilding_withRooms_shouldReturnConflict() throws Exception {
        DormBuilding building = new DormBuilding();
        building.setName("娴嬭瘯妤?);
        building = buildingRepository.save(building);

        DormRoom room = new DormRoom();
        room.setBuilding(building);
        room.setRoomNumber("101");
        room.setCapacity(4);
        room.setGenderType("MALE");
        roomRepository.save(room);

        mockMvc.perform(delete("/api/admin/dorm-buildings/" + building.getId()).header("Authorization", adminToken))
                .andExpect(status().isConflict())
                .andExpect(jsonPath("$.message", is("Cannot delete building with id " + building.getId() + " because it contains rooms.")));
    }

    @Test
    @DisplayName("Admin鍙互涓烘埧闂存壒閲忔坊鍔犲簥浣?)
    void adminCanCreateBedsForRoom() throws Exception {
        // Setup a building and a room
        DormBuilding building = new DormBuilding();
        building.setName("瀹胯垗妤糀");
        building = buildingRepository.save(building);

        RoomCreateUpdateDto roomDto = new RoomCreateUpdateDto(building.getId(), "201", 4, "FEMALE");
        MvcResult roomResult = mockMvc.perform(post("/api/admin/dorm-rooms")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(roomDto)))
                .andExpect(status().isCreated())
                .andReturn();
        DormRoomDto createdRoom = objectMapper.readValue(roomResult.getResponse().getContentAsString(), DormRoomDto.class);

        // Create beds for the room
        BedCreateRequestDto bedRequest = new BedCreateRequestDto(4);
        mockMvc.perform(post("/api/admin/rooms/" + createdRoom.id() + "/beds")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(bedRequest)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.count", is(4)))
                .andExpect(jsonPath("$.beds", hasSize(4)))
                .andExpect(jsonPath("$.beds[0].bedNumber", is(1)));
    }

    @Test
    @DisplayName("闈濧dmin鐢ㄦ埛璁块棶瀹胯垗璧勬簮API搴旇繑鍥?03 Forbidden")
    void nonAdminAccess_shouldReturnForbidden() throws Exception {
        // Create a student user and get token
        User student = new User();
        student.setStudentId("student01");
        student.setName("Student User");
        student.setPassword(passwordEncoder.encode("studentpass"));
        student.setRole("STUDENT");
        student.setGender("FEMALE");
        student.setCollege("Test College");
        userRepository.save(student);
        String studentToken = getAdminToken("student01", "studentpass");

        mockMvc.perform(get("/api/admin/dorm-buildings").header("Authorization", studentToken))
                .andExpect(status().isForbidden());
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\FullLifecycleIntegrationTest.java:
// src/test/java/com/smartdorm/backend/controller/FullLifecycleIntegrationTest.java
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.dto.StudentDtos.*;
import com.smartdorm.backend.entity.*;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.List;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("馃殌 缁堟瀬闆嗘垚娴嬭瘯: 瀹屾暣涓氬姟鐢熷懡鍛ㄦ湡楠岃瘉")
@Transactional // 纭繚姣忎釜娴嬭瘯鏂规硶閮藉湪浜嬪姟涓繍琛岋紝骞跺湪缁撴潫鍚庡洖婊氾紝淇濇寔鏁版嵁搴撴竻娲?
public class FullLifecycleIntegrationTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private PasswordEncoder passwordEncoder;

    // Repositories for direct data setup and cleanup
    @Autowired private UserRepository userRepository;
    @Autowired private MatchingResultRepository resultRepository;
    @Autowired private BedRepository bedRepository;
    @Autowired private DormRoomRepository roomRepository;
    @Autowired private DormBuildingRepository buildingRepository;
    @Autowired private SurveyDimensionRepository dimensionRepository;
    @Autowired private MatchingCycleRepository cycleRepository;

    // Test Data
    private User adminUser;
    private User studentUser1;
    private User studentUser2;
    private String adminToken;
    private String studentToken1;
    private String studentToken2;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
        registry.add("logging.level.org.springframework.security", () -> "INFO"); // Reduce noise in test logs
    }

    @BeforeEach
    void setUp() throws Exception {
        // Clean up database before each test
        resultRepository.deleteAll();
        bedRepository.deleteAll();
        roomRepository.deleteAll();
        buildingRepository.deleteAll();
        dimensionRepository.deleteAll();
        cycleRepository.deleteAll();
        userRepository.deleteAll();

        // --- Create Test Users ---
        adminUser = createUser("admin-full", "password", "ADMIN", "瓒呯骇绠＄悊鍛?);
        studentUser1 = createUser("20240001", "password", "STUDENT", "寮犱笁");
        studentUser2 = createUser("20240002", "password", "STUDENT", "鏉庡洓");

        // --- Get Auth Tokens ---
        adminToken = getToken(adminUser.getStudentId(), "password");
        studentToken1 = getToken(studentUser1.getStudentId(), "password");
        studentToken2 = getToken(studentUser2.getStudentId(), "password");
    }

    @Test
    @DisplayName("浠庣郴缁熻缃埌瀛︾敓鏌ョ粨鏋滅殑鍏ㄦ祦绋嬫ā鎷?)
    void testFullSystemLifecycle_FromSetupToResult() throws Exception {
        System.out.println("====== PHASE P2: 瀹胯垗璧勬簮绠＄悊 ======");
        // Admin creates a new building
        BuildingCreateUpdateDto buildingDto = new BuildingCreateUpdateDto("绱崋鍏瘬A鏍?);
        MvcResult buildingResult = mockMvc.perform(post("/api/admin/dorm-buildings")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(buildingDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name", is("绱崋鍏瘬A鏍?)))
                .andReturn();
        DormBuildingDto createdBuilding = objectMapper.readValue(buildingResult.getResponse().getContentAsString(), DormBuildingDto.class);
        UUID buildingId = createdBuilding.id();

        // Admin creates a room in that building
        RoomCreateUpdateDto roomDto = new RoomCreateUpdateDto(buildingId, "101", 4, "MALE");
        MvcResult roomResult = mockMvc.perform(post("/api/admin/dorm-rooms")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(roomDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.roomNumber", is("101")))
                .andReturn();
        DormRoomDto createdRoom = objectMapper.readValue(roomResult.getResponse().getContentAsString(), DormRoomDto.class);
        UUID roomId = createdRoom.id();

        // Admin creates beds for that room
        BedCreateRequestDto bedRequestDto = new BedCreateRequestDto(4);
        MvcResult bedsResult = mockMvc.perform(post("/api/admin/rooms/" + roomId + "/beds")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(bedRequestDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.count", is(4)))
                .andExpect(jsonPath("$.beds", hasSize(4)))
                .andReturn();
        BedsCreatedResponseDto bedsResponse = objectMapper.readValue(bedsResult.getResponse().getContentAsString(), BedsCreatedResponseDto.class);
        List<BedDto> createdBeds = bedsResponse.beds();
        System.out.println("瀹胯垗璧勬簮鍒涘缓瀹屾垚: " + createdBuilding.name() + "-" + createdRoom.roomNumber());

        System.out.println("\n====== PHASE P3: 鍖归厤鍛ㄦ湡涓庨棶鍗风鐞?======");
        // Admin creates a new matching cycle
        MatchingCycleCreateDto cycleCreateDto = new MatchingCycleCreateDto("2024绾ф柊鐢熺瀛ｅ垎閰?, null, null);
        MvcResult cycleResult = mockMvc.perform(post("/api/admin/cycles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(cycleCreateDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status", is("DRAFT")))
                .andReturn();
        MatchingCycleDto createdCycle = objectMapper.readValue(cycleResult.getResponse().getContentAsString(), MatchingCycleDto.class);
        UUID cycleId = createdCycle.id();
        System.out.println("鍒嗛厤鍛ㄦ湡鍒涘缓鎴愬姛: " + createdCycle.name());

        // Admin designs a survey dimension for the cycle
        List<OptionCreateDto> options = List.of(
                new OptionCreateDto("鏃╃潯鏃╄捣 (11鐐瑰墠鐫?", 1.0),
                new OptionCreateDto("鍋跺皵鐔 (12鐐?1鐐?", 3.0),
                new OptionCreateDto("澶滅尗瀛?(1鐐瑰悗)", 5.0)
        );
        SurveyDimensionCreateDto dimensionCreateDto = new SurveyDimensionCreateDto(
                "rest_habit", "浣犵殑浣滄伅涔犳儻鏄紵", "SOFT_FACTOR", "SINGLE_CHOICE", 1.5, null, false, options);
        MvcResult dimensionResult = mockMvc.perform(post("/api/admin/cycles/" + cycleId + "/dimensions")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(dimensionCreateDto)))
                .andExpect(status().isCreated())
                .andReturn();
        SurveyDimensionDto createdDimension = objectMapper.readValue(dimensionResult.getResponse().getContentAsString(), SurveyDimensionDto.class);
        UUID dimensionId = createdDimension.id();
        System.out.println("闂嵎缁村害鍒涘缓鎴愬姛: " + createdDimension.prompt());

        // Admin opens the cycle for students
        MatchingCycleUpdateDto cycleUpdateDto = new MatchingCycleUpdateDto(null, null, null, "OPEN");
        mockMvc.perform(put("/api/admin/cycles/" + cycleId)
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(cycleUpdateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status", is("OPEN")));
        System.out.println("鍒嗛厤鍛ㄦ湡鐘舵€佸凡鏇存柊涓? OPEN");

        System.out.println("\n====== PHASE P4: 瀛︾敓鏍稿績娴佺▼ ======");
        // Student 1 (寮犱笁) gets the survey
        mockMvc.perform(get("/api/student/survey").header("Authorization", studentToken1))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.cycleId", is(cycleId.toString())))
                .andExpect(jsonPath("$.dimensions", hasSize(1)))
                .andExpect(jsonPath("$.dimensions[0].id", is(dimensionId.toString())));
        System.out.println("瀛︾敓1 (寮犱笁) 鎴愬姛鑾峰彇闂嵎銆?);

        // Student 1 (寮犱笁) submits his response (he is an early bird)
        ResponseItem responseItem1 = new ResponseItem(dimensionId, 1.0);
        UserResponseSubmitDto submitDto1 = new UserResponseSubmitDto(List.of(responseItem1));
        mockMvc.perform(post("/api/student/responses")
                        .header("Authorization", studentToken1)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(submitDto1)))
                .andExpect(status().isOk());
        System.out.println("瀛︾敓1 (寮犱笁) 鎴愬姛鎻愪氦闂嵎绛旀銆?);

        // Student 2 (鏉庡洓) also submits his response (he is also an early bird)
        ResponseItem responseItem2 = new ResponseItem(dimensionId, 1.0);
        UserResponseSubmitDto submitDto2 = new UserResponseSubmitDto(List.of(responseItem2));
        mockMvc.perform(post("/api/student/responses")
                        .header("Authorization", studentToken2)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(submitDto2)))
                .andExpect(status().isOk());
        System.out.println("瀛︾敓2 (鏉庡洓) 鎴愬姛鎻愪氦闂嵎绛旀銆?);

        // Admin triggers the assignment (placeholder logic)
        mockMvc.perform(post("/api/admin/cycles/" + cycleId + "/trigger-assignment")
                        .header("Authorization", adminToken))
                .andExpect(status().isAccepted());
        System.out.println("绠＄悊鍛樺凡瑙﹀彂鍒嗛厤娴佺▼ (鍗犱綅绗?銆?);

        // Verify cycle status changed to COMPLETED
        mockMvc.perform(get("/api/admin/cycles/" + cycleId).header("Authorization", adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status", is("COMPLETED")));
        System.out.println("鍒嗛厤鍛ㄦ湡鐘舵€佸凡楠岃瘉涓? COMPLETED");

        System.out.println("\n====== 鍏抽敭姝ラ: 鎵嬪姩妯℃嫙绠楁硶鍒嗛厤缁撴灉 ======");
        // Manually create mock results since algorithm is a placeholder
        // This is a crucial step to test the result-viewing endpoints
        createMockResult(cycleId, studentUser1, createdBeds.get(0));
        createMockResult(cycleId, studentUser2, createdBeds.get(1));
        System.out.println("宸叉墜鍔ㄥ湪鏁版嵁搴撲腑鎻掑叆妯℃嫙鐨勫垎閰嶇粨鏋溿€?);

        System.out.println("\n====== PHASE P4 (缍氥亶): 瀛︾敓鏌ョ湅缁撴灉 ======");
        // Student 1 (寮犱笁) checks his assignment result
        mockMvc.perform(get("/api/student/result").header("Authorization", studentToken1))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assignment.building", is("绱崋鍏瘬A鏍?)))
                .andExpect(jsonPath("$.assignment.room", is("101")))
                .andExpect(jsonPath("$.assignment.bed", is(1)))
                .andExpect(jsonPath("$.roommates", hasSize(1)))
                .andExpect(jsonPath("$.roommates[0].name", is("鏉庡洓")))
                .andExpect(jsonPath("$.roommates[0].studentId", is("20240002")));
        System.out.println("瀛︾敓1 (寮犱笁) 鎴愬姛鏌ョ湅鍒嗛厤缁撴灉锛屽苟鐪嬪埌瀹ゅ弸涓烘潕鍥涖€?);

        System.out.println("\n====== PHASE P5: 鏀寔鎬у姛鑳?(鎶芥牱娴嬭瘯) ======");
        // Admin posts an article
        // Note: In a real app, authorId would be set automatically from the token.
        // The current implementation might need an update for that. We test as-is.
        String articleContent = "{\"title\": \"瀹胯垗鍐茬獊瑙ｅ喅鎸囧崡\", \"content\": \"绗竴姝ワ紝淇濇寔鍐烽潤...\", \"category\": \"蹇冪悊鍋ュ悍\"}";
        mockMvc.perform(post("/api/admin/articles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(articleContent))
                .andExpect(status().isCreated()); // This is a placeholder test for an endpoint that doesn't exist yet, but would be in P5.
        // To make this test pass with current code, we comment it out as the corresponding endpoints were not implemented in the provided code.
        // Assuming Article endpoints are implemented following the pattern.
        System.out.println("绠＄悊鍛樺彂甯冩枃绔?(妯℃嫙)銆?);

        System.out.println("\n====== 缁堟瀬闆嗘垚娴嬭瘯鎴愬姛! ======");
    }

    // --- Helper Methods ---

    private User createUser(String studentId, String password, String role, String name) {
        User user = new User();
        user.setStudentId(studentId);
        user.setName(name);
        user.setPassword(passwordEncoder.encode(password));
        user.setRole(role);
        user.setGender("MALE"); // Assuming MALE for simplicity
        user.setCollege("璁＄畻鏈虹瀛︿笌鎶€鏈闄?);
        return userRepository.save(user);
    }

    private String getToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        assertThat(response.token()).isNotBlank();
        return "Bearer " + response.token();
    }

    private void createMockResult(UUID cycleId, User user, BedDto bedDto) {
        MatchingCycle cycle = cycleRepository.findById(cycleId).orElseThrow();
        Bed bed = bedRepository.findById(bedDto.id()).orElseThrow();
        UUID groupId = bed.getRoom().getId(); // Use room ID as group ID for simplicity

        MatchingResult result = new MatchingResult();
        result.setCycle(cycle);
        result.setUser(user);
        result.setBed(bed);
        result.setMatchGroupId(groupId);
        resultRepository.save(result);
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\FullSystemFlowIntegrationTest.java:
// src/test/java/com/smartdorm/backend/controller/FullSystemFlowIntegrationTest.java
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.dto.StudentDtos.*;
import com.smartdorm.backend.entity.*;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("瓒呭ぇ瑙勬ā闆嗘垚娴嬭瘯: 绔埌绔郴缁熷叏娴佺▼楠岃瘉")
@TestInstance(TestInstance.Lifecycle.PER_CLASS) // 鍏抽敭锛氳鎵€鏈夋祴璇曞叡浜竴涓疄渚嬶紝浠ヤ究浼犻€掔姸鎬?
@TestMethodOrder(MethodOrderer.OrderAnnotation.class) // 鍏抽敭锛氭寜椤哄簭鎵ц娴嬭瘯鏂规硶
public class FullSystemFlowIntegrationTest {

    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");
    // 2. 娣诲姞 static 鍒濆鍖栧潡鏉ユ墜鍔ㄥ惎鍔ㄥ鍣?
    static {
        postgres.start();
    }
    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private PasswordEncoder passwordEncoder;

    // Repositories for setup and direct verification
    @Autowired private UserRepository userRepository;
    @Autowired private MatchingCycleRepository cycleRepository;
    @Autowired private SurveyDimensionRepository dimensionRepository;
    @Autowired private DormBuildingRepository buildingRepository;
    @Autowired private DormRoomRepository roomRepository;
    @Autowired private BedRepository bedRepository;
    @Autowired private MatchingResultRepository resultRepository;
    @Autowired private UserResponseRepository responseRepository;
    // Add other repositories as needed for new entities
    // @Autowired private FeedbackRepository feedbackRepository;
    // @Autowired private SwapRequestRepository swapRequestRepository;
    // @Autowired private ArticleRepository articleRepository;

    // State passed between ordered tests
    private String adminToken;
    private String studentToken;
    private String roommateToken;
    private User studentUser;
    private User roommateUser;
    private UUID cycleId;
    private UUID buildingId;
    private UUID roomId;
    private UUID bed1Id;
    private UUID bed2Id;
    private UUID cleanlinessDimensionId;
    private UUID atmosphereDimensionId;
    private UUID swapRequestId;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create"); // create-drop ensures clean state for each run
    }

    @BeforeAll
    @Transactional // Wrap setup in a transaction
    void setupAll() throws Exception {
        // Clean slate
        resultRepository.deleteAllInBatch();
        responseRepository.deleteAllInBatch();
        bedRepository.deleteAllInBatch();
        roomRepository.deleteAllInBatch();
        buildingRepository.deleteAllInBatch();
        dimensionRepository.deleteAllInBatch();
        cycleRepository.deleteAllInBatch();
        userRepository.deleteAllInBatch();

        // Create Users
        User admin = createUser("full_admin", "password", "ADMIN", "绯荤粺绠＄悊鍛?, "MALE", "绠＄悊瀛﹂櫌");
        studentUser = createUser("student_01", "password", "STUDENT", "寮犱笁", "MALE", "璁＄畻鏈哄闄?);
        roommateUser = createUser("student_02", "password", "STUDENT", "鏉庡洓", "MALE", "璁＄畻鏈哄闄?);

        // Get Tokens
        adminToken = getToken(admin.getStudentId(), "password");
        studentToken = getToken(studentUser.getStudentId(), "password");
        roommateToken = getToken(roommateUser.getStudentId(), "password");

        assertNotNull(adminToken);
        assertNotNull(studentToken);
        assertNotNull(roommateToken);
    }

    @Test
    @Order(1)
    @DisplayName("姝ラ1 [ADM-05]: 绠＄悊鍛樿缃熀纭€鐗╃悊璧勬簮锛堟ゼ鏍嬨€佹埧闂淬€佸簥浣嶏級")
    void step1_AdminManagesDormResources() throws Exception {
        // 1. Create Building
        BuildingCreateUpdateDto createBuildingDto = new BuildingCreateUpdateDto("绱崋鍏瘬");
        MvcResult buildingResult = mockMvc.perform(post("/api/admin/dorm-buildings")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createBuildingDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.name", is("绱崋鍏瘬")))
                .andReturn();
        this.buildingId = objectMapper.readValue(buildingResult.getResponse().getContentAsString(), DormBuildingDto.class).id();
        assertNotNull(this.buildingId);

        // 2. Create Room
        RoomCreateUpdateDto createRoomDto = new RoomCreateUpdateDto(this.buildingId, "401", 4, "MALE");
        MvcResult roomResult = mockMvc.perform(post("/api/admin/dorm-rooms")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createRoomDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.roomNumber", is("401")))
                .andReturn();
        DormRoomDto createdRoom = objectMapper.readValue(roomResult.getResponse().getContentAsString(), DormRoomDto.class);
        this.roomId = createdRoom.id();
        assertNotNull(this.roomId);

        // 3. Create Beds for the room
        BedCreateRequestDto createBedDto = new BedCreateRequestDto(2); // Only create 2 beds for our 2 students
        MvcResult bedsResult = mockMvc.perform(post("/api/admin/rooms/" + this.roomId + "/beds")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createBedDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.count", is(2)))
                .andExpect(jsonPath("$.beds", hasSize(2)))
                .andReturn();
        BedsCreatedResponseDto beds = objectMapper.readValue(bedsResult.getResponse().getContentAsString(), BedsCreatedResponseDto.class);
        this.bed1Id = beds.beds().get(0).id();
        this.bed2Id = beds.beds().get(1).id();
        assertNotNull(this.bed1Id);
        assertNotNull(this.bed2Id);
    }

    @Test
    @Order(2)
    @DisplayName("姝ラ2 [ADM-01, ADM-02]: 绠＄悊鍛樺垱寤哄垎閰嶅懆鏈熷苟璁捐闂嵎")
    void step2_AdminCreatesCycleAndDesignsSurvey() throws Exception {
        // 1. Create a cycle
        MatchingCycleCreateDto createCycleDto = new MatchingCycleCreateDto("2024绾ц绠楁満瀛﹂櫌鏂扮敓鍒嗛厤", Instant.now(), Instant.now().plusSeconds(86400 * 7));
        MvcResult cycleResult = mockMvc.perform(post("/api/admin/cycles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createCycleDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.status", is("DRAFT")))
                .andReturn();
        this.cycleId = objectMapper.readValue(cycleResult.getResponse().getContentAsString(), MatchingCycleDto.class).id();
        assertNotNull(this.cycleId);

        // 2. Add a 'SOFT_FACTOR' dimension
        List<OptionCreateDto> cleanlinessOptions = List.of(
                new OptionCreateDto("姣忓ぉ鎵撴壂", 1.0),
                new OptionCreateDto("姣忓懆鎵撴壂", 3.0),
                new OptionCreateDto("鏈夌┖鍐嶆墦鎵?, 5.0)
        );
        SurveyDimensionCreateDto cleanlinessDim = new SurveyDimensionCreateDto("cleanliness", "浣犲瀹胯垗鐨勬暣娲佸害瑕佹眰鏄紵", "SOFT_FACTOR", "SINGLE_CHOICE", 1.5, null, false, cleanlinessOptions);
        MvcResult dim1Result = mockMvc.perform(post("/api/admin/cycles/" + this.cycleId + "/dimensions")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(cleanlinessDim)))
                .andExpect(status().isCreated())
                .andReturn();
        this.cleanlinessDimensionId = objectMapper.readValue(dim1Result.getResponse().getContentAsString(), SurveyDimensionDto.class).id();
        assertNotNull(this.cleanlinessDimensionId);

        // 3. Add a 'HARD_FILTER' dimension
        List<OptionCreateDto> atmosphereOptions = List.of(
                new OptionCreateDto("甯屾湜瀹夐潤瀛︿範", 1.0),
                new OptionCreateDto("甯屾湜鐑椆娲昏穬", 2.0)
        );
        SurveyDimensionCreateDto atmosphereDim = new SurveyDimensionCreateDto("atmosphere", "浣犳湡鏈涚殑瀹胯垗姘涘洿鏄紵", "HARD_FILTER", "SINGLE_CHOICE", 1.0, null, false, atmosphereOptions);
        MvcResult dim2Result = mockMvc.perform(post("/api/admin/cycles/" + this.cycleId + "/dimensions")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(atmosphereDim)))
                .andExpect(status().isCreated())
                .andReturn();
        this.atmosphereDimensionId = objectMapper.readValue(dim2Result.getResponse().getContentAsString(), SurveyDimensionDto.class).id();
        assertNotNull(this.atmosphereDimensionId);
    }

    @Test
    @Order(3)
    @DisplayName("姝ラ3 [STU-02]: 绠＄悊鍛樺紑鏀惧懆鏈燂紝瀛︾敓鑾峰彇闂嵎骞舵彁浜?)
    void step3_AdminOpensCycleAndStudentsSubmitSurvey() throws Exception {
        // 1. Admin opens the cycle
        MatchingCycleUpdateDto updateDto = new MatchingCycleUpdateDto(null, null, null, "OPEN");
        mockMvc.perform(put("/api/admin/cycles/" + this.cycleId)
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status", is("OPEN")));

        // 2. Student 1 (寮犱笁) fetches and submits the survey
        mockMvc.perform(get("/api/student/survey").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.dimensions", hasSize(2)));

        List<ResponseItem> student1Responses = List.of(
                new ResponseItem(cleanlinessDimensionId, 1.0), // 姣忓ぉ鎵撴壂
                new ResponseItem(atmosphereDimensionId, 1.0)  // 甯屾湜瀹夐潤
        );
        UserResponseSubmitDto submitDto1 = new UserResponseSubmitDto(student1Responses);
        mockMvc.perform(post("/api/student/responses")
                        .header("Authorization", studentToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(submitDto1)))
                .andExpect(status().isOk());

        // 3. Student 2 (鏉庡洓) fetches and submits the survey
        List<ResponseItem> student2Responses = List.of(
                new ResponseItem(cleanlinessDimensionId, 3.0), // 姣忓懆鎵撴壂
                new ResponseItem(atmosphereDimensionId, 1.0)  // 甯屾湜瀹夐潤
        );
        UserResponseSubmitDto submitDto2 = new UserResponseSubmitDto(student2Responses);
        mockMvc.perform(post("/api/student/responses")
                        .header("Authorization", roommateToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(submitDto2)))
                .andExpect(status().isOk());
    }

    @Test
    @Order(4)
    @DisplayName("姝ラ4 [ADM-03, ADM-08]: 绠＄悊鍛樿Е鍙戝垎閰嶅苟妫€楠岀粨鏋?)
    void step4_AdminTriggersAndValidatesAssignment() throws Exception {
        // 1. Admin triggers assignment
        mockMvc.perform(post("/api/admin/cycles/" + this.cycleId + "/trigger-assignment")
                        .header("Authorization", adminToken))
                .andExpect(status().isAccepted());

        // *** MOCKING THE ALGORITHM'S RESULT ***
        // In a real test against a running system, we might need to wait.
        // Here, we manually create the results in the DB to test the downstream APIs.
        UUID groupId = UUID.randomUUID();
        createMatchingResult(cycleId, studentUser.getId(), bed1Id, groupId);
        createMatchingResult(cycleId, roommateUser.getId(), bed2Id, groupId);

        // 2. Admin verifies the results (assuming this endpoint is now implemented)
        // This is a placeholder test for an API defined in the spec but not yet in the provided code.
        // The test serves as a driver for implementing this feature.
        mockMvc.perform(get("/api/admin/cycles/" + cycleId + "/validate-results")
                        .header("Authorization", adminToken))
                // For now, we expect a 200 OK with a basic success message, as logic is placeholder.
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.isValid", is(true)));
    }

    @Test
    @Order(5)
    @DisplayName("姝ラ5 [STU-03, STU-04]: 瀛︾敓鏌ョ湅鍒嗛厤缁撴灉骞舵彁浜ゅ弽棣堝拰鐢宠")
    void step5_StudentChecksResultAndSubmitsFeedback() throws Exception {
        // 1. Student 1 checks their result
        mockMvc.perform(get("/api/student/result").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assignment.building", is("绱崋鍏瘬")))
                .andExpect(jsonPath("$.assignment.room", is("401")))
                .andExpect(jsonPath("$.assignment.bed", is(1))) // Bed number might vary, but for this mock, it's 1
                .andExpect(jsonPath("$.roommates", hasSize(1)))
                .andExpect(jsonPath("$.roommates[0].name", is("鏉庡洓")));

        // 2. Student 1 submits feedback (placeholder for a new feature)
        // FeedbackCreate feedbackDto = new FeedbackCreate(false, 5, "鍒嗛厤缁撴灉寰堟弧鎰忥紝瀹ゅ弸鐪嬭捣鏉ヤ笉閿欙紒");
        // mockMvc.perform(post("/api/student/feedback")
        //                 .header("Authorization", studentToken)
        //                 .contentType(MediaType.APPLICATION_JSON)
        //                 .content(objectMapper.writeValueAsString(feedbackDto)))
        //         .andExpect(status().isCreated());

        // 3. Student 1 submits a swap request (placeholder for a new feature)
        // SwapRequestCreate swapDto = new SwapRequestCreate("鎰熻绌鸿皟浣嶇疆涓嶅お濂斤紝鎯虫崲涓€涓簥浣嶃€?);
        // MvcResult swapResult = mockMvc.perform(post("/api/student/swap-requests")
        //                 .header("Authorization", studentToken)
        //                 .contentType(MediaType.APPLICATION_JSON)
        //                 .content(objectMapper.writeValueAsString(swapDto)))
        //         .andExpect(status().isCreated())
        //         .andReturn();
        // this.swapRequestId = objectMapper.readValue(swapResult.getResponse().getContentAsString(), SwapRequest.class).getId();
        // assertNotNull(this.swapRequestId);
    }

    @Test
    @Order(6)
    @DisplayName("姝ラ6 [ADM-06, ADM-07]: 绠＄悊鍛樺鐞嗙敵璇峰苟鍙戝竷鍐呭")
    void step6_AdminProcessesRequestsAndPublishesContent() throws Exception {
        // This whole step is a placeholder for new features defined in the spec.

        // 1. Admin reviews and approves the swap request
        // SwapRequestUpdate swapUpdateDto = new SwapRequestUpdate("APPROVED", "宸蹭笌鍚屽娌熼€氾紝鍚屾剰璋冩崲銆?);
        // mockMvc.perform(put("/api/admin/swap-requests/" + this.swapRequestId + "/process")
        //                 .header("Authorization", adminToken)
        //                 .contentType(MediaType.APPLICATION_JSON)
        //                 .content(objectMapper.writeValueAsString(swapUpdateDto)))
        //         .andExpect(status().isOk())
        //         .andExpect(jsonPath("$.status", is("APPROVED")));

        // 2. Admin publishes a new article
        // ArticleCreate articleDto = new ArticleCreate("瀹胯垗鏂囧寲寤鸿灏忚创澹?, "...", "瀹胯垗鏂囧寲");
        // mockMvc.perform(post("/api/admin/articles")
        //                 .header("Authorization", adminToken)
        //                 .contentType(MediaType.APPLICATION_JSON)
        //                 .content(objectMapper.writeValueAsString(articleDto)))
        //         .andExpect(status().isCreated());
    }

    @Test
    @Order(7)
    @DisplayName("姝ラ7 [STU-05]: 瀛︾敓鏌ョ湅鏀寔鍐呭鍜岄€氱煡")
    void step7_StudentViewsContentAndNotifications() throws Exception {
        // This whole step is a placeholder for new features defined in the spec.

        // 1. Student checks for new articles
        // mockMvc.perform(get("/api/student/articles?category=瀹胯垗鏂囧寲").header("Authorization", studentToken))
        //         .andExpect(status().isOk())
        //         .andExpect(jsonPath("$", hasSize(1)))
        //         .andExpect(jsonPath("$[0].title", is("瀹胯垗鏂囧寲寤鸿灏忚创澹?)));

        // 2. Student checks for notifications (e.g., about the approved swap request)
        // mockMvc.perform(get("/api/student/notifications").header("Authorization", studentToken))
        //         .andExpect(status().isOk())
        //         .andExpect(jsonPath("$[0].message", containsString("鎮ㄧ殑璋冨鐢宠宸茶鎵瑰噯")));
    }


    @Test
    @Order(8)
    @DisplayName("姝ラ8: 绠＄悊鍛樿繘琛屾竻鐞嗗拰鍐茬獊娴嬭瘯")
    void step8_AdminCleanupAndConflictTest() throws Exception {
        // 1. Try to delete a building that contains rooms -> Should fail
        mockMvc.perform(delete("/api/admin/dorm-buildings/" + this.buildingId).header("Authorization", adminToken))
                .andExpect(status().isConflict());

        // 2. Try to delete a room that contains beds -> Should fail
        mockMvc.perform(delete("/api/admin/dorm-rooms/" + this.roomId).header("Authorization", adminToken))
                .andExpect(status().isConflict());

        // 3. Try to delete a cycle that is not in DRAFT state -> Should fail
        mockMvc.perform(delete("/api/admin/cycles/" + this.cycleId).header("Authorization", adminToken))
                .andExpect(status().isConflict());

        // 4. Successfully delete a dimension
        mockMvc.perform(delete("/api/admin/cycles/" + this.cycleId + "/dimensions/" + this.cleanlinessDimensionId)
                        .header("Authorization", adminToken))
                .andExpect(status().isNoContent());
    }


    // --- Helper Methods ---
    private User createUser(String studentId, String password, String role, String name, String gender, String college) {
        User user = new User();
        user.setStudentId(studentId);
        user.setName(name);
        user.setPassword(passwordEncoder.encode(password));
        user.setRole(role);
        user.setGender(gender);
        user.setCollege(college);
        return userRepository.save(user);
    }

    private String getToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        return "Bearer " + response.token();
    }

    @Transactional
    void createMatchingResult(UUID cycleId, UUID userId, UUID bedId, UUID groupId) {
        MatchingResult result = new MatchingResult();
        result.setCycle(cycleRepository.findById(cycleId).orElseThrow());
        result.setUser(userRepository.findById(userId).orElseThrow());
        result.setBed(bedRepository.findById(bedId).orElseThrow());
        result.setMatchGroupId(groupId);
        resultRepository.save(result);
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\SecondFullSystemFlowIntegrationTest.java:
// src/test/java/com/smartdorm/backend/controller/FullSystemFlowIntegrationTest.java
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.AdminDtos;
import com.smartdorm.backend.dto.CycleDtos.*;
import com.smartdorm.backend.dto.DormDtos.*;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.dto.StudentDtos.*;
import com.smartdorm.backend.dto.SupportDtos;
import com.smartdorm.backend.entity.*;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.antlr.v4.runtime.misc.LogManager;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.time.Instant;
import java.util.List;
import java.util.UUID;

import static org.hamcrest.Matchers.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("瓒呭ぇ瑙勬ā闆嗘垚娴嬭瘯: 绔埌绔郴缁熷叏娴佺▼楠岃瘉")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class SecondFullSystemFlowIntegrationTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");
    static {
        postgres.start();
    }
    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private PasswordEncoder passwordEncoder;

    // Repositories
    @Autowired private UserRepository userRepository;
    @Autowired private MatchingCycleRepository cycleRepository;
    @Autowired private SurveyDimensionRepository dimensionRepository;
    @Autowired private DormBuildingRepository buildingRepository;
    @Autowired private DormRoomRepository roomRepository;
    @Autowired private BedRepository bedRepository;
    @Autowired private MatchingResultRepository resultRepository;
    @Autowired private UserResponseRepository responseRepository;
    @Autowired private SwapRequestRepository swapRequestRepository;
    @Autowired private ContentArticleRepository articleRepository;
    @Autowired private FeedbackRepository feedbackRepository;
    @Autowired NotificationRepository  notificationRepository;

    // State
    private String adminToken;
    private String studentToken;
    private String roommateToken;
    private User studentUser;
    private User roommateUser;
    private UUID cycleId;
    private UUID buildingId;
    private UUID roomId;
    private UUID bed1Id;
    private UUID bed2Id;
    private UUID cleanlinessDimensionId;
    private UUID atmosphereDimensionId;
    private UUID swapRequestId;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
    }

    @BeforeAll
    void setupAll() throws Exception {
        // Clean slate
        resultRepository.deleteAllInBatch();
        responseRepository.deleteAllInBatch();
        notificationRepository.deleteAllInBatch();
        swapRequestRepository.deleteAllInBatch();
        feedbackRepository.deleteAllInBatch();
        articleRepository.deleteAllInBatch();
        bedRepository.deleteAllInBatch();
        roomRepository.deleteAllInBatch();
        buildingRepository.deleteAllInBatch();
        dimensionRepository.deleteAllInBatch();
        cycleRepository.deleteAllInBatch();
        userRepository.deleteAllInBatch();

        // Create Users
        User admin = createUser("full_admin", "password", "ADMIN", "绯荤粺绠＄悊鍛?, "MALE", "绠＄悊瀛﹂櫌");
        studentUser = createUser("student_01", "password", "STUDENT", "寮犱笁", "MALE", "璁＄畻鏈哄闄?);
        roommateUser = createUser("student_02", "password", "STUDENT", "鏉庡洓", "MALE", "璁＄畻鏈哄闄?);

        // Get Tokens
        adminToken = getToken(admin.getStudentId(), "password");
        studentToken = getToken(studentUser.getStudentId(), "password");
        roommateToken = getToken(roommateUser.getStudentId(), "password");

        assertNotNull(adminToken);
        assertNotNull(studentToken);
        assertNotNull(roommateToken);
    }

    @Test
    @Order(1)
    @DisplayName("姝ラ1 [ADM-05]: 绠＄悊鍛樿缃熀纭€鐗╃悊璧勬簮锛堟ゼ鏍嬨€佹埧闂淬€佸簥浣嶏級")
    void step1_AdminManagesDormResources() throws Exception {
        BuildingCreateUpdateDto createBuildingDto = new BuildingCreateUpdateDto("绱崋鍏瘬");
        MvcResult buildingResult = mockMvc.perform(post("/api/admin/dorm-buildings")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createBuildingDto)))
                .andExpect(status().isCreated())
                .andReturn();
        this.buildingId = objectMapper.readValue(buildingResult.getResponse().getContentAsString(), DormBuildingDto.class).id();
        assertNotNull(this.buildingId);

        RoomCreateUpdateDto createRoomDto = new RoomCreateUpdateDto(this.buildingId, "401", 4, "MALE");
        MvcResult roomResult = mockMvc.perform(post("/api/admin/dorm-rooms")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createRoomDto)))
                .andExpect(status().isCreated())
                .andReturn();
        DormRoomDto createdRoom = objectMapper.readValue(roomResult.getResponse().getContentAsString(), DormRoomDto.class);
        this.roomId = createdRoom.id();
        assertNotNull(this.roomId);

        BedCreateRequestDto createBedDto = new BedCreateRequestDto(2);
        MvcResult bedsResult = mockMvc.perform(post("/api/admin/rooms/" + this.roomId + "/beds")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createBedDto)))
                .andExpect(status().isCreated())
                .andReturn();
        BedsCreatedResponseDto beds = objectMapper.readValue(bedsResult.getResponse().getContentAsString(), BedsCreatedResponseDto.class);
        this.bed1Id = beds.beds().get(0).id();
        this.bed2Id = beds.beds().get(1).id();
        assertNotNull(this.bed1Id);
        assertNotNull(this.bed2Id);
    }

    @Test
    @Order(2)
    @DisplayName("姝ラ2 [ADM-01, ADM-02]: 绠＄悊鍛樺垱寤哄垎閰嶅懆鏈熷苟璁捐闂嵎")
    void step2_AdminCreatesCycleAndDesignsSurvey() throws Exception {
        MatchingCycleCreateDto createCycleDto = new MatchingCycleCreateDto("2024绾ц绠楁満瀛﹂櫌鏂扮敓鍒嗛厤", Instant.now(), Instant.now().plusSeconds(86400 * 7));
        MvcResult cycleResult = mockMvc.perform(post("/api/admin/cycles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createCycleDto)))
                .andExpect(status().isCreated())
                .andReturn();
        this.cycleId = objectMapper.readValue(cycleResult.getResponse().getContentAsString(), MatchingCycleDto.class).id();
        assertNotNull(this.cycleId);

        List<OptionCreateDto> cleanlinessOptions = List.of(new OptionCreateDto("姣忔棩鎵撴壂", 1.0), new OptionCreateDto("姣忓懆鎵撴壂", 3.0), new OptionCreateDto("鏈夌┖鍐嶆墦鎵?, 5.0));
        SurveyDimensionCreateDto cleanlinessDim = new SurveyDimensionCreateDto("cleanliness", "浣犲瀹胯垗鐨勬暣娲佸害瑕佹眰鏄紵", "SOFT_FACTOR", "SINGLE_CHOICE", 1.5, null, false, cleanlinessOptions);
        MvcResult dim1Result = mockMvc.perform(post("/api/admin/cycles/" + this.cycleId + "/dimensions").header("Authorization", adminToken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(cleanlinessDim))).andExpect(status().isCreated()).andReturn();
        this.cleanlinessDimensionId = objectMapper.readValue(dim1Result.getResponse().getContentAsString(), SurveyDimensionDto.class).id();
        assertNotNull(this.cleanlinessDimensionId);

        List<OptionCreateDto> atmosphereOptions = List.of(new OptionCreateDto("甯屾湜瀹夐潤瀛︿範", 1.0), new OptionCreateDto("甯屾湜鐑椆娲昏穬", 2.0));
        SurveyDimensionCreateDto atmosphereDim = new SurveyDimensionCreateDto("atmosphere", "浣犳湡鏈涚殑瀹胯垗姘涘洿鏄紵", "HARD_FILTER", "SINGLE_CHOICE", 1.0, null, false, atmosphereOptions);
        MvcResult dim2Result = mockMvc.perform(post("/api/admin/cycles/" + this.cycleId + "/dimensions").header("Authorization", adminToken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(atmosphereDim))).andExpect(status().isCreated()).andReturn();
        this.atmosphereDimensionId = objectMapper.readValue(dim2Result.getResponse().getContentAsString(), SurveyDimensionDto.class).id();
        assertNotNull(this.atmosphereDimensionId);
    }

    @Test
    @Order(3)
    @DisplayName("姝ラ3 [STU-02]: 绠＄悊鍛樺紑鏀惧懆鏈燂紝瀛︾敓鑾峰彇闂嵎骞舵彁浜?)
    void step3_AdminOpensCycleAndStudentsSubmitSurvey() throws Exception {
        MatchingCycleUpdateDto updateDto = new MatchingCycleUpdateDto(null, null, null, "OPEN");
        mockMvc.perform(put("/api/admin/cycles/" + this.cycleId).header("Authorization", adminToken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(updateDto))).andExpect(status().isOk());

        mockMvc.perform(get("/api/student/survey").header("Authorization", studentToken)).andExpect(status().isOk()).andExpect(jsonPath("$.dimensions", hasSize(2)));

        List<ResponseItem> student1Responses = List.of(new ResponseItem(cleanlinessDimensionId, 1.0), new ResponseItem(atmosphereDimensionId, 1.0));
        UserResponseSubmitDto submitDto1 = new UserResponseSubmitDto(student1Responses);
        mockMvc.perform(post("/api/student/responses").header("Authorization", studentToken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(submitDto1))).andExpect(status().isOk());

        List<ResponseItem> student2Responses = List.of(new ResponseItem(cleanlinessDimensionId, 3.0), new ResponseItem(atmosphereDimensionId, 1.0));
        UserResponseSubmitDto submitDto2 = new UserResponseSubmitDto(student2Responses);
        mockMvc.perform(post("/api/student/responses").header("Authorization", roommateToken).contentType(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(submitDto2))).andExpect(status().isOk());
    }

    @Test
    @Order(4)
    @DisplayName("姝ラ4 [ADM-03, ADM-08]: 绠＄悊鍛樿Е鍙戝垎閰嶅苟妫€楠岀粨鏋滆川閲?(澧炲己娴嬭瘯)")
    void step4_AdminTriggersAndValidatesAssignment() throws Exception {
        // 1. Admin triggers assignment
        mockMvc.perform(post("/api/admin/cycles/" + this.cycleId + "/trigger-assignment")
                        .header("Authorization", adminToken))
                .andExpect(status().isAccepted());

        // *** MOCKING THE ALGORITHM'S RESULT ***
        createMatchingResult(cycleId, studentUser.getId(), bed1Id, roomId);
        createMatchingResult(cycleId, roommateUser.getId(), bed2Id, roomId);

        // 2. Admin validates the results and we assert the full response structure
        mockMvc.perform(get("/api/admin/cycles/" + this.cycleId + "/validate-results")
                        .header("Authorization", adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.isValid", is(true)))
                .andExpect(jsonPath("$.message", is("Results meet all validation criteria.")))
                .andExpect(jsonPath("$.details", hasSize(1)))
                .andExpect(jsonPath("$.details[0].dorm", is("Zijing Building 1-301")))
                .andExpect(jsonPath("$.details[0].metric", is("Neuroticism Mean")))
                .andExpect(jsonPath("$.details[0].value", is(0.55)))
                .andExpect(jsonPath("$.details[0].isCompliant", is(true)));
    }

    @Test
    @Order(5)
    @DisplayName("姝ラ5 [ADM-04]: 绠＄悊鍛樻煡鐪嬫渶缁堝垎閰嶇粨鏋滄竻鍗?)
    void step5_AdminViewsAssignmentResults() throws Exception {
        mockMvc.perform(get("/api/admin/cycles/" + this.cycleId + "/results")
                        .header("Authorization", adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(2)))
                .andExpect(jsonPath("$[*].user.name", containsInAnyOrder("寮犱笁", "鏉庡洓")))
                .andExpect(jsonPath("$[0].building", is("绱崋鍏瘬")))
                .andExpect(jsonPath("$[0].room", is("401")));
    }

    @Test
    @Order(6)
    @DisplayName("姝ラ6 [STU-03, STU-04]: 瀛︾敓鏌ョ湅鍒嗛厤缁撴灉骞舵彁浜ゅ弽棣堝拰鐢宠")
    void step6_StudentChecksResultAndSubmitsSupportRequests() throws Exception {
        mockMvc.perform(get("/api/student/result").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assignment.building", is("绱崋鍏瘬")))
                .andExpect(jsonPath("$.assignment.room", is("401")))
                .andExpect(jsonPath("$.roommates", hasSize(1)))
                .andExpect(jsonPath("$.roommates[0].name", is("鏉庡洓")));

        // Submit Feedback
        var feedbackDto = new SupportDtos.FeedbackCreateDto(false, 5, "鍒嗛厤缁撴灉寰堟弧鎰忥紒");
        mockMvc.perform(post("/api/student/feedback")
                        .header("Authorization", studentToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(feedbackDto)))
                .andExpect(status().isCreated());

        // Submit Swap Request
        var swapDto = new SupportDtos.SwapRequestCreateDto("鎰熻绌鸿皟浣嶇疆涓嶅お濂斤紝鎯虫崲涓€涓簥浣嶃€?);
        mockMvc.perform(post("/api/student/swap-requests")
                        .header("Authorization", studentToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(swapDto)))
                .andExpect(status().isCreated());

        // Save swapRequestId for next step
        this.swapRequestId = swapRequestRepository.findAll().get(0).getId();
    }

    @Test
    @Order(7)
    @DisplayName("姝ラ7 [ADM-06, ADM-07]: 绠＄悊鍛樺鐞嗙敵璇峰苟鍙戝竷鍐呭")
    void step7_AdminProcessesRequestsAndPublishesContent() throws Exception {
        var swapUpdateDto = new SupportDtos.SwapRequestUpdateDto("APPROVED", "宸蹭笌鍚屽娌熼€氾紝鍚屾剰璋冩崲銆?);
        mockMvc.perform(put("/api/admin/swap-requests/" + this.swapRequestId + "/process")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(swapUpdateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status", is("APPROVED")));

        var articleDto = new SupportDtos.ArticleCreateDto("瀹胯垗鏂囧寲寤鸿灏忚创澹?, "...", "瀹胯垗鏂囧寲");
        mockMvc.perform(post("/api/admin/articles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(articleDto)))
                .andExpect(status().isCreated());
    }

    @Test
    @Order(8)
    @DisplayName("姝ラ8 [STU-05]: 瀛︾敓鏌ョ湅鏀寔鍐呭鍜岄€氱煡")
    void step8_StudentViewsContentAndNotifications() throws Exception {
        mockMvc.perform(get("/api/student/articles?category=瀹胯垗鏂囧寲").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].title", is("瀹胯垗鏂囧寲寤鸿灏忚创澹?)));

        // Manually create a notification for the test
        Notification notification = new Notification();
        notification.setUser(studentUser);
        notification.setMessage("鎮ㄧ殑璋冨鐢宠宸茶鎵瑰噯");
        notificationRepository.save(notification);

        mockMvc.perform(get("/api/student/notifications").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].message", containsString("鎮ㄧ殑璋冨鐢宠宸茶鎵瑰噯")));
    }


    // --- Helper Methods ---
    private User createUser(String studentId, String password, String role, String name, String gender, String college) {
        User user = new User();
        user.setStudentId(studentId);
        user.setName(name);
        user.setPassword(passwordEncoder.encode(password));
        user.setRole(role);
        user.setGender(gender);
        user.setCollege(college);
        return userRepository.save(user);
    }

    private String getToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        return "Bearer " + response.token();
    }

    @Transactional
    void createMatchingResult(UUID cycleId, UUID userId, UUID bedId, UUID groupId) {
        MatchingResult result = new MatchingResult();
        result.setCycle(cycleRepository.findById(cycleId).orElseThrow());
        result.setUser(userRepository.findById(userId).orElseThrow());
        result.setBed(bedRepository.findById(bedId).orElseThrow());
        result.setMatchGroupId(groupId);
        resultRepository.save(result);
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\StudentFlowIntegrationTest.java:
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.CycleDtos;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.dto.StudentDtos;
import com.smartdorm.backend.entity.*;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.List;
import java.util.UUID;

import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("闆嗘垚娴嬭瘯: 瀛︾敓鏍稿績娴佺▼")
@Transactional
public class StudentFlowIntegrationTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private UserRepository userRepository;
    @Autowired private MatchingCycleRepository cycleRepository;
    @Autowired private SurveyDimensionRepository dimensionRepository;
    @Autowired private DormBuildingRepository buildingRepository;
    @Autowired private DormRoomRepository roomRepository;
    @Autowired private BedRepository bedRepository;
    @Autowired private MatchingResultRepository resultRepository;

    private String adminToken;
    private String studentToken;
    private User studentUser;
    private User roommateUser;
    private SurveyDimension surveyDimension;
    private MatchingCycle openCycle;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
    }

    @BeforeEach
    void setUp() throws Exception {
        resultRepository.deleteAll();
        bedRepository.deleteAll();
        roomRepository.deleteAll();
        buildingRepository.deleteAll();
        dimensionRepository.deleteAll();
        cycleRepository.deleteAll();
        userRepository.deleteAll();

        // Create users
        User admin = createUser("admin-p4", "pass", "ADMIN", "Admin P4");
        studentUser = createUser("student-p4", "pass", "STUDENT", "Student P4");
        roommateUser = createUser("roommate-p4", "pass", "STUDENT", "Roommate P4");

        // Get tokens
        adminToken = getToken("admin-p4", "pass");
        studentToken = getToken("student-p4", "pass");

        // Admin creates a cycle and a dimension
        openCycle = new MatchingCycle();
        openCycle.setName("Test Cycle");
        openCycle.setStatus("OPEN");
        cycleRepository.save(openCycle);

        surveyDimension = new SurveyDimension();
        surveyDimension.setCycle(openCycle);
        surveyDimension.setDimensionKey("test_key");
        surveyDimension.setPrompt("Test Prompt");
        surveyDimension.setDimensionType("SOFT_FACTOR");
        surveyDimension.setResponseType("SCALE");
        dimensionRepository.save(surveyDimension);
    }

    @Test
    @DisplayName("瀛︾敓鍙互鑾峰彇闂嵎銆佹彁浜ょ瓟妗堛€佸苟鏌ョ湅妯℃嫙鐨勫垎閰嶇粨鏋?)
    void studentCanPerformFullSurveyAndResultCheckFlow() throws Exception {
        // Step 1: Student gets the survey
        mockMvc.perform(get("/api/student/survey").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.cycleId", is(openCycle.getId().toString())))
                .andExpect(jsonPath("$.dimensions", hasSize(1)))
                .andExpect(jsonPath("$.dimensions[0].prompt", is("Test Prompt")));

        // Step 2: Student submits responses
        StudentDtos.ResponseItem responseItem = new StudentDtos.ResponseItem(surveyDimension.getId(), 4.0);
        StudentDtos.UserResponseSubmitDto submitDto = new StudentDtos.UserResponseSubmitDto(List.of(responseItem));

        mockMvc.perform(post("/api/student/responses")
                        .header("Authorization", studentToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(submitDto)))
                .andExpect(status().isOk());

        // Step 3: Admin triggers the assignment (placeholder)
        mockMvc.perform(post("/api/admin/cycles/" + openCycle.getId() + "/trigger-assignment")
                        .header("Authorization", adminToken))
                .andExpect(status().isAccepted());

        // Step 4: Manually create assignment results for testing the GET /result endpoint
        createMockResults();

        // Step 5: Student checks their result
        mockMvc.perform(get("/api/student/result").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.assignment.building", is("Test Building")))
                .andExpect(jsonPath("$.assignment.room", is("101")))
                .andExpect(jsonPath("$.assignment.bed", is(1)))
                .andExpect(jsonPath("$.roommates", hasSize(1)))
                .andExpect(jsonPath("$.roommates[0].name", is("Roommate P4")));
    }

    private User createUser(String studentId, String password, String role, String name) {
        User user = new User();
        user.setStudentId(studentId);
        user.setName(name);
        user.setPassword(passwordEncoder.encode(password));
        user.setRole(role);
        user.setGender("MALE");
        user.setCollege("Testing College");
        return userRepository.save(user);
    }

    private String getToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        return "Bearer " + response.token();
    }

    private void createMockResults() {
        DormBuilding building = new DormBuilding();
        building.setName("Test Building");
        buildingRepository.save(building);

        DormRoom room = new DormRoom();
        room.setBuilding(building);
        room.setRoomNumber("101");
        room.setCapacity(4);
        room.setGenderType("MALE");
        roomRepository.save(room);

        Bed bed1 = new Bed();
        bed1.setRoom(room);
        bed1.setBedNumber(1);
        bedRepository.save(bed1);

        Bed bed2 = new Bed();
        bed2.setRoom(room);
        bed2.setBedNumber(2);
        bedRepository.save(bed2);

        UUID groupId = UUID.randomUUID();

        MatchingResult result1 = new MatchingResult();
        result1.setCycle(openCycle);
        result1.setUser(studentUser);
        result1.setBed(bed1);
        result1.setMatchGroupId(groupId);
        resultRepository.save(result1);

        MatchingResult result2 = new MatchingResult();
        result2.setCycle(openCycle);
        result2.setUser(roommateUser);
        result2.setBed(bed2);
        result2.setMatchGroupId(groupId);
        resultRepository.save(result2);
    }
}
----------
.\src\test\java\com\smartdorm\backend\controller\SupportFeaturesIntegrationTest.java:
package com.smartdorm.backend.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smartdorm.backend.dto.LoginRequest;
import com.smartdorm.backend.dto.LoginResponse;
import com.smartdorm.backend.dto.SupportDtos.*;
import com.smartdorm.backend.entity.MatchingCycle;
import com.smartdorm.backend.entity.Notification;
import com.smartdorm.backend.entity.User;
import com.smartdorm.backend.repository.*;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.UUID;

import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@Testcontainers
@AutoConfigureMockMvc
@DisplayName("闆嗘垚娴嬭瘯: P5 - 鏀寔鎬у姛鑳?(Feedback, Swap, Article, Notification)")
@Transactional
public class SupportFeaturesIntegrationTest {

    @Container
    private static final PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15-alpine");

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private UserRepository userRepository;
    @Autowired private MatchingCycleRepository cycleRepository;
    @Autowired private NotificationRepository notificationRepository;
    @Autowired private SwapRequestRepository swapRequestRepository;
    @Autowired private ContentArticleRepository articleRepository;

    private String adminToken;
    private String studentToken;
    private User studentUser;
    private User adminUser;
    private MatchingCycle completedCycle;

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create");
    }

    @BeforeEach
    void setUp() throws Exception {
        // Clean slate
        notificationRepository.deleteAll();
        swapRequestRepository.deleteAll();
        articleRepository.deleteAll();
        cycleRepository.deleteAll();
        userRepository.deleteAll();

        // Create users
        adminUser = createUser("admin-p5", "pass", "ADMIN", "Support Admin");
        studentUser = createUser("student-p5", "pass", "STUDENT", "Support Student");

        // Get tokens
        adminToken = getToken("admin-p5", "pass");
        studentToken = getToken("student-p5", "pass");

        // Create a completed cycle for context
        completedCycle = new MatchingCycle();
        completedCycle.setName("Completed Cycle For Support");
        completedCycle.setStatus("COMPLETED");
        cycleRepository.save(completedCycle);
    }

    @Test
    @DisplayName("瀛︾敓鍙互鎻愪氦鍙嶉鍜岃皟瀹跨敵璇凤紝绠＄悊鍛樺彲浠ユ煡鐪嬪拰澶勭悊鐢宠")
    void testFeedbackAndSwapRequestFlow() throws Exception {
        // 1. Student submits feedback
        FeedbackCreateDto feedbackDto = new FeedbackCreateDto(false, 5, "Great experience!");
        mockMvc.perform(post("/api/student/feedback")
                        .header("Authorization", studentToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(feedbackDto)))
                .andExpect(status().isCreated());

        // 2. Student submits a swap request
        SwapRequestCreateDto swapDto = new SwapRequestCreateDto("Circumstantial reasons.");
        mockMvc.perform(post("/api/student/swap-requests")
                        .header("Authorization", studentToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(swapDto)))
                .andExpect(status().isCreated());

        // 3. Admin gets the list of swap requests
        MvcResult getResult = mockMvc.perform(get("/api/admin/swap-requests")
                        .header("Authorization", adminToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].reason", is("Circumstantial reasons.")))
                .andExpect(jsonPath("$[0].status", is("PENDING")))
                .andReturn();
        String jsonResponse = getResult.getResponse().getContentAsString();
        SwapRequestDto[] requests = objectMapper.readValue(jsonResponse, SwapRequestDto[].class);
        UUID requestId = requests[0].id();

        // 4. Admin processes (approves) the swap request
        SwapRequestUpdateDto updateDto = new SwapRequestUpdateDto("APPROVED", "Approved after review.");
        mockMvc.perform(put("/api/admin/swap-requests/" + requestId + "/process")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status", is("APPROVED")))
                .andExpect(jsonPath("$.adminComment", is("Approved after review.")));
    }

    @Test
    @DisplayName("绠＄悊鍛樺彲浠ュ畬鏁寸鐞嗘枃绔狅紝瀛︾敓鍙互鏌ョ湅鏂囩珷")
    void testArticleManagementFlow() throws Exception {
        // 1. Admin creates an article
        ArticleCreateDto createDto = new ArticleCreateDto("鎸囧崡", "瀹胯垗鐢熸椿鎸囧崡", "鐢熸椿鎶€宸?);
        MvcResult createResult = mockMvc.perform(post("/api/admin/articles")
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(createDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.title", is("鎸囧崡")))
                .andExpect(jsonPath("$.authorName", is("Support Admin")))
                .andReturn();
        ArticleDto createdArticle = objectMapper.readValue(createResult.getResponse().getContentAsString(), ArticleDto.class);
        UUID articleId = createdArticle.id();

        // 2. Student gets the list of articles
        mockMvc.perform(get("/api/student/articles").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].id", is(articleId.toString())));

        // 3. Student gets a specific article
        mockMvc.perform(get("/api/student/articles/" + articleId).header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content", is("瀹胯垗鐢熸椿鎸囧崡")));

        // 4. Admin updates the article
        ArticleUpdateDto updateDto = new ArticleUpdateDto("鏇存柊鐗堟寚鍗?, null, "蹇冪悊鍋ュ悍");
        mockMvc.perform(put("/api/admin/articles/" + articleId)
                        .header("Authorization", adminToken)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title", is("鏇存柊鐗堟寚鍗?)))
                .andExpect(jsonPath("$.category", is("蹇冪悊鍋ュ悍")));

        // 5. Admin deletes the article
        mockMvc.perform(delete("/api/admin/articles/" + articleId).header("Authorization", adminToken))
                .andExpect(status().isNoContent());

        // 6. Student cannot find the article anymore
        mockMvc.perform(get("/api/student/articles/" + articleId).header("Authorization", studentToken))
                .andExpect(status().isNotFound());
    }

    @Test
    @DisplayName("瀛︾敓鍙互鑾峰彇閫氱煡鍒楄〃骞跺皢閫氱煡鏍囪涓哄凡璇?)
    void testNotificationFlow() throws Exception {
        // Manually create a notification for the student
        Notification notification = new Notification();
        notification.setUser(studentUser);
        notification.setMessage("鎮ㄧ殑鍒嗛厤缁撴灉宸插嚭鐐夛紒");
        notification.setLinkUrl("/api/student/result");
        notification = notificationRepository.save(notification);
        UUID notificationId = notification.getId();

        // 1. Student gets their notifications
        mockMvc.perform(get("/api/student/notifications").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].isRead", is(false)))
                .andExpect(jsonPath("$[0].message", is("鎮ㄧ殑鍒嗛厤缁撴灉宸插嚭鐐夛紒")));

        // 2. Student marks the notification as read
        mockMvc.perform(post("/api/student/notifications/" + notificationId + "/read")
                        .header("Authorization", studentToken))
                .andExpect(status().isNoContent());

        // 3. Student gets notifications again and verifies it's read
        mockMvc.perform(get("/api/student/notifications").header("Authorization", studentToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", hasSize(1)))
                .andExpect(jsonPath("$[0].isRead", is(true)));
    }


    // Helper methods
    private User createUser(String studentId, String password, String role, String name) {
        User user = new User();
        user.setStudentId(studentId);
        user.setName(name);
        user.setPassword(passwordEncoder.encode(password));
        user.setRole(role);
        user.setGender("MALE");
        user.setCollege("Testing College");
        return userRepository.save(user);
    }

    private String getToken(String username, String password) throws Exception {
        LoginRequest loginRequest = new LoginRequest(username, password);
        MvcResult result = mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn();
        LoginResponse response = objectMapper.readValue(result.getResponse().getContentAsString(), LoginResponse.class);
        return "Bearer " + response.token();
    }
}
----------
